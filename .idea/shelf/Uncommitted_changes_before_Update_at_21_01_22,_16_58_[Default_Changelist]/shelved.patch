Index: app/src/main/java/com/singularity/ipcaplus/chat/CreateDirectChatActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.singularity.ipcaplus.chat\n\nimport android.content.ContentValues\nimport android.content.Intent\nimport android.net.Uri\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport android.provider.Settings\nimport android.util.Log\nimport android.view.Menu\nimport android.view.MenuInflater\nimport com.google.firebase.Timestamp\nimport com.google.firebase.auth.ktx.auth\nimport com.google.firebase.firestore.ktx.firestore\nimport com.google.firebase.ktx.Firebase\nimport com.singularity.ipcaplus.R\nimport com.singularity.ipcaplus.cryptography.generateRandomIV\nimport com.singularity.ipcaplus.cryptography.metaGenrateKey\nimport com.singularity.ipcaplus.databinding.ActivityCreateChatBinding\nimport com.singularity.ipcaplus.drawer.DrawerActivty\nimport com.singularity.ipcaplus.models.Chat\nimport com.singularity.ipcaplus.models.Message\nimport com.singularity.ipcaplus.utils.ActivityImageHelper\nimport com.singularity.ipcaplus.utils.Backend\nimport com.singularity.ipcaplus.utils.Backend.createJsonArrayString\nimport com.singularity.ipcaplus.utils.Utilis\nimport com.singularity.ipcaplus.utils.Utilis.buildSystemMessage\nimport com.singularity.ipcaplus.utils.Utilis.createNotificationGroup\nimport com.theartofdev.edmodo.cropper.CropImage\nimport com.theartofdev.edmodo.cropper.CropImageView\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.GlobalScope\nimport kotlinx.coroutines.launch\nimport kotlinx.coroutines.withContext\n\nclass CreateDirectChatActivity : ActivityImageHelper() {\n\n\n    val db = Firebase.firestore\n    var noteKey: String = \"\"\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        // Variables\n        var chatName: String\n\n        var type = intent.getStringExtra(\"type\")!!\n        var memberIds = intent.getStringArrayListExtra(\"users\")!!\n        var tokens_adress = arrayListOf<String>()\n\n        val ivGenerated = generateRandomIV()\n\n        for (memberId in memberIds) {\n\n            // Getting all of tokens of  profile associated devices\n            Backend.getAllTokens(memberId) {\n                if (tokens_adress.isEmpty()) {\n                    tokens_adress.clear()\n                }\n                tokens_adress.addAll(it)\n\n                GlobalScope.launch {\n                    withContext(Dispatchers.IO) {\n                        Log.d(\"paaaaaa\", tokens_adress.toString())\n                        noteKey = createNotificationGroup(generateRandomIV(),\n                            createJsonArrayString(tokens_adress))\n                    }\n                }\n\n            }\n\n        }\n\n        // Generate key for chats\n        val keygen = metaGenrateKey()\n\n        Backend.getUserProfile(memberIds[1]) {\n\n\n            chatName = it.name\n\n            // Chat data\n            var chat = Chat(\n                chatName,\n                type,\n                keygen,\n                ivGenerated,\n                noteKey\n            )\n\n            // System message data\n            val message = Message(\n                \"system\",\n                buildSystemMessage(keygen, ivGenerated),\n                Timestamp.now(),\n                \"\"\n\n            )\n\n            val user = HashMap<String, Any>()\n            val admin = hashMapOf<String?, Any>(\n                \"admin\" to true\n            )\n\n            db.collection(\"chat\")\n                .add(chat.toHash())\n                .addOnSuccessListener { documentReference ->\n                    db.collection(\"chat\")\n                        .document(documentReference.id)\n                        .collection(\"message\")\n                        .add(message.toHash())\n                    for (member in memberIds) {\n                        Backend.getUserProfile(memberIds[0]) {\n                            if (member == Firebase.auth.currentUser!!.uid) {\n                                // Chat data\n                                chat = Chat(\n                                    it.name,\n                                    type,\n                                    keygen,\n                                    ivGenerated,\n                                    noteKey\n                                )\n                            }\n\n                            db.collection(\"profile\")\n                                .document(member)\n                                .collection(\"chat\")\n                                .document(documentReference.id)\n                                .set(chat)\n                            db.collection(\"chat\")\n                                .document(documentReference.id)\n                                .collection(\"user\")\n                                .document(member)\n                                .set(user)\n                            db.collection(\"chat\")\n                                .document(documentReference.id)\n                                .collection(\"user\")\n                                .document(member)\n                                .update(admin)\n\n                        }\n\n\n                    }\n\n                }\n                .addOnFailureListener { e ->\n                    Log.w(ContentValues.TAG, \"Error adding document\", e)\n                }\n\n            val intent = Intent(this, DrawerActivty::class.java)\n            startActivity(intent)\n\n        }\n\n\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/singularity/ipcaplus/chat/CreateDirectChatActivity.kt b/app/src/main/java/com/singularity/ipcaplus/chat/CreateDirectChatActivity.kt
--- a/app/src/main/java/com/singularity/ipcaplus/chat/CreateDirectChatActivity.kt	(revision 29efb0e97c5348e589c6b41e71b726f921c3b5a0)
+++ b/app/src/main/java/com/singularity/ipcaplus/chat/CreateDirectChatActivity.kt	(date 1642692660764)
@@ -28,10 +28,7 @@
 import com.singularity.ipcaplus.utils.Utilis.createNotificationGroup
 import com.theartofdev.edmodo.cropper.CropImage
 import com.theartofdev.edmodo.cropper.CropImageView
-import kotlinx.coroutines.Dispatchers
-import kotlinx.coroutines.GlobalScope
-import kotlinx.coroutines.launch
-import kotlinx.coroutines.withContext
+import kotlinx.coroutines.*
 
 class CreateDirectChatActivity : ActivityImageHelper() {
 
@@ -146,10 +143,10 @@
                 }
                 .addOnFailureListener { e ->
                     Log.w(ContentValues.TAG, "Error adding document", e)
-                }
-
-            val intent = Intent(this, DrawerActivty::class.java)
-            startActivity(intent)
+                }.addOnCompleteListener {
+                    val intent = Intent(this, DrawerActivty::class.java)
+                    startActivity(intent)
+                }
 
         }
 
Index: app/src/main/res/layout/row_chat.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:layout_marginTop=\"20dp\"\n    android:layout_marginBottom=\"10dp\">\n\n\n    <androidx.cardview.widget.CardView\n        android:id=\"@+id/viewImageGroup\"\n        android:layout_width=\"65dp\"\n        android:layout_height=\"65dp\"\n        android:layout_centerHorizontal=\"true\"\n        android:layout_marginStart=\"20dp\"\n        android:elevation=\"12dp\"\n        android:innerRadius=\"0dp\"\n        android:shape=\"ring\"\n        android:thicknessRatio=\"1.9\"\n        app:cardCornerRadius=\"40dp\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\">\n\n        <ImageView\n            android:id=\"@+id/imageViewChatGroup\"\n            android:layout_width=\"match_parent\"\n            android:layout_height=\"match_parent\"\n            android:layout_alignParentTop=\"true\"\n            android:layout_centerHorizontal=\"true\"\n            app:srcCompat=\"@drawable/ic_defaultimage\" />\n\n    </androidx.cardview.widget.CardView>\n\n\n    <TextView\n        android:id=\"@+id/textViewChatName\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"match_parent\"\n        android:layout_marginStart=\"20dp\"\n        android:layout_marginTop=\"5dp\"\n        android:layout_marginBottom=\"6dp\"\n        android:fontFamily=\"@font/poppins_semibold\"\n        android:textColor=\"@color/black\"\n\n        android:maxHeight=\"22sp\"\n        android:maxLength=\"30\"\n        android:text=\"Chat Name\"\n        android:textSize=\"16sp\"\n        app:layout_constraintBottom_toTopOf=\"@+id/textViewLastMessage\"\n        app:layout_constraintStart_toEndOf=\"@+id/viewImageGroup\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n\n    <TextView\n        android:id=\"@+id/textViewLastMessage\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n\n        android:layout_marginStart=\"20dp\"\n        android:fontFamily=\"@font/poppins\"\n        android:maxHeight=\"22sp\"\n        android:maxLength=\"20\"\n        android:text=\"Last Message\"\n        android:textColor=\"#A3A3A3\"\n        android:textSize=\"14sp\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintStart_toEndOf=\"@+id/viewImageGroup\"\n        app:layout_constraintTop_toBottomOf=\"@+id/textViewChatName\" />\n\n    <TextView\n        android:id=\"@+id/lastMessageTime\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n\n        android:layout_marginTop=\"5dp\"\n\n        android:layout_marginEnd=\"20dp\"\n        android:layout_marginBottom=\"12dp\"\n        android:fontFamily=\"@font/poppins\"\n\n        android:text=\"22:00\"\n        android:textColor=\"#848484\"\n        android:textSize=\"14sp\"\n        app:layout_constraintBottom_toTopOf=\"@+id/messageStatus\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n\n    <ImageView\n        android:id=\"@+id/messageStatus\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n\n        android:layout_marginEnd=\"20dp\"\n        android:layout_marginBottom=\"4dp\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/lastMessageTime\"\n        app:srcCompat=\"@drawable/ic_unread_22\"\n        app:tint=\"#A3A3A3\" />\n\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/row_chat.xml b/app/src/main/res/layout/row_chat.xml
--- a/app/src/main/res/layout/row_chat.xml	(revision 29efb0e97c5348e589c6b41e71b726f921c3b5a0)
+++ b/app/src/main/res/layout/row_chat.xml	(date 1642775226616)
@@ -40,15 +40,17 @@
         android:layout_height="match_parent"
         android:layout_marginStart="20dp"
         android:layout_marginTop="5dp"
+        android:layout_marginEnd="8dp"
         android:layout_marginBottom="6dp"
         android:fontFamily="@font/poppins_semibold"
-        android:textColor="@color/black"
 
         android:maxHeight="22sp"
         android:maxLength="30"
         android:text="Chat Name"
+        android:textColor="@color/black"
         android:textSize="16sp"
         app:layout_constraintBottom_toTopOf="@+id/textViewLastMessage"
+        app:layout_constraintEnd_toStartOf="@+id/lastMessageTime"
         app:layout_constraintStart_toEndOf="@+id/viewImageGroup"
         app:layout_constraintTop_toTopOf="parent" />
 
@@ -58,6 +60,7 @@
         android:layout_height="wrap_content"
 
         android:layout_marginStart="20dp"
+        android:layout_marginEnd="8dp"
         android:fontFamily="@font/poppins"
         android:maxHeight="22sp"
         android:maxLength="20"
@@ -65,6 +68,7 @@
         android:textColor="#A3A3A3"
         android:textSize="14sp"
         app:layout_constraintBottom_toBottomOf="parent"
+        app:layout_constraintEnd_toStartOf="@+id/messageStatus"
         app:layout_constraintStart_toEndOf="@+id/viewImageGroup"
         app:layout_constraintTop_toBottomOf="@+id/textViewChatName" />
 
Index: app/src/main/java/com/singularity/ipcaplus/chat/CreateChatActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.singularity.ipcaplus.chat\n\nimport android.content.ContentValues\nimport android.content.Intent\nimport android.net.Uri\nimport androidx.appcompat.app.AppCompatActivity\nimport android.os.Bundle\nimport android.util.Log\nimport android.view.Menu\nimport android.view.MenuInflater\nimport android.widget.ImageView\nimport android.widget.TextView\nimport androidx.appcompat.app.ActionBar\nimport com.google.firebase.Timestamp\nimport com.google.firebase.auth.ktx.auth\nimport com.google.firebase.firestore.ktx.firestore\nimport com.google.firebase.ktx.Firebase\nimport com.singularity.ipcaplus.R\nimport com.singularity.ipcaplus.cryptography.generateRandomIV\nimport com.singularity.ipcaplus.cryptography.metaGenrateKey\nimport com.singularity.ipcaplus.databinding.ActivityCreateChatBinding\nimport com.singularity.ipcaplus.drawer.DrawerActivty\nimport com.singularity.ipcaplus.models.Chat\nimport com.singularity.ipcaplus.models.Message\nimport com.singularity.ipcaplus.utils.ActivityImageHelper\nimport com.singularity.ipcaplus.utils.Backend\nimport com.singularity.ipcaplus.utils.Backend.updateNotificationKeyCamp\nimport com.singularity.ipcaplus.utils.Utilis\nimport com.singularity.ipcaplus.utils.Utilis.buildSystemMessage\nimport com.theartofdev.edmodo.cropper.CropImage\nimport com.theartofdev.edmodo.cropper.CropImageView\nimport kotlinx.coroutines.*\n\nclass CreateChatActivity : ActivityImageHelper() {\n\n    // Variables\n    private lateinit var binding: ActivityCreateChatBinding\n    var uri = Uri.EMPTY\n    val db = Firebase.firestore\n    var noteKey: String = \"\"\n    lateinit var docId: String\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_create_chat)\n\n        binding = ActivityCreateChatBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n        supportActionBar?.displayOptions = ActionBar.DISPLAY_SHOW_CUSTOM\n        supportActionBar?.setCustomView(R.layout.custom_bar_layout)\n        var tokens_adress = arrayListOf<String>()\n        findViewById<TextView>(R.id.AppBarTittle).text = \"Novo Grupo\"\n        // Back button\n        findViewById<ImageView>(R.id.BackButtonImageView).setOnClickListener {\n            finish()\n        }\n\n        // Variables\n        var chatName: String\n\n        var type = intent.getStringExtra(\"type\")!!\n        var memberIds = intent.getStringArrayListExtra(\"users\")!!\n\n        // Generate key for chats\n        val keygen = metaGenrateKey()\n\n        binding.imageViewChatPhoto.setOnClickListener {\n            checkPermission(android.Manifest.permission.READ_EXTERNAL_STORAGE,\n                STORAGE_PERMISSION_CODE)\n        }\n\n\n        // Create Chat\n        binding.fabCreateChat.setOnClickListener {\n\n\n            chatName = binding.editTextChatName.text.toString()\n            val ivGenerated = generateRandomIV()\n\n            // Chat data\n            val chat = Chat(\n                chatName,\n                type.toString(),\n                keygen,\n                ivGenerated,\n                noteKey\n            )\n\n            // System message data\n            val message = Message(\n                \"system\",\n                buildSystemMessage(keygen, ivGenerated),\n                Timestamp.now(),\n                \"\"\n\n            )\n\n            val user = HashMap<String, Any>()\n            val admin = hashMapOf<String?, Any>(\n                \"admin\" to true\n            )\n\n            db.collection(\"chat\")\n                .add(chat.toHash())\n                .addOnSuccessListener { documentReference ->\n                    docId = documentReference.id\n                    db.collection(\"chat\")\n                        .document(documentReference.id)\n                        .collection(\"message\")\n                        .add(message.toHash())\n                    for (member in memberIds) {\n                        db.collection(\"profile\")\n                            .document(member)\n                            .collection(\"chat\")\n                            .document(documentReference.id)\n                            .set(chat)\n                        db.collection(\"chat\")\n                            .document(documentReference.id)\n                            .collection(\"user\")\n                            .document(member)\n                            .set(user)\n                        // Getting all of tokens of  profile associated devices\n                        Backend.getAllTokens(member) {\n                            tokens_adress.addAll(it)\n                            println(\"TOUUUUUUUUU $tokens_adress\")\n                            docId = documentReference.id\n                        }\n                        if (member == Firebase.auth.currentUser!!.uid) {\n                            db.collection(\"chat\")\n                                .document(documentReference.id)\n                                .collection(\"user\")\n                                .document(member)\n                                .update(admin)\n                        }\n                        if (uri != Uri.EMPTY)\n                            Utilis.uploadFile(uri, \"chats/${documentReference.id}/icon.png\")\n\n                    }\n\n                }.addOnCompleteListener {\n                    val intent = Intent(this, DrawerActivty::class.java)\n                    GlobalScope.launch {\n                        withContext(Dispatchers.IO) {\n                            delay(1000)\n                            noteKey = Utilis.createNotificationGroup(docId,\n                                Backend.createJsonArrayString(tokens_adress))\n                            updateNotificationKeyCamp(docId, noteKey)\n\n                            println(docId)\n                            println(\"TOUUUUUUUUU FINALLL $tokens_adress\")\n                            println(\"este $noteKey\")\n                            startActivity(intent)\n                        }\n                    }\n                }\n        }\n\n    }\n\n    /*\n       This function happen after picking photo, and make changes in the activity\n    */\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        super.onActivityResult(requestCode, resultCode, data)\n\n        if (requestCode == IMAGE_REQUEST_CODE && resultCode == RESULT_OK) {\n            CropImage.activity(data?.data)\n                .setGuidelines(CropImageView.Guidelines.ON)\n                .setAspectRatio(1, 1)\n                .start(this)\n        }\n\n        if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {\n            val result = CropImage.getActivityResult(data)\n            if (resultCode == RESULT_OK) {\n                binding.imageViewChatPhoto.setImageURI(result.uri)\n                uri = result.uri\n\n            }\n        }\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/singularity/ipcaplus/chat/CreateChatActivity.kt b/app/src/main/java/com/singularity/ipcaplus/chat/CreateChatActivity.kt
--- a/app/src/main/java/com/singularity/ipcaplus/chat/CreateChatActivity.kt	(revision 29efb0e97c5348e589c6b41e71b726f921c3b5a0)
+++ b/app/src/main/java/com/singularity/ipcaplus/chat/CreateChatActivity.kt	(date 1642692660784)
@@ -122,7 +122,6 @@
                         // Getting all of tokens of  profile associated devices
                         Backend.getAllTokens(member) {
                             tokens_adress.addAll(it)
-                            println("TOUUUUUUUUU $tokens_adress")
                             docId = documentReference.id
                         }
                         if (member == Firebase.auth.currentUser!!.uid) {
@@ -147,8 +146,7 @@
                             updateNotificationKeyCamp(docId, noteKey)
 
                             println(docId)
-                            println("TOUUUUUUUUU FINALLL $tokens_adress")
-                            println("este $noteKey")
+
                             startActivity(intent)
                         }
                     }
Index: app/src/main/res/layout/row_message_self_file.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\">\n\n    <androidx.constraintlayout.widget.ConstraintLayout\n        android:id=\"@+id/constraintLayout8\"\n        android:layout_width=\"300dp\"\n        android:layout_height=\"100dp\"\n        android:layout_marginStart=\"195dp\"\n        android:layout_marginTop=\"16dp\"\n        android:layout_marginEnd=\"25dp\"\n        android:background=\"@drawable/rounded_shape\"\n        android:backgroundTint=\"@color/green_200\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintHorizontal_bias=\"1.0\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\">\n\n        <TextView\n            android:id=\"@+id/timeLastMessage2\"\n            android:layout_width=\"wrap_content\"\n            android:layout_height=\"wrap_content\"\n            android:layout_marginStart=\"15dp\"\n            android:layout_marginTop=\"39dp\"\n            android:layout_marginBottom=\"39dp\"\n            android:text=\"Name File\"\n            android:textColor=\"@color/white\"\n            android:textSize=\"16sp\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintStart_toEndOf=\"@+id/imageViewSend\"\n            app:layout_constraintTop_toTopOf=\"parent\" />\n\n        <ImageView\n            android:id=\"@+id/imageViewSend\"\n            android:layout_width=\"50dp\"\n            android:layout_height=\"50dp\"\n            android:layout_marginStart=\"20dp\"\n            android:layout_marginTop=\"10dp\"\n            android:layout_marginBottom=\"10dp\"\n            android:background=\"@drawable/rounded_shape\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintStart_toStartOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\"\n            app:srcCompat=\"@drawable/ic_file\"\n            app:tint=\"@color/white\" />\n\n        <ImageView\n            android:id=\"@+id/imageViewSend2\"\n            android:layout_width=\"25dp\"\n            android:layout_height=\"25dp\"\n            android:layout_marginTop=\"10dp\"\n            android:layout_marginEnd=\"20dp\"\n            android:layout_marginBottom=\"10dp\"\n            android:background=\"@drawable/rounded_shape\"\n            app:layout_constraintBottom_toBottomOf=\"parent\"\n            app:layout_constraintEnd_toEndOf=\"parent\"\n            app:layout_constraintTop_toTopOf=\"parent\"\n            app:srcCompat=\"@drawable/ic_download_white\" />\n    </androidx.constraintlayout.widget.ConstraintLayout>\n\n    <TextView\n        android:id=\"@+id/timeLastMessage\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"9dp\"\n        android:layout_marginEnd=\"26dp\"\n        android:text=\"Time\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/constraintLayout8\" />\n\n\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/row_message_self_file.xml b/app/src/main/res/layout/row_message_self_file.xml
--- a/app/src/main/res/layout/row_message_self_file.xml	(revision 29efb0e97c5348e589c6b41e71b726f921c3b5a0)
+++ b/app/src/main/res/layout/row_message_self_file.xml	(date 1642692023398)
@@ -8,10 +8,9 @@
     <androidx.constraintlayout.widget.ConstraintLayout
         android:id="@+id/constraintLayout8"
         android:layout_width="300dp"
-        android:layout_height="100dp"
-        android:layout_marginStart="195dp"
+        android:layout_height="80dp"
         android:layout_marginTop="16dp"
-        android:layout_marginEnd="25dp"
+        android:layout_marginEnd="5dp"
         android:background="@drawable/rounded_shape"
         android:backgroundTint="@color/green_200"
         app:layout_constraintEnd_toEndOf="parent"
@@ -21,15 +20,17 @@
 
         <TextView
             android:id="@+id/timeLastMessage2"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:layout_marginStart="15dp"
+            android:layout_width="159dp"
+            android:layout_height="26dp"
+            android:layout_marginStart="1dp"
             android:layout_marginTop="39dp"
             android:layout_marginBottom="39dp"
             android:text="Name File"
             android:textColor="@color/white"
             android:textSize="16sp"
             app:layout_constraintBottom_toBottomOf="parent"
+            app:layout_constraintEnd_toStartOf="@+id/imageViewSend2"
+            app:layout_constraintHorizontal_bias="0.0"
             app:layout_constraintStart_toEndOf="@+id/imageViewSend"
             app:layout_constraintTop_toTopOf="parent" />
 
@@ -65,9 +66,10 @@
         android:id="@+id/timeLastMessage"
         android:layout_width="wrap_content"
         android:layout_height="wrap_content"
-        android:layout_marginTop="9dp"
-        android:layout_marginEnd="26dp"
+        android:layout_marginTop="5dp"
+        android:layout_marginEnd="10dp"
         android:text="Time"
+        android:visibility="invisible"
         app:layout_constraintEnd_toEndOf="parent"
         app:layout_constraintTop_toBottomOf="@+id/constraintLayout8" />
 
Index: app/src/main/java/com/singularity/ipcaplus/RegisterActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.singularity.ipcaplus\n\nimport android.content.ContentValues\nimport android.content.Intent\nimport android.os.Bundle\nimport android.util.Log\nimport android.widget.Toast\nimport androidx.appcompat.app.AppCompatActivity\nimport com.google.android.material.snackbar.Snackbar\nimport com.google.firebase.auth.FirebaseAuth\nimport com.google.firebase.auth.ktx.auth\nimport com.google.firebase.ktx.Firebase\nimport com.singularity.ipcaplus.utils.Backend.db\nimport com.singularity.ipcaplus.databinding.ActivityRegisterBinding\nimport com.singularity.ipcaplus.models.Chat\nimport com.singularity.ipcaplus.models.Profile\nimport com.singularity.ipcaplus.utils.Backend\nimport com.singularity.ipcaplus.utils.Utilis\nimport java.util.regex.Pattern\n\nclass RegisterActivity : AppCompatActivity() {\n\n    private lateinit var auth: FirebaseAuth\n    private lateinit var binding: ActivityRegisterBinding\n\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_login)\n\n        binding = ActivityRegisterBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n\n        val pattern: Pattern =\n            Pattern.compile(\"^\" +\n                    \"(?=.*[@#$%^&+=])\" +\n                    \"(?=.*[A-Z])\" +\n                    \"(?=\\\\S+$)\" +\n                    \".{8,}\" +\n                    \"$\")\n\n        // Create Action Bar\n        supportActionBar?.setDisplayHomeAsUpEnabled(true)\n        supportActionBar?.setHomeAsUpIndicator(R.drawable.ic_arrow_back_24)\n        supportActionBar?.title = \"Voltar\"\n\n        auth = Firebase.auth\n\n\n        binding.buttonRegister.setOnClickListener {\n            if (!binding.editTextTextPassword.text.isNullOrBlank() && !binding.editTextEmail.text.isNullOrBlank()\n                && pattern.matcher(binding.editTextTextPassword.text.toString()).matches()\n            ) {\n\n                if (binding.editTextTextPassword.text.toString() == binding.editTextTextConfirmPassword.text.toString()) {\n                    val email: String = binding.editTextEmail.text.toString()\n                    val password: String = binding.editTextTextPassword.text.toString()\n\n                    val emailDomain = Utilis.getEmailDomain(email)\n                    if (emailDomain != \"alunos.ipca.pt\" && emailDomain != \"ipca.pt\") {\n                        Snackbar.make(binding.root,\n                            \"Precisas de usar um email do ipca (ipca.pt)!\", Snackbar.LENGTH_SHORT)\n                            .show()\n                    } else {\n                        auth.createUserWithEmailAndPassword(email, password)\n                            .addOnCompleteListener(this) { task ->\n                                if (task.isSuccessful) {\n\n                                    emailVerification()\n\n                                    Backend.getIpcaData(email) { profile, ipcaDataId ->\n\n                                        val userID = auth.currentUser!!.uid\n\n                                        // Create profile with ipca data\n                                        db.collection(\"profile\")\n                                            .document(userID)\n                                            .set(profile!!.toHash())\n                                            .addOnCompleteListener {\n\n                                                if (profile.role != \"Professor\") {\n\n                                                    // Get user course in ipca data and create a collection with that document\n                                                    Backend.setUserCourseByIpcaData(userID,\n                                                        ipcaDataId) {\n\n                                                        // Create official chats for each subject\n                                                        Backend.getOficialChatByTag(it) { chats ->\n\n                                                            Backend.setOficialChat(userID, chats)\n                                                        }\n\n                                                    }\n\n                                                } else {\n                                                    Backend.setTeacherSubjectsByIpcaData(userID,\n                                                        ipcaDataId)\n                                                }\n\n                                            }\n\n\n                                    }\n\n                                    startActivity(Intent(this, LoginActivity::class.java))\n                                } else {\n                                    // If sign in fails, display a message to the user.\n                                    Log.w(ContentValues.TAG,\n                                        \"createUserWithEmail:failure\",\n                                        task.exception)\n                                    Toast.makeText(baseContext, \"Authentication failed.\",\n                                        Toast.LENGTH_SHORT).show()\n                                }\n                            }\n                    }\n                } else {\n                    Snackbar.make(binding.root,\n                        \"Tens de confirmar a Password corretamente!\", Snackbar.LENGTH_SHORT).show()\n                }\n            } else {\n                Toast.makeText(baseContext, \"Palavra-passe precisa conter:\\n\" +\n                        \"- Pelo menos um caracter especial\\n\" +\n                        \"- Pelo menos uma maiuscula\\n\" +\n                        \"- Minimo de 8 letras\",\n                    Toast.LENGTH_LONG).show()\n            }\n        }\n\n\n    }\n\n    private fun emailVerification() {\n\n        auth.currentUser?.sendEmailVerification()\n            ?.addOnCompleteListener { task ->\n                if (task.isSuccessful) {\n                    // below message changed and user is navigated to Sign In activity\n                    Toast.makeText(\n                        this, \"Sign Up successful. Verification link sent to the Email address\",\n                        Toast.LENGTH_SHORT\n                    ).show()\n                }\n            }\n\n    }\n\n\n    // When the support action bar back button is pressed, the app will go back to the previous activity\n    override fun onSupportNavigateUp(): Boolean {\n        onBackPressed()\n        return true\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/singularity/ipcaplus/RegisterActivity.kt b/app/src/main/java/com/singularity/ipcaplus/RegisterActivity.kt
--- a/app/src/main/java/com/singularity/ipcaplus/RegisterActivity.kt	(revision 29efb0e97c5348e589c6b41e71b726f921c3b5a0)
+++ b/app/src/main/java/com/singularity/ipcaplus/RegisterActivity.kt	(date 1642688881427)
@@ -33,7 +33,7 @@
 
         val pattern: Pattern =
             Pattern.compile("^" +
-                    "(?=.*[@#$%^&+=])" +
+                    "(?=.*[@#$%^&+=£.!,#])" +
                     "(?=.*[A-Z])" +
                     "(?=\\S+$)" +
                     ".{8,}" +
Index: .idea/shelf/Uncommitted_changes_before_Update_at_1_13_2022_3_27_PM__Default_Changelist_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_1_13_2022_3_27_PM__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_1_13_2022_3_27_PM__Default_Changelist_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_1_13_2022_3_27_PM__Default_Changelist_.xml	(revision 29efb0e97c5348e589c6b41e71b726f921c3b5a0)
+++ /dev/null	(revision 29efb0e97c5348e589c6b41e71b726f921c3b5a0)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_1_13_2022_3_27_PM_[Default_Changelist]" date="1642087675963" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_1_13_2022_3_27_PM_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 1/13/2022 3:27 PM [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_1_13_2022_1_20_PM_[Default_Changelist]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_1_13_2022_1_20_PM_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_1_13_2022_1_20_PM_[Default_Changelist]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_1_13_2022_1_20_PM_[Default_Changelist]/shelved.patch	(revision 29efb0e97c5348e589c6b41e71b726f921c3b5a0)
+++ /dev/null	(revision 29efb0e97c5348e589c6b41e71b726f921c3b5a0)
@@ -1,497 +0,0 @@
-Index: app/src/main/java/com/singularity/ipcaplus/chat/ChatActivity.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.singularity.ipcaplus.chat\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.app.ActionBar\r\nimport android.content.ContentValues.TAG\r\nimport android.content.Intent\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.*\r\nimport android.widget.ImageView\r\nimport android.widget.TextView\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.view.isVisible\r\nimport androidx.recyclerview.widget.DefaultItemAnimator\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.google.firebase.Timestamp\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.Query\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.drawer.CalendarActivity\r\nimport com.singularity.ipcaplus.R\r\nimport com.singularity.ipcaplus.utils.Utilis\r\nimport com.singularity.ipcaplus.cryptography.decryptWithAESmeta\r\nimport com.singularity.ipcaplus.cryptography.encryptMeta\r\nimport com.singularity.ipcaplus.cryptography.getMetaOx\r\nimport com.singularity.ipcaplus.databinding.ActivityChatBinding\r\nimport com.singularity.ipcaplus.models.Chat\r\nimport com.singularity.ipcaplus.models.Message\r\nimport com.singularity.ipcaplus.utils.Backend\r\nimport com.singularity.ipcaplus.utils.Backend.createJsonArrayString\r\nimport kotlinx.coroutines.*\r\nimport org.json.JSONArray\r\nimport org.json.JSONObject\r\nimport java.io.BufferedOutputStream\r\nimport java.io.BufferedWriter\r\nimport java.io.OutputStream\r\nimport java.io.OutputStreamWriter\r\nimport java.net.URL\r\nimport java.time.LocalDateTime\r\nimport java.time.format.DateTimeFormatter\r\nimport javax.net.ssl.HttpsURLConnection\r\n\r\nclass ChatActivity : AppCompatActivity() {\r\n\r\n    var messages = arrayListOf<Message>()\r\n    var currentUserIsAdmin = false\r\n    private lateinit var binding: ActivityChatBinding\r\n    private lateinit var chat_id : String\r\n    var tokens_adress = arrayListOf<String>()\r\n    var chat_user_uids = arrayListOf<String>()\r\n    private var mAdapter: RecyclerView.Adapter<*>? = null\r\n    private var mLayoutManager: LinearLayoutManager? = null\r\n\r\n    val db = Firebase.firestore\r\n    @SuppressLint(\"WrongConstant\")\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_chat)\r\n\r\n        binding = ActivityChatBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        supportActionBar?.displayOptions = ActionBar.DISPLAY_SHOW_CUSTOM\r\n        supportActionBar?.setCustomView(R.layout.appbar_custom_layout_chat)\r\n        findViewById<TextView>(R.id.AppBarTittle).text = \"Chat name\"\r\n        // Back button\r\n        findViewById<ImageView>(R.id.BackButtonImageView).setOnClickListener{\r\n            finish()\r\n        }\r\n\r\n        // Variables\r\n        chat_id = intent.getStringExtra(\"chat_id\").toString()\r\n        val current = LocalDateTime.now()\r\n\r\n        val formatter = DateTimeFormatter.BASIC_ISO_DATE\r\n        val formatted = current.format(formatter)\r\n\r\n        // Check if user is admin\r\n        Backend.getChatAdminIds(chat_id) {\r\n            val currentUser = Firebase.auth.currentUser!!.uid\r\n            for (admin in it) {\r\n                if (admin == currentUser)\r\n                    currentUserIsAdmin = true\r\n            }\r\n        }\r\n\r\n        // Get all members id of chat\r\n        Backend.getChatUsersUids(chat_id){\r\n            chat_user_uids.clear()\r\n            chat_user_uids.addAll(it)\r\n\r\n            for (userId in chat_user_uids){\r\n                // Getting all of tokens of  profile associated devices\r\n                Backend.getAllTokens(userId) {\r\n                    if (tokens_adress.isEmpty()){\r\n                        tokens_adress.clear()\r\n                    }\r\n                    tokens_adress.addAll(it)\r\n\r\n                    /*GlobalScope.launch {\r\n                        withContext(Dispatchers.IO){\r\n                            createNotificationGroup(\"grupotrablahotentativa\", createJsonArrayString(tokens_adress))\r\n                        }\r\n                    }*/\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n        val profilePicfromTop = findViewById<ImageView>(R.id.ProfileImageView)\r\n        Utilis.getFile(this, \"chats/$chat_id/icon.png\", \"png\") { bitmap ->\r\n            profilePicfromTop.setImageBitmap(bitmap)\r\n        }\r\n\r\n        println(\"Current Date is: $formatted\")\r\n\r\n        // Send Message\r\n        binding.fabSend.setOnClickListener {\r\n            if(!binding.editTextMessage.text.isNullOrBlank()) {\r\n                // get data of ecripted shared preferences (\"chatuid\" -> \"key\")\r\n                val keygen = getMetaOx(this, chat_id)\r\n                // Build encryptation data of message send by the user\r\n                var meta = encryptMeta( binding.editTextMessage.text.toString(), keygen.toString())\r\n                val savedText = binding.editTextMessage.text.toString()\r\n\r\n                val message = Message(\r\n                    Firebase.auth.currentUser!!.uid,\r\n                    meta.toString(),\r\n                    Timestamp.now(),\r\n                    \"\"\r\n\r\n                )\r\n                db.collection(\"chat\").document(\"$chat_id\").collection(\"message\")\r\n                    .add(message.toHash())\r\n                    .addOnSuccessListener { documentReference ->\r\n\r\n                        GlobalScope.launch {\r\n                            withContext(Dispatchers.IO){\r\n                                //APA91bEKDInIYA242YofpahBmhB57pEI4gNT63DJJenWCccJGqeSYrWzj0BSruX49DhVp2vGSY5xJ2fEJk2vhtoraT3_bbjEKw4Nx3eJKj7tttVRPjQs0Uc_OPkrcj4twR70H5tAilnY\r\n                                println(\"AVEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\"+ savedText)\r\n                                sendNotificationToGroup( chat_id, savedText, \"APA91bGaOoMTjTD2s9MU63F1AvLqP6tkwdAFE0Mqs9jbghlSgcWlfe_38CboFiE2iiWFoKqNRwhF0G_TA5X9xegTL0_Tg0OGuFadJuBj1sGZqjqCcmF1EH2ZeRU7ySHosdNkmLmmOyFF\")\r\n                            }\r\n                        }\r\n                        Log.d(TAG, \"DocumentSnapshot added with ID: ${documentReference.id}\")\r\n\r\n\r\n                    }\r\n                    .addOnFailureListener { e ->\r\n                        Log.w(TAG, \"Error adding document\", e)\r\n                    }\r\n                binding.editTextMessage.text.clear()\r\n\r\n            }\r\n        }\r\n\r\n        // Show Messages\r\n        db.collection(\"chat\").document(\"$chat_id\").collection(\"message\").orderBy(\"time\", Query.Direction.DESCENDING)\r\n            .addSnapshotListener { documents, e ->\r\n\r\n                documents?.let {\r\n                    messages.clear()\r\n                    for (document in it) {\r\n                        Log.d(TAG, \"${document.id} => ${document.data}\")\r\n                        val message = Message.fromHash(document)\r\n                        messages.add(message)\r\n\r\n                    }\r\n                    mAdapter?.notifyDataSetChanged()\r\n                }\r\n\r\n            }\r\n\r\n        // Recycler View Messages\r\n        mLayoutManager = LinearLayoutManager(this, LinearLayoutManager.VERTICAL, false)\r\n        binding.recycleViewChat.layoutManager = mLayoutManager\r\n        mAdapter = MessageAdapter()\r\n        binding.recycleViewChat.itemAnimator = DefaultItemAnimator()\r\n        binding.recycleViewChat.adapter = mAdapter\r\n\r\n        mLayoutManager!!.reverseLayout = true\r\n\r\n    }\r\n\r\n    /*\r\n       This function create the action bar above the activity\r\n    */\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        val inflater: MenuInflater = menuInflater\r\n        inflater.inflate(R.menu.menu_chat, menu)\r\n\r\n        db.collection(\"chat\")\r\n            .addSnapshotListener { documents, e ->\r\n                documents?.let {\r\n                    for (document in it) {\r\n                        if(document.id == chat_id) {\r\n                            val chat = Chat.fromHash(document)\r\n                            val name = Utilis.getFirstAndLastName(chat.name)\r\n                            //supportActionBar?.title = chat.name\r\n                            findViewById<TextView>(R.id.AppBarTittle).text = name\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n        return true\r\n    }\r\n\r\n\r\n    /*\r\n        This function define the events of the action bar buttons\r\n     */\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        super.onOptionsItemSelected(item)\r\n\r\n        when (item.itemId){\r\n            R.id.calendario -> {\r\n                val intent = Intent(this, CalendarActivity::class.java)\r\n                intent.putExtra(\"chat_id\", chat_id)\r\n                intent.putExtra(\"is_admin\", currentUserIsAdmin)\r\n                startActivity(intent)\r\n                return true\r\n            }\r\n            R.id.chatMore -> {\r\n                val intent = Intent(this, ChatMoreActivity::class.java)\r\n                intent.putExtra(\"chat_id\", chat_id)\r\n                println(\"3------------------------------ \" + currentUserIsAdmin)\r\n                intent.putExtra(\"is_admin\", currentUserIsAdmin)\r\n                intent.putExtra(\"chat_name\",  Utilis.getFirstAndLastName(findViewById<TextView>(R.id.AppBarTittle).text.toString()))\r\n                startActivity(intent)\r\n                return true\r\n            }\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n\r\n    // When the support action bar back button is pressed, the app will go back to the previous activity\r\n    override fun onSupportNavigateUp(): Boolean {\r\n        onBackPressed()\r\n        return true\r\n    }\r\n\r\n\r\n    inner class MessageAdapter : RecyclerView.Adapter<MessageAdapter.ViewHolder>() {\r\n\r\n        inner class ViewHolder(val v: View) : RecyclerView.ViewHolder(v)\r\n\r\n        var otherUser = false\r\n\r\n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n            if(viewType == 1) {\r\n                otherUser = false\r\n                return ViewHolder(\r\n                    LayoutInflater.from(parent.context).inflate(R.layout.row_message_self, parent, false))\r\n            } else if (viewType == 2){\r\n                otherUser = false\r\n                return ViewHolder(\r\n                    LayoutInflater.from(parent.context).inflate(R.layout.row_message_system, parent, false))\r\n            } else {\r\n                otherUser = true\r\n                return ViewHolder(\r\n                    LayoutInflater.from(parent.context).inflate(R.layout.row_message_others, parent, false))\r\n            }\r\n\r\n        }\r\n\r\n        @RequiresApi(Build.VERSION_CODES.M)\r\n         override fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n\r\n\r\n            holder.v.apply {\r\n\r\n                val textViewMessage = findViewById<TextView>(R.id.textViewMessage)\r\n                val timeLastMessage = findViewById<TextView?>(R.id.timeLastMessage)\r\n                val textViewUsername = findViewById<TextView?>(R.id.textViewUsername)\r\n\r\n\r\n                timeLastMessage?.isVisible = false\r\n                val keygen = getMetaOx(context, chat_id)\r\n                val message_decripted = decryptWithAESmeta(keygen.toString(), messages[position].message)\r\n\r\n               /* if (otherUser) {\r\n                        Backend.getUserProfile(messages[position].user) {\r\n                            val userName = Utilis.getFirstAndLastName(it.name)\r\n                            textViewUsername.text = userName\r\n                        }\r\n                    }\r\n                */\r\n\r\n                textViewMessage.text = message_decripted\r\n                println(message_decripted)\r\n                if(position == messages.size - 1) {\r\n                    val data = Utilis.getDate(\r\n                        messages[position].time.seconds * 1000,\r\n                        \"yyyy-MM-dd'T'HH:mm:ss.SSS\"\r\n                    )\r\n                    timeLastMessage.isVisible = true\r\n                    timeLastMessage.text = Utilis.getHours(data) + \":\" + Utilis.getMinutes(data)\r\n                }\r\n\r\n                if (otherUser) {\r\n                    val imageViewUser = findViewById<ImageView?>(R.id.imageViewUser)\r\n                    if (imageViewUser != null) {\r\n                        Utilis.getFile(context, \"profilePictures/${messages[position].user}.png\", \"png\") { bitmap ->\r\n                            imageViewUser.setImageBitmap(bitmap)\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        override fun getItemViewType(position: Int) : Int {\r\n            if (messages[position].user == Firebase.auth.currentUser!!.uid) {\r\n                return 1\r\n            } else if (messages[position].user == \"system\"){\r\n                return 2\r\n            } else {\r\n                return 0\r\n            }\r\n        }\r\n\r\n        override fun getItemCount(): Int {\r\n            return messages.size\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    private suspend fun  createNotificationGroup(notificationKeyName : String, registrationIds : JSONArray)  {\r\n\r\n        try {\r\n\r\n            Log.d(\"json\", registrationIds.toString())\r\n\r\n            //Request\r\n            val endPoint = URL(\"https://fcm.googleapis.com/fcm/notification\")\r\n\r\n            //Establish a connection\r\n            val httpsURLConnection: HttpsURLConnection =\r\n                endPoint.openConnection() as HttpsURLConnection\r\n\r\n            //Connection to fcm\r\n            //The time available to read from the input stream when the connection is established\r\n            httpsURLConnection.readTimeout = 10000\r\n            //The time available to connect to the url\r\n            httpsURLConnection.connectTimeout = 15000\r\n            //Defining the type of request to be made to the fcm\r\n            httpsURLConnection.requestMethod = \"POST\"\r\n            //Defining that the url connection can be used to send and receive data\r\n            httpsURLConnection.doInput = true\r\n            httpsURLConnection.doOutput = true\r\n\r\n            // Build parameters for json\r\n            httpsURLConnection.setRequestProperty(\"Content-Type\", \"application/json\")\r\n            val project_key = \"AAAAMMR-Gaw:APA91bFeijRa909_QEdEFsQeDSaJZRYD7rOk8B8Bc2QiYcGoyLG1xqqpZLkOJXmZrG0FbScojvqBCsweSEWDrMLM6kr67boS-BVB2oy7fL6Zn1N9ICVk6efGniauDa3z8eaOb1TENmEs\"\r\n            val senderId = \"209455028652\"\r\n            httpsURLConnection.setRequestProperty(\"authorization\", \"key=$project_key\")\r\n            httpsURLConnection.setRequestProperty(\"project_id\", senderId)\r\n\r\n            val json = JSONObject()\r\n\r\n            json.put(\"operation\", \"create\")\r\n            json.put(\"notification_key_name\", notificationKeyName)\r\n            json.put(\"registration_ids\", registrationIds)\r\n\r\n\r\n            // Writer\r\n            val outputStream: OutputStream =\r\n                BufferedOutputStream(httpsURLConnection.outputStream)\r\n            val writer = BufferedWriter(OutputStreamWriter(outputStream, \"utf-8\"))\r\n\r\n            // POST\r\n            writer.write(json.toString())\r\n            writer.flush()\r\n            writer.close()\r\n\r\n            outputStream.close()\r\n\r\n            //The response code and message of the POST requests\r\n            val responseCode: Int = httpsURLConnection.responseCode\r\n            val responseMessage = httpsURLConnection.responseMessage\r\n\r\n            Log.d(TAG, \"$responseCode $responseMessage\")\r\n\r\n\r\n            // Check server STATUS\r\n            if (responseCode in 400..499) {\r\n                httpsURLConnection.errorStream\r\n            } else {\r\n                httpsURLConnection.inputStream\r\n            }\r\n\r\n            if (responseCode == 200) {\r\n                Log.e(TAG, \"Group Created!!\")\r\n\r\n                val response = httpsURLConnection.inputStream.bufferedReader()\r\n                    .use { it.readText() }  // defaults to UTF-8\r\n                withContext(Dispatchers.Main) {\r\n                    //notification_key\r\n                    val jsonObject  = JSONObject(response)\r\n                    val notificationKey = jsonObject.getString(\"notification_key\")\r\n                    println(\"NotifKey: $notificationKey\")\r\n                    Log.d(\"NotifKey\", notificationKey)\r\n                }\r\n            } else {\r\n                Log.e(TAG, \"Error it didn´t work\")\r\n            }\r\n\r\n            //Here i close the connection to the endPoint\r\n            httpsURLConnection.disconnect()\r\n\r\n\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    //This function sends push notifications to devices that are subscribed to a specific topic\r\n    private suspend fun sendNotificationToGroup(title: String, message: String, notificationKey : String) {\r\n\r\n        delay(1500)\r\n\r\n        try {\r\n\r\n            //Request\r\n            val url = URL(\"https://fcm.googleapis.com/fcm/send\")\r\n\r\n            //Establish a connection\r\n            val httpsURLConnection: HttpsURLConnection =\r\n                url.openConnection() as HttpsURLConnection\r\n\r\n            //The time available to read from the input stream when the connection is established\r\n            httpsURLConnection.readTimeout = 10000\r\n            //The time available to connect to the url\r\n            httpsURLConnection.connectTimeout = 15000\r\n            //Defining the type of request to be made to the fcm\r\n            httpsURLConnection.requestMethod = \"POST\"\r\n            //Defining that the url connection can be used to send and receive data\r\n            httpsURLConnection.doInput = true\r\n            httpsURLConnection.doOutput = true\r\n\r\n            // Config of FCM\r\n            val project_key = \"AAAAMMR-Gaw:APA91bFeijRa909_QEdEFsQeDSaJZRYD7rOk8B8Bc2QiYcGoyLG1xqqpZLkOJXmZrG0FbScojvqBCsweSEWDrMLM6kr67boS-BVB2oy7fL6Zn1N9ICVk6efGniauDa3z8eaOb1TENmEs\"\r\n            httpsURLConnection.setRequestProperty(\"authorization\", \"key=$project_key\")\r\n            httpsURLConnection.setRequestProperty(\"Content-Type\", \"application/json\")\r\n\r\n            val jsonObject = JSONObject()\r\n            val data = JSONObject()\r\n\r\n            data.put(\"title\", title)\r\n            data.put(\"content\", message)\r\n            //On Notification Click Activity\r\n            data.put(\"click_action\", \".LoginActivity\")\r\n\r\n            //jsonObject for POST\r\n            jsonObject.put(\"data\", data)\r\n            //\r\n            jsonObject.put(\"to\", notificationKey)\r\n\r\n            val outputStream: OutputStream =\r\n                BufferedOutputStream(httpsURLConnection.outputStream)\r\n            val writer = BufferedWriter(OutputStreamWriter(outputStream, \"utf-8\"))\r\n            \r\n            writer.write(jsonObject.toString())\r\n            writer.flush()\r\n            writer.close()\r\n\r\n            outputStream.close()\r\n\r\n            //The response code and message of the POST requests\r\n            val responseCode: Int = httpsURLConnection.responseCode\r\n            val responseMessage: String = httpsURLConnection.responseMessage\r\n\r\n\r\n            Log.d(TAG, \"Response from sendMes: $responseCode $responseMessage\")\r\n\r\n\r\n            // Check server STATUS\r\n            if (responseCode in 400..499) {\r\n                httpsURLConnection.errorStream\r\n            } else {\r\n                httpsURLConnection.inputStream\r\n            }\r\n            if (responseCode == 200) {\r\n                Log.e(\r\n                    TAG,\r\n                    \"Notification Sent \\n Title: $title \\n Body: $message\"\r\n                )\r\n            } else {\r\n                Log.e(TAG, \"Notification Error\")\r\n            }\r\n\r\n            httpsURLConnection.disconnect()\r\n\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/singularity/ipcaplus/chat/ChatActivity.kt b/app/src/main/java/com/singularity/ipcaplus/chat/ChatActivity.kt
---- a/app/src/main/java/com/singularity/ipcaplus/chat/ChatActivity.kt	(revision d7d49fadf70fadd33042282dce690a6bd606ece4)
-+++ b/app/src/main/java/com/singularity/ipcaplus/chat/ChatActivity.kt	(date 1642079549061)
-@@ -32,6 +32,7 @@
- import com.singularity.ipcaplus.models.Message
- import com.singularity.ipcaplus.utils.Backend
- import com.singularity.ipcaplus.utils.Backend.createJsonArrayString
-+import com.singularity.ipcaplus.utils.Backend.getIv
- import kotlinx.coroutines.*
- import org.json.JSONArray
- import org.json.JSONObject
-@@ -126,39 +127,43 @@
-                 // get data of ecripted shared preferences ("chatuid" -> "key")
-                 val keygen = getMetaOx(this, chat_id)
-                 // Build encryptation data of message send by the user
--                var meta = encryptMeta( binding.editTextMessage.text.toString(), keygen.toString())
--                val savedText = binding.editTextMessage.text.toString()
-+                getIv(chat_id) {
-+
-+                    var meta = encryptMeta( binding.editTextMessage.text.toString(), keygen.toString(), it.toString())
-+                    val savedText = binding.editTextMessage.text.toString()
- 
--                val message = Message(
--                    Firebase.auth.currentUser!!.uid,
--                    meta.toString(),
--                    Timestamp.now(),
--                    ""
-+                    val message = Message(
-+                        Firebase.auth.currentUser!!.uid,
-+                        meta.toString(),
-+                        Timestamp.now(),
-+                        ""
- 
--                )
--                db.collection("chat").document("$chat_id").collection("message")
--                    .add(message.toHash())
--                    .addOnSuccessListener { documentReference ->
-+                    )
-+                    db.collection("chat").document("$chat_id").collection("message")
-+                        .add(message.toHash())
-+                        .addOnSuccessListener { documentReference ->
- 
--                        GlobalScope.launch {
--                            withContext(Dispatchers.IO){
--                                //APA91bEKDInIYA242YofpahBmhB57pEI4gNT63DJJenWCccJGqeSYrWzj0BSruX49DhVp2vGSY5xJ2fEJk2vhtoraT3_bbjEKw4Nx3eJKj7tttVRPjQs0Uc_OPkrcj4twR70H5tAilnY
--                                println("AVEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE"+ savedText)
--                                sendNotificationToGroup( chat_id, savedText, "APA91bGaOoMTjTD2s9MU63F1AvLqP6tkwdAFE0Mqs9jbghlSgcWlfe_38CboFiE2iiWFoKqNRwhF0G_TA5X9xegTL0_Tg0OGuFadJuBj1sGZqjqCcmF1EH2ZeRU7ySHosdNkmLmmOyFF")
--                            }
--                        }
--                        Log.d(TAG, "DocumentSnapshot added with ID: ${documentReference.id}")
-+                            GlobalScope.launch {
-+                                withContext(Dispatchers.IO){
-+                                    //APA91bEKDInIYA242YofpahBmhB57pEI4gNT63DJJenWCccJGqeSYrWzj0BSruX49DhVp2vGSY5xJ2fEJk2vhtoraT3_bbjEKw4Nx3eJKj7tttVRPjQs0Uc_OPkrcj4twR70H5tAilnY
-+                                    println("AVEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE"+ savedText)
-+                                    sendNotificationToGroup( chat_id, savedText, "APA91bGaOoMTjTD2s9MU63F1AvLqP6tkwdAFE0Mqs9jbghlSgcWlfe_38CboFiE2iiWFoKqNRwhF0G_TA5X9xegTL0_Tg0OGuFadJuBj1sGZqjqCcmF1EH2ZeRU7ySHosdNkmLmmOyFF")
-+                                }
-+                            }
-+                            Log.d(TAG, "DocumentSnapshot added with ID: ${documentReference.id}")
- 
- 
--                    }
--                    .addOnFailureListener { e ->
--                        Log.w(TAG, "Error adding document", e)
--                    }
--                binding.editTextMessage.text.clear()
-+                        }
-+                        .addOnFailureListener { e ->
-+                            Log.w(TAG, "Error adding document", e)
-+                        }
-+                    binding.editTextMessage.text.clear()
- 
--            }
--        }
-+                }
-+            }
- 
-+        }
-+
-         // Show Messages
-         db.collection("chat").document("$chat_id").collection("message").orderBy("time", Query.Direction.DESCENDING)
-             .addSnapshotListener { documents, e ->
-@@ -285,32 +290,34 @@
- 
-                 timeLastMessage?.isVisible = false
-                 val keygen = getMetaOx(context, chat_id)
--                val message_decripted = decryptWithAESmeta(keygen.toString(), messages[position].message)
-+                getIv(chat_id){
-+                    val message_decripted = decryptWithAESmeta(keygen.toString(), messages[position].message, it.toString())
- 
--               /* if (otherUser) {
--                        Backend.getUserProfile(messages[position].user) {
--                            val userName = Utilis.getFirstAndLastName(it.name)
--                            textViewUsername.text = userName
--                        }
--                    }
--                */
-+                    /* if (otherUser) {
-+                             Backend.getUserProfile(messages[position].user) {
-+                                 val userName = Utilis.getFirstAndLastName(it.name)
-+                                 textViewUsername.text = userName
-+                             }
-+                         }
-+                     */
- 
--                textViewMessage.text = message_decripted
--                println(message_decripted)
--                if(position == messages.size - 1) {
--                    val data = Utilis.getDate(
--                        messages[position].time.seconds * 1000,
--                        "yyyy-MM-dd'T'HH:mm:ss.SSS"
--                    )
--                    timeLastMessage.isVisible = true
--                    timeLastMessage.text = Utilis.getHours(data) + ":" + Utilis.getMinutes(data)
--                }
-+                    textViewMessage.text = message_decripted
-+                    println(message_decripted)
-+                    if(position == messages.size - 1) {
-+                        val data = Utilis.getDate(
-+                            messages[position].time.seconds * 1000,
-+                            "yyyy-MM-dd'T'HH:mm:ss.SSS"
-+                        )
-+                        timeLastMessage.isVisible = true
-+                        timeLastMessage.text = Utilis.getHours(data) + ":" + Utilis.getMinutes(data)
-+                    }
- 
--                if (otherUser) {
--                    val imageViewUser = findViewById<ImageView?>(R.id.imageViewUser)
--                    if (imageViewUser != null) {
--                        Utilis.getFile(context, "profilePictures/${messages[position].user}.png", "png") { bitmap ->
--                            imageViewUser.setImageBitmap(bitmap)
-+                    if (otherUser) {
-+                        val imageViewUser = findViewById<ImageView?>(R.id.imageViewUser)
-+                        if (imageViewUser != null) {
-+                            Utilis.getFile(context, "profilePictures/${messages[position].user}.png", "png") { bitmap ->
-+                                imageViewUser.setImageBitmap(bitmap)
-+                            }
-                         }
-                     }
-                 }
-Index: app/src/main/java/com/singularity/ipcaplus/chat/CreateDirectChatActivity.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.singularity.ipcaplus.chat\r\n\r\nimport android.content.ContentValues\r\nimport android.content.Intent\r\nimport android.net.Uri\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.Menu\r\nimport android.view.MenuInflater\r\nimport com.google.firebase.Timestamp\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.R\r\nimport com.singularity.ipcaplus.cryptography.metaGenrateKey\r\nimport com.singularity.ipcaplus.databinding.ActivityCreateChatBinding\r\nimport com.singularity.ipcaplus.drawer.DrawerActivty\r\nimport com.singularity.ipcaplus.models.Chat\r\nimport com.singularity.ipcaplus.models.Message\r\nimport com.singularity.ipcaplus.utils.ActivityImageHelper\r\nimport com.singularity.ipcaplus.utils.Backend\r\nimport com.singularity.ipcaplus.utils.Utilis\r\nimport com.singularity.ipcaplus.utils.Utilis.buildSystemMessage\r\nimport com.theartofdev.edmodo.cropper.CropImage\r\nimport com.theartofdev.edmodo.cropper.CropImageView\r\n\r\nclass CreateDirectChatActivity : ActivityImageHelper() {\r\n\r\n\r\n    val db = Firebase.firestore\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        // Variables\r\n        var chatName : String\r\n\r\n        var type = intent.getStringExtra(\"type\")!!\r\n        var memberIds = intent.getStringArrayListExtra(\"users\")!!\r\n        println(memberIds)\r\n\r\n        // Generate key for chats\r\n        val keygen = metaGenrateKey()\r\n\r\n            Backend.getUserProfile(memberIds[1]) {\r\n\r\n\r\n                chatName = it.name\r\n                println(\"Nome antes\" + chatName)\r\n\r\n                // Chat data\r\n                var chat = Chat(\r\n                    chatName,\r\n                    type,\r\n                    keygen\r\n                )\r\n\r\n                // System message data\r\n                val message = Message(\r\n                    \"system\",\r\n                    buildSystemMessage(keygen),\r\n                    Timestamp.now(),\r\n                    \"\"\r\n\r\n                )\r\n\r\n                val user = HashMap<String, Any>()\r\n                val admin = hashMapOf<String?, Any>(\r\n                    \"admin\" to true\r\n                )\r\n\r\n                db.collection(\"chat\")\r\n                    .add(chat.toHash())\r\n                    .addOnSuccessListener { documentReference ->\r\n                        db.collection(\"chat\")\r\n                            .document(documentReference.id)\r\n                            .collection(\"message\")\r\n                            .add(message.toHash())\r\n                        for (member in memberIds) {\r\n                            println(\"IDSDSDS\" + memberIds)\r\n                            Backend.getUserProfile(memberIds[0]) {\r\n                                if (member == Firebase.auth.currentUser!!.uid) {\r\n                                    println(\"IF\")\r\n                                    // Chat data\r\n                                    chat = Chat(\r\n                                        it.name,\r\n                                        type,\r\n                                        keygen\r\n                                    )\r\n                                }\r\n                                println(\"NOMEEEEE\" + it.name)\r\n\r\n                                db.collection(\"profile\")\r\n                                    .document(member)\r\n                                    .collection(\"chat\")\r\n                                    .document(documentReference.id)\r\n                                    .set(chat)\r\n                                db.collection(\"chat\")\r\n                                    .document(documentReference.id)\r\n                                    .collection(\"user\")\r\n                                    .document(member)\r\n                                    .set(user)\r\n                                db.collection(\"chat\")\r\n                                    .document(documentReference.id)\r\n                                    .collection(\"user\")\r\n                                    .document(member)\r\n                                    .update(admin)\r\n\r\n                            }\r\n\r\n\r\n\r\n                        }\r\n\r\n                    }\r\n                    .addOnFailureListener { e ->\r\n                        Log.w(ContentValues.TAG, \"Error adding document\", e)\r\n                    }\r\n\r\n                val intent = Intent(this, DrawerActivty::class.java)\r\n                startActivity(intent)\r\n\r\n            }\r\n\r\n\r\n        }\r\n    }
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/singularity/ipcaplus/chat/CreateDirectChatActivity.kt b/app/src/main/java/com/singularity/ipcaplus/chat/CreateDirectChatActivity.kt
---- a/app/src/main/java/com/singularity/ipcaplus/chat/CreateDirectChatActivity.kt	(revision d7d49fadf70fadd33042282dce690a6bd606ece4)
-+++ b/app/src/main/java/com/singularity/ipcaplus/chat/CreateDirectChatActivity.kt	(date 1642079549076)
-@@ -13,6 +13,7 @@
- import com.google.firebase.firestore.ktx.firestore
- import com.google.firebase.ktx.Firebase
- import com.singularity.ipcaplus.R
-+import com.singularity.ipcaplus.cryptography.generateRandomIV
- import com.singularity.ipcaplus.cryptography.metaGenrateKey
- import com.singularity.ipcaplus.databinding.ActivityCreateChatBinding
- import com.singularity.ipcaplus.drawer.DrawerActivty
-@@ -38,6 +39,7 @@
-         var type = intent.getStringExtra("type")!!
-         var memberIds = intent.getStringArrayListExtra("users")!!
-         println(memberIds)
-+        val ivGenerated = generateRandomIV()
- 
-         // Generate key for chats
-         val keygen = metaGenrateKey()
-@@ -52,13 +54,14 @@
-                 var chat = Chat(
-                     chatName,
-                     type,
--                    keygen
-+                    keygen,
-+                    ivGenerated
-                 )
- 
-                 // System message data
-                 val message = Message(
-                     "system",
--                    buildSystemMessage(keygen),
-+                    buildSystemMessage(keygen, ivGenerated),
-                     Timestamp.now(),
-                     ""
- 
-@@ -85,7 +88,8 @@
-                                     chat = Chat(
-                                         it.name,
-                                         type,
--                                        keygen
-+                                        keygen,
-+                                        ivGenerated
-                                     )
-                                 }
-                                 println("NOMEEEEE" + it.name)
-Index: app/src/main/java/com/singularity/ipcaplus/utils/Utilis.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.singularity.ipcaplus.utils\r\n\r\nimport android.app.Activity\r\nimport android.app.DownloadManager\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.res.Resources\r\nimport android.graphics.Bitmap\r\nimport android.graphics.BitmapFactory\r\nimport android.graphics.drawable.BitmapDrawable\r\nimport android.graphics.drawable.GradientDrawable\r\nimport android.net.Uri\r\nimport android.os.Build\r\nimport android.provider.MediaStore\r\nimport android.util.Log\r\nimport androidx.annotation.RequiresApi\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.google.firebase.storage.FirebaseStorage\r\nimport com.google.firebase.storage.StorageReference\r\nimport com.google.firebase.storage.ktx.storage\r\nimport com.singularity.ipcaplus.R\r\nimport com.singularity.ipcaplus.cryptography.encryptMeta\r\nimport java.io.File\r\nimport java.io.IOException\r\nimport java.lang.Exception\r\nimport java.net.URI\r\nimport java.text.SimpleDateFormat\r\nimport java.time.LocalDate\r\nimport java.util.*\r\nimport java.util.regex.Pattern\r\n\r\nimport androidx.core.content.res.ResourcesCompat\r\nimport androidx.core.graphics.drawable.toBitmap\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport java.io.ByteArrayOutputStream\r\nimport com.singularity.ipcaplus.chat.ChatActivity\r\n\r\n\r\nobject  Utilis {\r\n\r\n    /*\r\n        This function return the current month id\r\n     */\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    fun getCurrentMonthId(): Int {\r\n\r\n        val c = LocalDate.now()\r\n        val strArray = Pattern.compile(\"-\").split(c.toString())\r\n\r\n        return strArray[1].toInt()\r\n    }\r\n\r\n    /*\r\n        This function return the current year id\r\n     */\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    fun getCurrentYear(): String {\r\n\r\n        val c = LocalDate.now()\r\n        val strArray = Pattern.compile(\"-\").split(c.toString())\r\n\r\n        return strArray[0]\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    fun getYearByCalendarId(id: Int): Int {\r\n\r\n        var count = id\r\n        var result = 2021 - 121 // add 1900\r\n\r\n        while (count > 0) {\r\n            count -= 1\r\n            result ++\r\n        }\r\n\r\n        return result\r\n    }\r\n\r\n    /*\r\n        This function return the month value in string by an id\r\n        @month = month id\r\n     */\r\n    fun getMonthById(month: Int): String {\r\n        return when (month) {\r\n            1 -> \"Janeiro\"\r\n            2 -> \"Fevereiro\"\r\n            3 -> \"Março\"\r\n            4 -> \"Abril\"\r\n            5 -> \"Maio\"\r\n            6 -> \"Junho\"\r\n            7 -> \"Julho\"\r\n            8 -> \"Agosto\"\r\n            9 -> \"Setembro\"\r\n            10 -> \"Outubro\"\r\n            11 -> \"Novembro\"\r\n            12 -> \"Dezembro\"\r\n            else -> \"None\"\r\n        }\r\n    }\r\n\r\n    fun convertHoursStringToInt(strVal: String): Int {\r\n        val strArray = Pattern.compile(\":\").split(strVal)\r\n        val result = strArray[0] + strArray[1]\r\n        return result.toInt()\r\n    }\r\n\r\n    fun getDate(milliSeconds: Long, dateFormat: String?): String {\r\n        // Create a DateFormatter object for displaying date in specified format.\r\n        val formatter = SimpleDateFormat(dateFormat)\r\n\r\n        // Create a calendar object that will convert the date and time value in milliseconds to date.\r\n        val calendar: Calendar = Calendar.getInstance()\r\n        calendar.timeInMillis = milliSeconds\r\n        return formatter.format(calendar.time)\r\n    }\r\n\r\n\r\n    /*\r\n        This function split the date and return only the day\r\n        @date = default date\r\n     */\r\n    fun getDay(dateTime: String): String {\r\n\r\n        // Split the date\r\n        val strArray = Pattern.compile(\"-\").split(dateTime)\r\n        val strArray2 = Pattern.compile(\"T\").split(strArray[2])\r\n\r\n        return strArray2[0]\r\n    }\r\n\r\n\r\n    /*\r\n        This function split the date and return only the month in text\r\n        @date = default date\r\n     */\r\n    fun getMonth(dateTime: String): String {\r\n\r\n        // Split the date\r\n        val strArray = Pattern.compile(\"-\").split(dateTime)\r\n\r\n        return strArray[1].toString()\r\n    }\r\n\r\n\r\n    /*\r\n        This function split the date and return only the year in text\r\n        @date = default date\r\n     */\r\n    fun getYear(dateTime: String): String {\r\n\r\n        // Split the date\r\n        val strArray = Pattern.compile(\"-\").split(dateTime)\r\n\r\n        return strArray[0].toString()\r\n    }\r\n\r\n\r\n    /*\r\n        This function split the date and return only the Hours in text\r\n        @date = default date\r\n     */\r\n    fun getHours(dateTime: String): String {\r\n\r\n        // Split the date\r\n        val strArray = Pattern.compile(\"T\").split(dateTime)\r\n        val strArray2 = Pattern.compile(\":\").split(strArray[1])\r\n\r\n        return strArray2[0].toString()\r\n    }\r\n\r\n\r\n    /*\r\n        This function split the date and return only the Minutes in text\r\n        @date = default date\r\n     */\r\n    fun getMinutes(dateTime: String): String {\r\n\r\n        // Split the date\r\n        val strArray = Pattern.compile(\"T\").split(dateTime)\r\n        val strArray2 = Pattern.compile(\":\").split(strArray[1])\r\n\r\n        return strArray2[1].toString()\r\n    }\r\n\r\n    /*\r\n        This function get the buffer with the name of filename on assets folder\r\n     */\r\n\r\n    fun getJsonDataFromAsset(context: Context, fileName: String): String? {\r\n        val jsonString: String\r\n        try {\r\n            jsonString = context.assets.open(fileName).bufferedReader().use { it.readText() }\r\n        } catch (ioException: IOException) {\r\n            ioException.printStackTrace()\r\n            return null\r\n        }\r\n        return jsonString\r\n    }\r\n\r\n    fun getFirstAndLastName(fullName: String): String {\r\n\r\n        val nameArray = Pattern.compile(\" \").split(fullName)\r\n\r\n        return nameArray[0] + \" \" + nameArray[nameArray.size-1]\r\n    }\r\n\r\n    /*\r\n       ------------------------------------------------ Images ------------------------------------------------\r\n    */\r\n\r\n    fun convertDrawableToBitmap(context: Context, drawable: Int): Bitmap {\r\n        return BitmapFactory.decodeResource(context.resources, R.drawable.circle)\r\n    }\r\n\r\n\r\n    fun getFile(context: Context, path: String, suffix: String, callback:(Bitmap)->Unit) {\r\n\r\n        // Retrieve image from firebase\r\n        val storageRef = FirebaseStorage.getInstance().reference.child(path)\r\n        val localfile = File.createTempFile(\"tempImage\", suffix)\r\n\r\n        // Set ImageView\r\n        storageRef.getFile(localfile).addOnSuccessListener {\r\n            val bitmap = BitmapFactory.decodeFile(localfile.absolutePath)\r\n            callback(bitmap)\r\n        }.addOnFailureListener {\r\n            val bitmap = (ResourcesCompat.getDrawable(\r\n                context.resources,\r\n                R.drawable.circle,\r\n                null\r\n            ) as GradientDrawable?)!!.toBitmap()\r\n            callback(bitmap)\r\n        }\r\n\r\n    }\r\n\r\n    fun downloadFile(context: Context, fileName: String, fileExtension: String, destinationDirectory: String, uri: Uri) {\r\n\r\n        val downloadManager = context.getSystemService(Context.DOWNLOAD_SERVICE) as DownloadManager\r\n        val request = DownloadManager.Request(uri)\r\n\r\n        request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED)\r\n        request.setDestinationInExternalPublicDir(destinationDirectory, fileName + fileExtension)\r\n\r\n        downloadManager.enqueue(request)\r\n    }\r\n\r\n\r\n    fun uploadFile(filePath: Uri, targetPath: String) {\r\n\r\n        val storage = Firebase.storage\r\n        val storageRef = storage.reference\r\n\r\n        if (filePath != Uri.EMPTY) {\r\n            val ref: StorageReference = storageRef.child(targetPath)\r\n            ref.putFile(filePath)\r\n        }\r\n    }\r\n\r\n\r\n    fun getFileIcon(fileName:String): Int {\r\n        return if (fileName.contains(\".\")) {\r\n\r\n            val extensionArray = Pattern.compile(\"[.]\").split(fileName)\r\n            val extension = extensionArray[extensionArray.size-1]\r\n\r\n            when (extension) {\r\n                \"png\", \"jpg\", \"jpeg\", \"jep\", \"jfif\", \"gif\" -> R.drawable.ic_picture\r\n                \"invisible\" -> -1\r\n                else -> R.drawable.ic_file\r\n            }\r\n\r\n        } else\r\n            -1\r\n    }\r\n\r\n\r\n    fun uniqueImageNameGen(): String {\r\n        val characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!#$$%&/()=@[]{}\"\r\n\r\n        val sb = StringBuilder(15)\r\n\r\n        for(x in 0 until 15){\r\n            val random = (characters.indices).random()\r\n            sb.append(characters[random])\r\n        }\r\n\r\n        return sb.toString()\r\n    }\r\n\r\n\r\n    /*\r\n        This function gets the domain of email\r\n        split remove the @ and make the array like this -> [a20115][alunos.ipca.pt]\r\n     */\r\n    fun getEmailDomain(email: String) : String{\r\n        val strArray = Pattern.compile(\"@\").split(email)\r\n        val result= strArray[1]\r\n\r\n        return result.toString()\r\n\r\n    }\r\n\r\n    /*\r\n        ------------------------------------------------ Chat ------------------------------------------------\r\n     */\r\n\r\n    /*\r\n       This function returns the encrypted system message\r\n       @callBack = return the list\r\n    */\r\n    fun buildSystemMessage(key: String) : String {\r\n\r\n        // Build encryptation data of first message send by the system\r\n        var message = encryptMeta(\"This chat is being encripted with Singularity Encryption!\", key)\r\n\r\n        return message.toString()\r\n\r\n    }\r\n\r\n    // Que merda é esta :v\r\n    fun getUID(): String? {\r\n        val firebaseAuth = FirebaseAuth.getInstance()\r\n        return firebaseAuth.uid\r\n    }\r\n\r\n    fun calculateInSampleSize(options: BitmapFactory.Options, reqWidth: Int, reqHeight: Int): Int {\r\n        // Raw height and width of image\r\n        val (height: Int, width: Int) = options.run { outHeight to outWidth }\r\n        var inSampleSize = 1\r\n\r\n        if (height > reqHeight || width > reqWidth) {\r\n\r\n            val halfHeight: Int = height / 2\r\n            val halfWidth: Int = width / 2\r\n\r\n            // Calculate the largest inSampleSize value that is a power of 2 and keeps both\r\n            // height and width larger than the requested height and width.\r\n            while (halfHeight / inSampleSize >= reqHeight && halfWidth / inSampleSize >= reqWidth) {\r\n                inSampleSize *= 2\r\n            }\r\n        }\r\n\r\n        return inSampleSize\r\n    }\r\n\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/singularity/ipcaplus/utils/Utilis.kt b/app/src/main/java/com/singularity/ipcaplus/utils/Utilis.kt
---- a/app/src/main/java/com/singularity/ipcaplus/utils/Utilis.kt	(revision d7d49fadf70fadd33042282dce690a6bd606ece4)
-+++ b/app/src/main/java/com/singularity/ipcaplus/utils/Utilis.kt	(date 1642079549049)
-@@ -310,10 +310,10 @@
-        This function returns the encrypted system message
-        @callBack = return the list
-     */
--    fun buildSystemMessage(key: String) : String {
-+    fun buildSystemMessage(key: String, iv : String) : String {
- 
-         // Build encryptation data of first message send by the system
--        var message = encryptMeta("This chat is being encripted with Singularity Encryption!", key)
-+        var message = encryptMeta("This chat is being encripted with Singularity Encryption!", key, iv)
- 
-         return message.toString()
- 
-Index: app/src/main/java/com/singularity/ipcaplus/chat/ChatsFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.singularity.ipcaplus.chat\r\n\r\nimport android.content.Intent\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ImageView\r\nimport android.widget.TextView\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.recyclerview.widget.DefaultItemAnimator\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.utils.Backend\r\nimport com.singularity.ipcaplus.R\r\nimport com.singularity.ipcaplus.cryptography.decryptWithAESmeta\r\nimport com.singularity.ipcaplus.cryptography.getMetaOx\r\nimport com.singularity.ipcaplus.utils.Utilis\r\nimport com.singularity.ipcaplus.cryptography.saveKeygenOx\r\nimport com.singularity.ipcaplus.databinding.FragmentChatsBinding\r\nimport com.singularity.ipcaplus.models.Chat\r\n\r\n\r\nclass ChatsFragment : Fragment() {\r\n\r\n    // Variables\r\n    var chats = arrayListOf<Chat>()\r\n    var chatIds = arrayListOf<String>()\r\n\r\n    private var _binding: FragmentChatsBinding? = null\r\n    private var mAdapter: RecyclerView.Adapter<*>? = null\r\n    private var mLayoutManager: LinearLayoutManager? = null\r\n\r\n    private val binding get() = _binding!!\r\n\r\n    val db = Firebase.firestore\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n\r\n\r\n        _binding = FragmentChatsBinding.inflate(layoutInflater)\r\n        val root: View = binding.root\r\n\r\n        // Get Group Chats\r\n        db.collection(\"profile\").document(\"${Firebase.auth.currentUser!!.uid}\").collection(\"chat\")\r\n            .addSnapshotListener { documents, e ->\r\n                documents?.let {\r\n                    chats.clear()\r\n                    chatIds.clear()\r\n                    for (document in it) {\r\n                        val chat = Chat.fromHash(document)\r\n                        if (chat.type == \"chat\") {\r\n                            chats.add(chat)\r\n                            chatIds.add(document.id)\r\n                        }\r\n                    }\r\n                    mAdapter?.notifyDataSetChanged()\r\n                }\r\n            }\r\n\r\n        // RecyclerView Chat\r\n        mLayoutManager = LinearLayoutManager(activity, LinearLayoutManager.VERTICAL, false)\r\n        binding.recyclerViewGroups.layoutManager = mLayoutManager\r\n        mAdapter = ChatAdapter()\r\n        binding.recyclerViewGroups.itemAnimator = DefaultItemAnimator()\r\n        binding.recyclerViewGroups.adapter = mAdapter\r\n\r\n        return root\r\n    }\r\n\r\n    /*\r\n        Refresh Activity Content\r\n    */\r\n    override fun onResume() {\r\n        super.onResume()\r\n\r\n        // Get Group Chats\r\n        db.collection(\"profile\").document(\"${Firebase.auth.currentUser!!.uid}\").collection(\"chat\")\r\n            .addSnapshotListener { documents, e ->\r\n                documents?.let {\r\n                    chats.clear()\r\n                    chatIds.clear()\r\n                    for (document in it) {\r\n                        val chat = Chat.fromHash(document)\r\n                        if (chat.type == \"chat\" || chat.type == \"group\") {\r\n                            chats.add(chat)\r\n                            chatIds.add(document.id)\r\n                        }\r\n                    }\r\n                    println(\"CHAT \" + chats)\r\n                    mAdapter?.notifyDataSetChanged()\r\n                }\r\n            }\r\n\r\n    }\r\n\r\n\r\n    override fun onDestroyView() {\r\n        super.onDestroyView()\r\n        _binding = null\r\n    }\r\n\r\n\r\n    inner class ChatAdapter : RecyclerView.Adapter<ChatAdapter.ViewHolder>() {\r\n\r\n        inner class ViewHolder(val v: View) : RecyclerView.ViewHolder(v)\r\n\r\n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n                return ViewHolder(\r\n                    LayoutInflater.from(parent.context).inflate(R.layout.row_chat, parent, false)\r\n                )\r\n\r\n        }\r\n\r\n        @RequiresApi(Build.VERSION_CODES.M)\r\n        override fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n\r\n                holder.v.apply {\r\n\r\n                    // Variables\r\n                    val textViewMessage = findViewById<TextView>(R.id.textViewChatName)\r\n                    val imageViewChatGroup = findViewById<ImageView>(R.id.imageViewChatGroup)\r\n                    val lastMessageTime = findViewById<TextView>(R.id.lastMessageTime)\r\n                    val lastMessageText = findViewById<TextView>(R.id.textViewLastMessage)\r\n\r\n\r\n                    textViewMessage.text = chats[position].name\r\n\r\n                    // sync data recieved form direbase with encrypted shared preferences (key -> 1x)\r\n                    saveKeygenOx(context, chatIds[position], chats[position].ox.toString())\r\n                    // Set Last Chat Message\r\n                    Backend.getLastMessageByChatID(chatIds[position]) {\r\n                        val data = Utilis.getDate(it!!.time.seconds *1000, \"yyyy-MM-dd'T'HH:mm:ss.SSS\")\r\n                        lastMessageTime.text = Utilis.getHours(data) + \":\" + Utilis.getMinutes(data)\r\n                        val keygen = getMetaOx(context, chatIds[position])\r\n                        val message_decripted = decryptWithAESmeta(keygen.toString(), it.message)\r\n                        lastMessageText.text = message_decripted\r\n                    }\r\n\r\n                    Utilis.getFile(this.context, \"chats/${chatIds[position]}/icon.png\", \"png\") { bitmap ->\r\n                        imageViewChatGroup.setImageBitmap(bitmap)\r\n                    }\r\n\r\n                }\r\n                holder.v.setOnClickListener {\r\n                    val intent = Intent(activity, ChatActivity::class.java)\r\n                    intent.putExtra(\"chat_id\", chatIds[position])\r\n                    activity?.startActivity(intent)\r\n                }\r\n\r\n        }\r\n\r\n        override fun getItemViewType(position: Int) : Int {\r\n            if (chats[position].type == \"group\") {\r\n                return 1\r\n            } else {\r\n                return 0\r\n            }\r\n        }\r\n\r\n        override fun getItemCount(): Int {\r\n            return chats.size\r\n        }\r\n    }\r\n\r\n\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/singularity/ipcaplus/chat/ChatsFragment.kt b/app/src/main/java/com/singularity/ipcaplus/chat/ChatsFragment.kt
---- a/app/src/main/java/com/singularity/ipcaplus/chat/ChatsFragment.kt	(revision d7d49fadf70fadd33042282dce690a6bd606ece4)
-+++ b/app/src/main/java/com/singularity/ipcaplus/chat/ChatsFragment.kt	(date 1642079549072)
-@@ -24,6 +24,7 @@
- import com.singularity.ipcaplus.cryptography.saveKeygenOx
- import com.singularity.ipcaplus.databinding.FragmentChatsBinding
- import com.singularity.ipcaplus.models.Chat
-+import com.singularity.ipcaplus.utils.Backend.getIv
- 
- 
- class ChatsFragment : Fragment() {
-@@ -138,13 +139,18 @@
-                     saveKeygenOx(context, chatIds[position], chats[position].ox.toString())
-                     // Set Last Chat Message
-                     Backend.getLastMessageByChatID(chatIds[position]) {
-+
-                         val data = Utilis.getDate(it!!.time.seconds *1000, "yyyy-MM-dd'T'HH:mm:ss.SSS")
-                         lastMessageTime.text = Utilis.getHours(data) + ":" + Utilis.getMinutes(data)
-+
-                         val keygen = getMetaOx(context, chatIds[position])
--                        val message_decripted = decryptWithAESmeta(keygen.toString(), it.message)
--                        lastMessageText.text = message_decripted
--                    }
-+                        getIv(chatIds[position]){iv ->
-+                            val message_decripted = decryptWithAESmeta(keygen.toString(), it.message, iv.toString())
-+                            lastMessageText.text = message_decripted
-+                        }
- 
-+                    }
-+
-                     Utilis.getFile(this.context, "chats/${chatIds[position]}/icon.png", "png") { bitmap ->
-                         imageViewChatGroup.setImageBitmap(bitmap)
-                     }
-Index: app/src/main/java/com/singularity/ipcaplus/chat/CreateChatActivity.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.singularity.ipcaplus.chat\r\n\r\nimport android.content.ContentValues\r\nimport android.content.Intent\r\nimport android.net.Uri\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.Menu\r\nimport android.view.MenuInflater\r\nimport android.widget.ImageView\r\nimport com.google.firebase.Timestamp\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.R\r\nimport com.singularity.ipcaplus.cryptography.metaGenrateKey\r\nimport com.singularity.ipcaplus.databinding.ActivityCreateChatBinding\r\nimport com.singularity.ipcaplus.drawer.DrawerActivty\r\nimport com.singularity.ipcaplus.models.Chat\r\nimport com.singularity.ipcaplus.models.Message\r\nimport com.singularity.ipcaplus.utils.ActivityImageHelper\r\nimport com.singularity.ipcaplus.utils.Backend\r\nimport com.singularity.ipcaplus.utils.Utilis\r\nimport com.singularity.ipcaplus.utils.Utilis.buildSystemMessage\r\nimport com.theartofdev.edmodo.cropper.CropImage\r\nimport com.theartofdev.edmodo.cropper.CropImageView\r\n\r\nclass CreateChatActivity : ActivityImageHelper() {\r\n\r\n    // Variables\r\n    private lateinit var binding: ActivityCreateChatBinding\r\n    var uri = Uri.EMPTY\r\n\r\n    val db = Firebase.firestore\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_create_chat)\r\n\r\n        binding = ActivityCreateChatBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        // Variables\r\n        var chatName : String\r\n\r\n        var type = intent.getStringExtra(\"type\")!!\r\n        var memberIds = intent.getStringArrayListExtra(\"users\")!!\r\n\r\n        // Generate key for chats\r\n        val keygen = metaGenrateKey()\r\n\r\n        binding.imageViewChatPhoto.setOnClickListener {\r\n            checkPermission(android.Manifest.permission.READ_EXTERNAL_STORAGE, STORAGE_PERMISSION_CODE)\r\n        }\r\n\r\n\r\n            // Create Chat\r\n            binding.fabCreateChat.setOnClickListener {\r\n\r\n\r\n                chatName = binding.editTextChatName.text.toString()\r\n\r\n                // Chat data\r\n                val chat = Chat(\r\n                    chatName,\r\n                    type.toString(),\r\n                    keygen\r\n                )\r\n\r\n                // System message data\r\n                val message = Message(\r\n                    \"system\",\r\n                    buildSystemMessage(keygen),\r\n                    Timestamp.now(),\r\n                    \"\"\r\n\r\n                )\r\n\r\n                val user = HashMap<String, Any>()\r\n                val admin = hashMapOf<String?, Any>(\r\n                    \"admin\" to true\r\n                )\r\n\r\n                db.collection(\"chat\")\r\n                    .add(chat.toHash())\r\n                    .addOnSuccessListener { documentReference ->\r\n                        db.collection(\"chat\")\r\n                            .document(documentReference.id)\r\n                            .collection(\"message\")\r\n                            .add(message.toHash())\r\n                        for (member in memberIds) {\r\n                            db.collection(\"profile\")\r\n                                .document(member)\r\n                                .collection(\"chat\")\r\n                                .document(documentReference.id)\r\n                                .set(chat)\r\n                            db.collection(\"chat\")\r\n                                .document(documentReference.id)\r\n                                .collection(\"user\")\r\n                                .document(member)\r\n                                .set(user)\r\n                            if (member == Firebase.auth.currentUser!!.uid) {\r\n                                db.collection(\"chat\")\r\n                                    .document(documentReference.id)\r\n                                    .collection(\"user\")\r\n                                    .document(member)\r\n                                    .update(admin)\r\n                            }\r\n                            if (uri != Uri.EMPTY)\r\n                                Utilis.uploadFile(uri, \"chats/${documentReference.id}/icon.png\")\r\n\r\n                        }\r\n\r\n                    }\r\n                    .addOnFailureListener { e ->\r\n                        Log.w(ContentValues.TAG, \"Error adding document\", e)\r\n                    }\r\n\r\n                val intent = Intent(this, DrawerActivty::class.java)\r\n                startActivity(intent)\r\n\r\n            }\r\n\r\n    }\r\n    /*\r\n       This function happen after picking photo, and make changes in the activity\r\n    */\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n\r\n        if(requestCode == IMAGE_REQUEST_CODE && resultCode == RESULT_OK){\r\n            CropImage.activity(data?.data)\r\n                .setGuidelines(CropImageView.Guidelines.ON)\r\n                .setAspectRatio(1,1)\r\n                .start(this)\r\n        }\r\n\r\n        if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {\r\n            val result = CropImage.getActivityResult(data)\r\n            if (resultCode == RESULT_OK) {\r\n                binding.imageViewChatPhoto.setImageURI(result.uri)\r\n                uri = result.uri\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n       This function create the action bar above the activity\r\n    */\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        val inflater: MenuInflater = menuInflater\r\n        inflater.inflate(R.menu.menu_chat, menu)\r\n        supportActionBar?.setDisplayHomeAsUpEnabled(true)\r\n        supportActionBar?.setHomeAsUpIndicator(R.drawable.ic_arrow_back_24)\r\n\r\n\r\n        return true\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/singularity/ipcaplus/chat/CreateChatActivity.kt b/app/src/main/java/com/singularity/ipcaplus/chat/CreateChatActivity.kt
---- a/app/src/main/java/com/singularity/ipcaplus/chat/CreateChatActivity.kt	(revision d7d49fadf70fadd33042282dce690a6bd606ece4)
-+++ b/app/src/main/java/com/singularity/ipcaplus/chat/CreateChatActivity.kt	(date 1642079549065)
-@@ -9,11 +9,14 @@
- import android.view.Menu
- import android.view.MenuInflater
- import android.widget.ImageView
-+import android.widget.TextView
-+import androidx.appcompat.app.ActionBar
- import com.google.firebase.Timestamp
- import com.google.firebase.auth.ktx.auth
- import com.google.firebase.firestore.ktx.firestore
- import com.google.firebase.ktx.Firebase
- import com.singularity.ipcaplus.R
-+import com.singularity.ipcaplus.cryptography.generateRandomIV
- import com.singularity.ipcaplus.cryptography.metaGenrateKey
- import com.singularity.ipcaplus.databinding.ActivityCreateChatBinding
- import com.singularity.ipcaplus.drawer.DrawerActivty
-@@ -39,6 +42,13 @@
- 
-         binding = ActivityCreateChatBinding.inflate(layoutInflater)
-         setContentView(binding.root)
-+        supportActionBar?.displayOptions = ActionBar.DISPLAY_SHOW_CUSTOM
-+        supportActionBar?.setCustomView(R.layout.custom_bar_layout)
-+        findViewById<TextView>(R.id.AppBarTittle).text = "Novo Grupo"
-+        // Back button
-+        findViewById<ImageView>(R.id.BackButtonImageView).setOnClickListener{
-+            finish()
-+        }
- 
-         // Variables
-         var chatName : String
-@@ -59,18 +69,20 @@
- 
- 
-                 chatName = binding.editTextChatName.text.toString()
-+                val ivGenerated = generateRandomIV()
- 
-                 // Chat data
-                 val chat = Chat(
-                     chatName,
-                     type.toString(),
--                    keygen
-+                    keygen,
-+                    ivGenerated
-                 )
- 
-                 // System message data
-                 val message = Message(
-                     "system",
--                    buildSystemMessage(keygen),
-+                    buildSystemMessage(keygen, ivGenerated),
-                     Timestamp.now(),
-                     ""
- 
-@@ -144,17 +156,4 @@
-             }
-         }
-     }
--
--    /*
--       This function create the action bar above the activity
--    */
--    override fun onCreateOptionsMenu(menu: Menu): Boolean {
--        val inflater: MenuInflater = menuInflater
--        inflater.inflate(R.menu.menu_chat, menu)
--        supportActionBar?.setDisplayHomeAsUpEnabled(true)
--        supportActionBar?.setHomeAsUpIndicator(R.drawable.ic_arrow_back_24)
--
--
--        return true
--    }
- }
-\ No newline at end of file
-Index: app/src/main/java/com/singularity/ipcaplus/models/Chat.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.singularity.ipcaplus.models\r\n\r\nimport com.google.firebase.firestore.QueryDocumentSnapshot\r\n\r\nclass Chat {\r\n    var name : String = \"\"\r\n    var type : String = \"\"\r\n    var ox : String? = \"\"\r\n    var id : String? =  null\r\n\r\n    constructor(name : String, type : String, ox : String) {\r\n        this.name = name\r\n        this.type = type\r\n        this.ox = ox\r\n    }\r\n\r\n    fun toHash() :HashMap<String, Any> {\r\n        var hashMap = HashMap<String, Any>()\r\n        hashMap.put(\"name\", name)\r\n        hashMap.put(\"type\", type)\r\n        hashMap.put(\"ox\", ox!!)\r\n        return hashMap\r\n    }\r\n\r\n    companion object {\r\n        fun fromHash(hashMap: QueryDocumentSnapshot) : Chat {\r\n            val chat = Chat(\r\n                hashMap[\"name\"] as String,\r\n                hashMap[\"type\"] as String,\r\n                hashMap[\"ox\"] as String\r\n            )\r\n            return chat\r\n        }\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/singularity/ipcaplus/models/Chat.kt b/app/src/main/java/com/singularity/ipcaplus/models/Chat.kt
---- a/app/src/main/java/com/singularity/ipcaplus/models/Chat.kt	(revision d7d49fadf70fadd33042282dce690a6bd606ece4)
-+++ b/app/src/main/java/com/singularity/ipcaplus/models/Chat.kt	(date 1642077007855)
-@@ -7,11 +7,13 @@
-     var type : String = ""
-     var ox : String? = ""
-     var id : String? =  null
-+    var iv : String? = ""
- 
--    constructor(name : String, type : String, ox : String) {
-+    constructor(name : String, type : String, ox : String, iv : String) {
-         this.name = name
-         this.type = type
-         this.ox = ox
-+        this.iv = iv
-     }
- 
-     fun toHash() :HashMap<String, Any> {
-@@ -19,6 +21,7 @@
-         hashMap.put("name", name)
-         hashMap.put("type", type)
-         hashMap.put("ox", ox!!)
-+        hashMap.put("iv", iv!!)
-         return hashMap
-     }
- 
-@@ -27,7 +30,9 @@
-             val chat = Chat(
-                 hashMap["name"] as String,
-                 hashMap["type"] as String,
--                hashMap["ox"] as String
-+                hashMap["ox"] as String,
-+                hashMap["iv"] as String
-+
-             )
-             return chat
-         }
-Index: app/src/main/java/com/singularity/ipcaplus/AddPeopleActivity.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.singularity.ipcaplus\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ImageView\r\nimport android.widget.TextView\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.recyclerview.widget.DefaultItemAnimator\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.chat.CreateChatActivity\r\nimport com.singularity.ipcaplus.databinding.ActivityAddPeopleBinding\r\nimport com.singularity.ipcaplus.models.Chat\r\nimport com.singularity.ipcaplus.models.Profile\r\nimport com.singularity.ipcaplus.utils.Backend\r\nimport com.singularity.ipcaplus.utils.Utilis\r\n\r\nclass AddPeopleActivity: AppCompatActivity() {\r\n\r\n    var users = arrayListOf<Profile>()\r\n    var selectedUsers = arrayListOf<Profile>()\r\n\r\n    private lateinit var binding: ActivityAddPeopleBinding\r\n\r\n    private var userAdapter: RecyclerView.Adapter<*>? = null\r\n    private var userSelectedAdapter: RecyclerView.Adapter<*>? = null\r\n\r\n    private var userLayoutManager: LinearLayoutManager? = null\r\n    private var userSelectedLayoutManager: LinearLayoutManager? = null\r\n\r\n\r\n    val db = Firebase.firestore\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_add_people)\r\n        binding = ActivityAddPeopleBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        binding.backBtn.setOnClickListener {\r\n            finish()\r\n        }\r\n\r\n        // Add people with a chat already created\r\n        if (intent.hasExtra(\"chat_id\")) {\r\n            val chat_id = intent.getStringExtra(\"chat_id\")\r\n            Backend.getAllUsersExceptChatUsers(chat_id!!) {\r\n                users.clear()\r\n                users.addAll(it)\r\n                userAdapter?.notifyDataSetChanged()\r\n            }\r\n\r\n            // Continue button\r\n            binding.fabCreateChat.setOnClickListener {\r\n\r\n                Backend.db.collection(\"chat\")\r\n                    .document(chat_id)\r\n                    .get()\r\n                    .addOnSuccessListener { document ->\r\n\r\n                        val chat = Chat(\r\n                            document[\"name\"] as String,\r\n                            document[\"type\"] as String,\r\n                            document[\"ox\"] as String\r\n                        )\r\n\r\n                        val selectedUsersIds = arrayListOf<String>()\r\n                        for(user in selectedUsers) {\r\n                            selectedUsersIds.add(user.id!!)\r\n                        }\r\n\r\n                        Backend.addUsersIntoChat(chat, chat_id, selectedUsersIds) {\r\n                            finish()\r\n                        }\r\n\r\n                    }\r\n\r\n            }\r\n        }\r\n        // Add people and create chat for the first time\r\n        else {\r\n            Backend.getAllUsersExceptCurrent {\r\n                users.clear()\r\n                users.addAll(it)\r\n                userAdapter?.notifyDataSetChanged()\r\n            }\r\n\r\n            // Continue button\r\n            binding.fabCreateChat.setOnClickListener {\r\n\r\n                val selectedUsersIds = arrayListOf<String>()\r\n                for(user in selectedUsers) {\r\n                    selectedUsersIds.add(user.id!!)\r\n                }\r\n\r\n                // Add current user to users list\r\n                Backend.getUserProfile(Firebase.auth.currentUser!!.uid) {\r\n                    selectedUsersIds.add(it.id!!)\r\n\r\n                    // Send users list to chat creation\r\n                    val intent = Intent(this, CreateChatActivity::class.java)\r\n                    intent.putExtra(\"users\", selectedUsersIds)\r\n                    intent.putExtra(\"type\", \"group\")\r\n                    startActivity(intent)\r\n                }\r\n            }\r\n        }\r\n\r\n        // Recycler View All Users\r\n        userLayoutManager = LinearLayoutManager(this, LinearLayoutManager.VERTICAL, false)\r\n        binding.recyclerViewUsers.layoutManager = userLayoutManager\r\n        userAdapter = AllUsersAdapter()\r\n        binding.recyclerViewUsers.itemAnimator = DefaultItemAnimator()\r\n        binding.recyclerViewUsers.adapter = userAdapter\r\n\r\n        // Recycler View Selected Users\r\n        userSelectedLayoutManager = LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false)\r\n        binding.recyclerViewUsersSelected.layoutManager = userSelectedLayoutManager\r\n        userSelectedAdapter = SelectedUsersAdapter()\r\n        binding.recyclerViewUsersSelected.itemAnimator = DefaultItemAnimator()\r\n        binding.recyclerViewUsersSelected.adapter = userSelectedAdapter\r\n\r\n    }\r\n\r\n\r\n    inner class AllUsersAdapter : RecyclerView.Adapter<AllUsersAdapter.ViewHolder>() {\r\n\r\n        inner class ViewHolder(val v: View) : RecyclerView.ViewHolder(v)\r\n\r\n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n            return ViewHolder(\r\n                LayoutInflater.from(parent.context).inflate(R.layout.row_user, parent, false)\r\n            )\r\n        }\r\n\r\n        override fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n\r\n            holder.v.apply {\r\n                // Variables\r\n                val username = findViewById<TextView>(R.id.textViewProfileName)\r\n                val imageViewUser = findViewById<ImageView>(R.id.imageViewProfile)\r\n\r\n                // Set data\r\n                Utilis.getFile(context, \"profilePictures/${users[position].id}.png\", \"png\") { bitmap ->\r\n                    imageViewUser.setImageBitmap(bitmap)\r\n                }\r\n\r\n                username.text = Utilis.getFirstAndLastName(users[position].name)\r\n\r\n            }\r\n            holder.v.setOnClickListener {\r\n\r\n                selectedUsers.add(users[position])\r\n                users.remove(users[position])\r\n                userSelectedAdapter?.notifyDataSetChanged()\r\n                userAdapter?.notifyDataSetChanged()\r\n            }\r\n\r\n        }\r\n\r\n        override fun getItemCount(): Int {\r\n            return users.size\r\n        }\r\n    }\r\n\r\n    inner class SelectedUsersAdapter : RecyclerView.Adapter<SelectedUsersAdapter.ViewHolder>() {\r\n\r\n        inner class ViewHolder(val v: View) : RecyclerView.ViewHolder(v)\r\n\r\n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n            return ViewHolder(\r\n                LayoutInflater.from(parent.context).inflate(R.layout.row_add_pp, parent, false)\r\n            )\r\n        }\r\n\r\n        override fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n\r\n            holder.v.apply {\r\n                // Variables\r\n                val username = findViewById<TextView>(R.id.textViewProfileNameAdd)\r\n                val imageViewUser = findViewById<ImageView>(R.id.imageViewProfile)\r\n\r\n                // Set data\r\n                Utilis.getFile(context,\"profilePictures/${selectedUsers[position].id}.png\", \"png\") { bitmap ->\r\n                    imageViewUser.setImageBitmap(bitmap)\r\n                }\r\n\r\n                username.text = Utilis.getFirstAndLastName(selectedUsers[position].name)\r\n\r\n            }\r\n            holder.v.setOnClickListener {\r\n\r\n                users.add(selectedUsers[position])\r\n                selectedUsers.remove(selectedUsers[position])\r\n                userAdapter?.notifyDataSetChanged()\r\n                userSelectedAdapter?.notifyDataSetChanged()\r\n            }\r\n\r\n        }\r\n\r\n        override fun getItemCount(): Int {\r\n            return selectedUsers.size\r\n        }\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/singularity/ipcaplus/AddPeopleActivity.kt b/app/src/main/java/com/singularity/ipcaplus/AddPeopleActivity.kt
---- a/app/src/main/java/com/singularity/ipcaplus/AddPeopleActivity.kt	(revision d7d49fadf70fadd33042282dce690a6bd606ece4)
-+++ b/app/src/main/java/com/singularity/ipcaplus/AddPeopleActivity.kt	(date 1642078572739)
-@@ -67,7 +67,8 @@
-                         val chat = Chat(
-                             document["name"] as String,
-                             document["type"] as String,
--                            document["ox"] as String
-+                            document["ox"] as String,
-+                            document["iv"] as String
-                         )
- 
-                         val selectedUsersIds = arrayListOf<String>()
-Index: app/src/main/java/com/singularity/ipcaplus/cryptography/metaData.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.singularity.ipcaplus.cryptography\r\n\r\nimport android.content.Context\r\nimport android.os.Build\r\nimport android.util.Log\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.security.crypto.EncryptedSharedPreferences\r\nimport androidx.security.crypto.MasterKeys\r\nimport com.google.gson.Gson\r\nimport com.google.gson.GsonBuilder\r\nimport org.bouncycastle.jce.provider.BouncyCastleProvider\r\nimport org.bouncycastle.util.encoders.Base64\r\nimport java.io.UnsupportedEncodingException\r\nimport java.security.InvalidKeyException\r\nimport java.security.NoSuchAlgorithmException\r\nimport java.security.SecureRandom\r\nimport java.security.Security\r\nimport java.util.Objects.hash\r\nimport javax.crypto.*\r\nimport javax.crypto.spec.IvParameterSpec\r\nimport javax.crypto.spec.SecretKeySpec\r\n\r\n\r\n\r\n\r\n\r\nfun encryptMeta(strToEncrypt: String, secret_key: String): String? {\r\n    Security.addProvider(BouncyCastleProvider())\r\n    hash(strToEncrypt)\r\n    var keyBytes: ByteArray\r\n    //val initVector = generateRandomIV()\r\n    val initVector = \"7c5afb00aaecb1a1\"\r\n    val iv = IvParameterSpec(initVector.toByteArray(charset(\"UTF-8\")))\r\n    println(\"AVEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE $initVector\")\r\n\r\n\r\n    try {\r\n        keyBytes = secret_key.toByteArray(charset(\"UTF8\"))\r\n        val skey = SecretKeySpec(keyBytes, \"AES\")\r\n        val input = strToEncrypt.toByteArray(charset(\"UTF8\"))\r\n\r\n        synchronized(Cipher::class.java) {\r\n            val cipher = Cipher.getInstance(\"AES/CBC/PKCS7Padding\")\r\n            cipher.init(Cipher.ENCRYPT_MODE, skey, iv)\r\n\r\n            val cipherText = ByteArray(cipher.getOutputSize(input.size))\r\n            var ctLength = cipher.update(\r\n                input, 0, input.size,\r\n                cipherText, 0\r\n            )\r\n            ctLength += cipher.doFinal(cipherText, ctLength)\r\n            return String(\r\n                Base64.encode(cipherText)\r\n            )\r\n        }\r\n    } catch (uee: UnsupportedEncodingException) {\r\n        uee.printStackTrace()\r\n    } catch (ibse: IllegalBlockSizeException) {\r\n        ibse.printStackTrace()\r\n    } catch (bpe: BadPaddingException) {\r\n        bpe.printStackTrace()\r\n    } catch (ike: InvalidKeyException) {\r\n        ike.printStackTrace()\r\n    } catch (nspe: NoSuchPaddingException) {\r\n        nspe.printStackTrace()\r\n    } catch (nsae: NoSuchAlgorithmException) {\r\n        nsae.printStackTrace()\r\n    } catch (e: ShortBufferException) {\r\n        e.printStackTrace()\r\n    }\r\n\r\n    return null\r\n}\r\n\r\nfun decryptWithAESmeta(key: String, strToDecrypt: String?): String? {\r\n    Security.addProvider(BouncyCastleProvider())\r\n    var keyBytes: ByteArray\r\n    val initVector = \"7c5afb00aaecb1a1\"\r\n\r\n    try {\r\n        val iv = IvParameterSpec(initVector.toByteArray(charset(\"UTF-8\")))\r\n        keyBytes = key.toByteArray(charset(\"UTF8\"))\r\n        val skey = SecretKeySpec(keyBytes, \"AES\")\r\n        val input = org.bouncycastle.util.encoders.Base64\r\n            .decode(strToDecrypt?.trim { it <= ' ' }?.toByteArray(charset(\"UTF8\")))\r\n\r\n        synchronized(Cipher::class.java) {\r\n            val cipher = Cipher.getInstance(\"AES/CBC/PKCS7Padding\")\r\n            cipher.init(Cipher.DECRYPT_MODE, skey, iv)\r\n\r\n            val plainText = ByteArray(cipher.getOutputSize(input.size))\r\n            var ptLength = cipher.update(input, 0, input.size, plainText, 0)\r\n            ptLength += cipher.doFinal(plainText, ptLength)\r\n            val decryptedString = String(plainText)\r\n            return decryptedString.trim { it <= ' ' }\r\n        }\r\n    } catch (uee: UnsupportedEncodingException) {\r\n        uee.printStackTrace()\r\n    } catch (ibse: IllegalBlockSizeException) {\r\n        ibse.printStackTrace()\r\n    } catch (bpe: BadPaddingException) {\r\n        bpe.printStackTrace()\r\n    } catch (ike: InvalidKeyException) {\r\n        ike.printStackTrace()\r\n    } catch (nspe: NoSuchPaddingException) {\r\n        nspe.printStackTrace()\r\n    } catch (nsae: NoSuchAlgorithmException) {\r\n        nsae.printStackTrace()\r\n    } catch (e: ShortBufferException) {\r\n        e.printStackTrace()\r\n    }\r\n\r\n    return null\r\n}\r\n\r\nfun metaGenrateKey(): String {\r\n    //val secretKey: String = \"662ede816988e58fb6d057d9d85605e0\"\r\n    val keygen = (\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\r\n            + \"0123456789\"\r\n            + \"abcdefghijklmnopqrstuvxyz\")\r\n\r\n    val n = 32\r\n\r\n    // create StringBuffer size of keygen\r\n    val secretKey = StringBuilder(n)\r\n    for (i in 0 until n) {\r\n\r\n        // generate a random number between\r\n        // 0 to keygen variable length\r\n        val index = (keygen.length\r\n                * Math.random()).toInt()\r\n\r\n        // add Character one by one in end of secretKey\r\n        secretKey.append(keygen[index])\r\n\r\n    }\r\n    println(secretKey)\r\n    return secretKey.toString()\r\n}\r\n\r\nfun metaBlock(message: String){\r\n    //val secretKey: String = \"662ede816988e58fb6d057d9d85605e0\"\r\n    val keygen = metaGenrateKey()\r\n\r\n    var meta = encryptMeta(message, keygen)\r\n    println(meta)\r\n\r\n    val message_decripted = decryptWithAESmeta(keygen, meta)\r\n    println(message_decripted)\r\n}\r\n\r\n@RequiresApi(Build.VERSION_CODES.M)\r\nfun saveKeygenOx(context : Context, chatUid : String, keygen: String){\r\n\r\n    val keyGenParameterSpec = MasterKeys.AES256_GCM_SPEC\r\n    val masterKeyAlias = MasterKeys.getOrCreate(keyGenParameterSpec)\r\n    val sharedPreferences = EncryptedSharedPreferences.create(\r\n        \"meta_shared_preferences\",\r\n        masterKeyAlias,\r\n        context,\r\n        EncryptedSharedPreferences.PrefKeyEncryptionScheme.AES256_SIV,\r\n        EncryptedSharedPreferences.PrefValueEncryptionScheme.AES256_GCM\r\n    )\r\n\r\n    // storing a value\r\n    sharedPreferences\r\n        .edit()\r\n        .putString(chatUid, keygen)\r\n        .apply()\r\n}\r\n\r\n@RequiresApi(Build.VERSION_CODES.M)\r\nfun getMetaOx(context: Context, chatUid: String): String? {\r\n\r\n    val keyGenParameterSpec = MasterKeys.AES256_GCM_SPEC\r\n    val masterKeyAlias = MasterKeys.getOrCreate(keyGenParameterSpec)\r\n    val sharedPreferences = EncryptedSharedPreferences.create(\r\n        \"meta_shared_preferences\",\r\n        masterKeyAlias,\r\n        context,\r\n        EncryptedSharedPreferences.PrefKeyEncryptionScheme.AES256_SIV,\r\n        EncryptedSharedPreferences.PrefValueEncryptionScheme.AES256_GCM\r\n    )\r\n\r\n    // reading a value\r\n    println(sharedPreferences.getString(chatUid, \"\"))\r\n    return sharedPreferences.getString(chatUid, \"\") // -> \"some_data\"\r\n}\r\n\r\nfun generateRandomIV(): String {\r\n    val ranGen = SecureRandom()\r\n    val aesKey = ByteArray(16)\r\n    ranGen.nextBytes(aesKey)\r\n    val result = StringBuffer()\r\n    for (b in aesKey) {\r\n        result.append(String.format(\"%02x\", b))\r\n    }\r\n    return if (16 > result.toString().length) {\r\n        result.toString()\r\n    } else {\r\n        result.toString().substring(0, 16)\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/singularity/ipcaplus/cryptography/metaData.kt b/app/src/main/java/com/singularity/ipcaplus/cryptography/metaData.kt
---- a/app/src/main/java/com/singularity/ipcaplus/cryptography/metaData.kt	(revision d7d49fadf70fadd33042282dce690a6bd606ece4)
-+++ b/app/src/main/java/com/singularity/ipcaplus/cryptography/metaData.kt	(date 1642078199573)
-@@ -24,12 +24,12 @@
- 
- 
- 
--fun encryptMeta(strToEncrypt: String, secret_key: String): String? {
-+fun encryptMeta(strToEncrypt: String, secret_key: String, initVector : String): String? {
-     Security.addProvider(BouncyCastleProvider())
-     hash(strToEncrypt)
-     var keyBytes: ByteArray
-     //val initVector = generateRandomIV()
--    val initVector = "7c5afb00aaecb1a1"
-+    //val initVector = "7c5afb00aaecb1a1"
-     val iv = IvParameterSpec(initVector.toByteArray(charset("UTF-8")))
-     println("AVEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE $initVector")
- 
-@@ -72,10 +72,10 @@
-     return null
- }
- 
--fun decryptWithAESmeta(key: String, strToDecrypt: String?): String? {
-+fun decryptWithAESmeta(key: String, strToDecrypt: String?, initVector : String): String? {
-     Security.addProvider(BouncyCastleProvider())
-     var keyBytes: ByteArray
--    val initVector = "7c5afb00aaecb1a1"
-+    //val initVector = "7c5afb00aaecb1a1"
- 
-     try {
-         val iv = IvParameterSpec(initVector.toByteArray(charset("UTF-8")))
-@@ -137,7 +137,7 @@
-     println(secretKey)
-     return secretKey.toString()
- }
--
-+/*
- fun metaBlock(message: String){
-     //val secretKey: String = "662ede816988e58fb6d057d9d85605e0"
-     val keygen = metaGenrateKey()
-@@ -147,7 +147,7 @@
- 
-     val message_decripted = decryptWithAESmeta(keygen, meta)
-     println(message_decripted)
--}
-+}*/
- 
- @RequiresApi(Build.VERSION_CODES.M)
- fun saveKeygenOx(context : Context, chatUid : String, keygen: String){
-Index: app/src/main/java/com/singularity/ipcaplus/utils/Backend.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.singularity.ipcaplus.utils\r\n\r\nimport android.net.Uri\r\nimport com.google.firebase.Timestamp\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.Query\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.google.firebase.storage.FirebaseStorage\r\nimport com.google.firebase.storage.ktx.storage\r\nimport com.singularity.ipcaplus.R\r\nimport com.singularity.ipcaplus.models.*\r\nimport org.json.JSONArray\r\nimport java.io.File\r\n\r\nobject Backend {\r\n\r\n    val db = Firebase.firestore\r\n\r\n    /*\r\n       ------------------------------------------------ Events ------------------------------------------------\r\n    */\r\n\r\n    /*\r\n       This function returns all events during the month in the firebase to an list\r\n       @month = selected month\r\n       @callBack = return the list\r\n    */\r\n    fun getAllMonthEvents(month: String, callBack: (List<EventCalendar>)->Unit) {\r\n\r\n        val events = arrayListOf<EventCalendar>()\r\n\r\n        // Get all user chat ids\r\n        val chatIds = arrayListOf<String>()\r\n        getAllUserChatIds {\r\n            chatIds.addAll(it)\r\n\r\n            // Search in all chats\r\n            for (id in chatIds) {\r\n                db.collection(\"chat\")\r\n                    .document(id)\r\n                    .collection(\"event\")\r\n                    .addSnapshotListener { documents, _ ->\r\n\r\n                        documents?.let {\r\n\r\n                            for (document in documents) {\r\n                                val event = EventCalendar.fromHash(document)\r\n                                event.id = document.id\r\n\r\n                                val date = Utilis.getDate(event.datetime.seconds * 1000, \"yyyy-MM-dd'T'HH:mm:ss.SSS\")\r\n                                if (month == Utilis.getMonthById(Utilis.getMonth(date).toInt())) {\r\n                                    events.add(event)\r\n                                }\r\n                            }\r\n                            callBack(events)\r\n                        }\r\n                    }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private fun getAllUserChatIds(callBack: (List<String>)->Unit) {\r\n\r\n        val chatIds = arrayListOf<String>()\r\n\r\n        // Get Group Chats Ids\r\n        db.collection(\"profile\").document(Firebase.auth.currentUser!!.uid).collection(\"chat\")\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n                    for (document in it) {\r\n                        chatIds.add(document.id)\r\n                    }\r\n\r\n                    callBack(chatIds)\r\n                }\r\n            }\r\n    }\r\n\r\n\r\n    /*\r\n       This function returns all events during the month in the firebase to an list\r\n       @month = selected month\r\n       @callBack = return the list\r\n    */\r\n    fun getAllChatMonthEvents(month: String, chat_id: String, callBack: (List<EventCalendar>)->Unit) {\r\n\r\n        val events = arrayListOf<EventCalendar>()\r\n\r\n        db.collection(\"chat\")\r\n            .document(chat_id)\r\n            .collection(\"event\")\r\n            .addSnapshotListener { documents, _ ->\r\n\r\n                documents?.let {\r\n\r\n                    for (document in documents) {\r\n                        val event = EventCalendar.fromHash(document)\r\n                        event.id = document.id\r\n\r\n                        val date = Utilis.getDate(\r\n                            event.datetime.seconds * 1000,\r\n                            \"yyyy-MM-dd'T'HH:mm:ss.SSS\"\r\n                        )\r\n                        if (month == Utilis.getMonthById(Utilis.getMonth(date).toInt())) {\r\n                            events.add(event)\r\n                        }\r\n                    }\r\n\r\n                    callBack(events)\r\n                }\r\n\r\n            }\r\n    }\r\n\r\n\r\n    /*\r\n       This function returns all events during the day in the firebase to an list\r\n       @day = selected day\r\n       @callBack = return the list\r\n    */\r\n    fun getAllChatMonthDayEvents(month: String, day: Int, chat_id: String, callBack: (List<EventCalendar>)->Unit) {\r\n\r\n        val events = arrayListOf<EventCalendar>()\r\n\r\n        db.collection(\"chat\")\r\n            .document(chat_id)\r\n            .collection(\"event\")\r\n            .addSnapshotListener { documents, _ ->\r\n\r\n                documents?.let {\r\n\r\n                    for (document in documents) {\r\n                        val event = EventCalendar.fromHash(document)\r\n                        event.id = document.id\r\n\r\n                        val date = Utilis.getDate(\r\n                            event.datetime.seconds * 1000,\r\n                            \"yyyy-MM-dd'T'HH:mm:ss.SSS\"\r\n                        )\r\n                        if (day == Utilis.getDay(date).toInt() && month == Utilis.getMonthById(\r\n                                Utilis.getMonth(date).toInt()\r\n                            )\r\n                        ) {\r\n                            events.add(event)\r\n                        }\r\n                    }\r\n\r\n                    callBack(events)\r\n                }\r\n\r\n            }\r\n    }\r\n\r\n\r\n    /*\r\n       This function returns all events during the day in the firebase to an list\r\n       @day = selected day\r\n       @callBack = return the list\r\n    */\r\n    fun getAllMonthDayEvents(month: String, day: Int, callBack: (List<EventCalendar>)->Unit) {\r\n\r\n        val events = arrayListOf<EventCalendar>()\r\n\r\n        // Get all user chat ids\r\n        val chatIds = arrayListOf<String>()\r\n        getAllUserChatIds {\r\n            chatIds.addAll(it)\r\n\r\n            // Search in all chats\r\n            for (id in chatIds) {\r\n                db.collection(\"chat\")\r\n                    .document(id)\r\n                    .collection(\"event\")\r\n                    .addSnapshotListener { documents, _ ->\r\n\r\n                        documents?.let {\r\n\r\n                            for (document in documents) {\r\n                                val event = EventCalendar.fromHash(document)\r\n                                event.id = document.id\r\n\r\n                                val date = Utilis.getDate(event.datetime.seconds * 1000, \"yyyy-MM-dd'T'HH:mm:ss.SSS\")\r\n                                if (day == Utilis.getDay(date).toInt() && month == Utilis.getMonthById(\r\n                                        Utilis.getMonth(date).toInt())\r\n                                ) {\r\n                                    events.add(event)\r\n                                }\r\n                            }\r\n\r\n                            callBack(events)\r\n                        }\r\n\r\n                    }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    fun deleteEvent(chatID: String, eventID: String) {\r\n\r\n        db.collection(\"chat\")\r\n            .document(chatID)\r\n            .collection(\"event\")\r\n            .document(eventID)\r\n            .delete()\r\n\r\n    }\r\n\r\n\r\n    /*\r\n       ------------------------------------------------ Schedule ------------------------------------------------\r\n    */\r\n\r\n    /*\r\n       This function returns all events in the firebase to an list\r\n       @callBack = return the list\r\n    */\r\n    fun getDayCourseSubjects(day: String, courseId: String, callBack: (List<Subject>)->Unit) {\r\n\r\n        val subjects = arrayListOf<Subject>()\r\n        val subjectsWithBreaks = arrayListOf<Subject>()\r\n\r\n        db.collection(\"course\").document(courseId).collection(\"subject\")\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n\r\n                    // Add every subject to the list\r\n                    for (document in documents) {\r\n                        val subject = Subject.fromHash(document)\r\n                        if (day == subject.day) {\r\n                            subjects.add(subject)\r\n                        }\r\n                    }\r\n\r\n                    // Order the subjects by time\r\n                    for (i in 0 until subjects.size) {\r\n                        for (j in 0 until subjects.size - 1) {\r\n\r\n                            if (Utilis.convertHoursStringToInt(subjects[j].start_time) > Utilis.convertHoursStringToInt(\r\n                                    subjects[j + 1].start_time\r\n                                )\r\n                            ) {\r\n                                val temp = subjects[j]\r\n                                subjects[j] = subjects[j + 1]\r\n                                subjects[j + 1] = temp\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Add Break Times Between Classes\r\n                    for (i in 0 until subjects.size) {\r\n                        if (i % 2 == 0) {\r\n                            subjectsWithBreaks.add(subjects[i])\r\n                        }\r\n                        else {\r\n                            val diff = Utilis.convertHoursStringToInt(subjects[i].start_time) - Utilis.convertHoursStringToInt(\r\n                                subjects[i - 1].end_time\r\n                            )\r\n                            subjectsWithBreaks.add(Subject(\"breaktime\", diff.toString()))\r\n                            subjectsWithBreaks.add(subjects[i])\r\n                        }\r\n                    }\r\n\r\n                    callBack(subjectsWithBreaks)\r\n                }\r\n\r\n            }\r\n\r\n    }\r\n\r\n\r\n    /*\r\n       This function returns the user course by callback\r\n       @id = user uid\r\n    */\r\n    fun getUserCourses(uid: String, callBack:(String)->Unit) {\r\n\r\n        db.collection(\"profile\")\r\n            .document(uid)\r\n            .collection(\"course\")\r\n            .addSnapshotListener { documents, _ ->\r\n\r\n                documents?.let {\r\n\r\n                    var courseId = \"\"\r\n                    for (document in documents)\r\n                        courseId = document.id\r\n\r\n                    callBack(courseId)\r\n                }\r\n            }\r\n    }\r\n\r\n\r\n    /*\r\n       This function returns the user course by callback\r\n       @id = user uid\r\n    */\r\n    fun getUserCoursesIds(uid: String, courseTag: String, callBack:(List<String>)->Unit) {\r\n\r\n        val courseIds = arrayListOf<String>()\r\n\r\n        db.collection(\"course\")\r\n            .whereEqualTo(\"tag\", courseTag)\r\n            .get()\r\n            .addOnSuccessListener { documents ->\r\n\r\n                documents?.let {\r\n\r\n                    for (document in documents)\r\n                        courseIds.add(document.id)\r\n\r\n                    callBack(courseIds)\r\n                }\r\n\r\n            }\r\n\r\n    }\r\n\r\n\r\n    fun setUserCourses(userID: String, courseID: String) {\r\n\r\n        val profile = HashMap<String, Any>()\r\n        db.collection(\"profile\")\r\n            .document(userID)\r\n            .collection(\"course\")\r\n            .document(courseID)\r\n            .set(profile)\r\n    }\r\n\r\n\r\n    /*\r\n       ------------------------------------------------ Contacts ------------------------------------------------\r\n    */\r\n\r\n    /*\r\n       This function returns all contacts in the firebase to an list\r\n       @callBack = return the list\r\n    */\r\n    fun getAllContacts(callBack: (List<Contact>)->Unit) {\r\n\r\n        val contacts = arrayListOf<Contact>()\r\n\r\n        db.collection(\"contacts\")\r\n            .addSnapshotListener { documents, _ ->\r\n\r\n                documents?.let {\r\n\r\n                    for (document in documents) {\r\n                        val contact = Contact.fromHash(document)\r\n                        contacts.add(contact)\r\n                    }\r\n\r\n                    callBack(contacts)\r\n                }\r\n\r\n            }\r\n\r\n    }\r\n\r\n\r\n    /*\r\n       ------------------------------------------------ Profile ------------------------------------------------\r\n    */\r\n\r\n    fun getUserProfile(userId: String, callBack:(Profile)->Unit) {\r\n\r\n        var profile = Profile()\r\n\r\n        db.collection(\"profile\")\r\n            .addSnapshotListener { documents, _ ->\r\n\r\n                documents?.let {\r\n\r\n                    for (document in documents) {\r\n\r\n                        if (document.id == userId) {\r\n                            profile = Profile.fromHash(document)\r\n                            profile.id = document.id\r\n                        }\r\n                    }\r\n\r\n                    callBack(profile)\r\n                }\r\n            }\r\n    }\r\n\r\n    fun getAllUsers (callBack:(List<Profile>)->Unit) {\r\n        val profiles = arrayListOf<Profile>()\r\n\r\n        db.collection(\"profile\")\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n\r\n                    for (document in documents) {\r\n                        val profile = Profile.fromHash(document)\r\n                        profile.id = document.id\r\n                        profiles.add(profile)\r\n                    }\r\n                }\r\n\r\n                callBack(profiles)\r\n            }\r\n    }\r\n\r\n    fun getAllUsersExceptCurrent (callBack:(List<Profile>)->Unit) {\r\n        val profiles = arrayListOf<Profile>()\r\n\r\n        db.collection(\"profile\")\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n\r\n                    for (document in documents) {\r\n                        val profile = Profile.fromHash(document)\r\n\r\n                        if (Firebase.auth.currentUser!!.uid != document.id) {\r\n                            profile.id = document.id\r\n                            profiles.add(profile)\r\n                        }\r\n                    }\r\n                }\r\n\r\n                callBack(profiles)\r\n            }\r\n    }\r\n\r\n\r\n    fun getAllUsersExceptChatUsers (chatID: String, callBack:(List<Profile>)->Unit) {\r\n\r\n        val currentUserIds = arrayListOf<String>()\r\n        val profiles = arrayListOf<Profile>()\r\n\r\n        // Get current chat users ids\r\n        getChatUsers(chatID) {\r\n            for (user in it)\r\n                currentUserIds.add(user.id!!)\r\n\r\n            db.collection(\"profile\")\r\n                .addSnapshotListener { documents, _ ->\r\n                    documents?.let {\r\n\r\n                        for (document in documents) {\r\n                            val profile = Profile.fromHash(document)\r\n\r\n                            // Verify if user is not in the chat\r\n                            var found = false\r\n                            for (id in currentUserIds) {\r\n                                if (id == document.id)\r\n                                    found = true\r\n                            }\r\n\r\n                            if (!found) {\r\n                                profile.id = document.id\r\n                                profiles.add(profile)\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    callBack(profiles)\r\n                }\r\n        }\r\n    }\r\n\r\n\r\n    fun changeUserChatAdminStatus(chatId: String, userId: String, status: Boolean) {\r\n\r\n        db.collection(\"chat\")\r\n            .document(chatId)\r\n            .collection(\"user\")\r\n            .document(userId)\r\n            .update(\"admin\", status)\r\n\r\n    }\r\n\r\n\r\n    /*\r\n       ------------------------------------------------ Chats ------------------------------------------------\r\n    */\r\n\r\n\r\n    fun getChatUsers(chatID: String, callBack: (List<Profile>)->Unit) {\r\n\r\n        val userIds = arrayListOf<String>()\r\n        val adminIds = arrayListOf<String>()\r\n        val users = arrayListOf<Profile>()\r\n\r\n        // Get the ids of the users in the chat\r\n        db.collection(\"chat\")\r\n            .document(chatID)\r\n            .collection(\"user\")\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n                    for (document in documents) {\r\n                        userIds.add(document.id)\r\n\r\n                        if (document[\"admin\"] != true)\r\n                            adminIds.add(document.id)\r\n\r\n                    }\r\n                }\r\n\r\n                // Find the data for each id\r\n                db.collection(\"profile\")\r\n                    .addSnapshotListener { documents2, _ ->\r\n                        documents2?.let {\r\n                            for (document in documents2) {\r\n                                for (id in userIds) {\r\n                                    if (document.id == id) {\r\n                                        val profile = Profile.fromHash(document)\r\n                                        profile.id = document.id\r\n                                        users.add(profile)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        // Get Admins\r\n                        for (u in users) {\r\n                            for (a in adminIds) {\r\n                                if (u.id == a) {\r\n                                    u.isAdmin = true\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        callBack(users)\r\n                    }\r\n\r\n            }\r\n\r\n    }\r\n\r\n\r\n    fun getChatUsersUids(chatID: String, callBack: (List<String>) -> Unit){\r\n        var userIds = arrayListOf<String>()\r\n\r\n        // Get the ids of the users in the chat\r\n        db.collection(\"chat\")\r\n            .document(chatID)\r\n            .collection(\"user\")\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n                    for (document in documents) {\r\n                        userIds.add(document.id)\r\n                    }\r\n                }\r\n\r\n                callBack(userIds)\r\n            }\r\n    }\r\n\r\n\r\n    fun changeChatName(chatID: String, newName: String) {\r\n\r\n        db.collection(\"chat\")\r\n            .document(chatID)\r\n            .update(\"name\", newName)\r\n    }\r\n\r\n\r\n    /*\r\n       This function returns last chat message by chat id\r\n       @callBack = return the message\r\n    */\r\n    fun getLastMessageByChatID(chatID: String, callBack: (Message?)->Unit) {\r\n\r\n        var message : Message? = null\r\n\r\n        db.collection(\"chat\").document(\"${chatID}\").collection(\"message\")\r\n            .orderBy(\"time\", Query.Direction.DESCENDING).limit(1)\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n                    for (document in documents) {\r\n                        message = Message.fromHash(document)\r\n                        }\r\n                    }\r\n\r\n                    callBack(message)\r\n                }\r\n\r\n    }\r\n\r\n\r\n    fun getChatAdminIds(chatID: String, callBack: (List<String>)->Unit) {\r\n\r\n        val adminIds = arrayListOf<String>()\r\n\r\n        // Get Admins\r\n        db.collection(\"chat\")\r\n            .document(chatID)\r\n            .collection(\"user\")\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n                    for (document in documents) {\r\n\r\n                        if (document[\"admin\"] == true)\r\n                            adminIds.add(document.id)\r\n\r\n                    }\r\n\r\n                    callBack(adminIds)\r\n                }\r\n            }\r\n\r\n    }\r\n\r\n\r\n    fun removeUserFromChat(chatId: String, userId: String) {\r\n\r\n        // remover user from chat user list\r\n        db.collection(\"chat\")\r\n            .document(chatId)\r\n            .collection(\"user\")\r\n            .document(userId)\r\n            .delete()\r\n\r\n        // remove chat from user chat list\r\n        db.collection(\"profile\")\r\n            .document(userId)\r\n            .collection(\"chat\")\r\n            .document(chatId)\r\n            .delete()\r\n    }\r\n\r\n\r\n    fun addUsersIntoChat(chat: Chat, chatId: String, usersId: ArrayList<String>, callBack: ()->Unit) {\r\n\r\n        for (userId in usersId) {\r\n\r\n            // Create chat in user profile\r\n            db.collection(\"profile\")\r\n                .document(userId)\r\n                .collection(\"chat\")\r\n                .document(chatId)\r\n                .set(chat)\r\n                .addOnCompleteListener {\r\n\r\n                    val profile = HashMap<String, Any>()\r\n                    db.collection(\"chat\")\r\n                        .document(chatId)\r\n                        .collection(\"user\")\r\n                        .document(userId)\r\n                        .set(profile)\r\n                        .addOnCompleteListener {\r\n                            callBack()\r\n                        }\r\n\r\n                }\r\n\r\n        }\r\n    }\r\n\r\n\r\n    fun deleteChat(chatId: String, callback: ()->Unit) {\r\n\r\n        val userIds = arrayListOf<String>()\r\n\r\n        // get all chat members ids\r\n        db.collection(\"chat\")\r\n            .document(chatId)\r\n            .collection(\"user\")\r\n            .addSnapshotListener { documents, _ ->\r\n\r\n                documents?.let {\r\n                    for (document in documents) {\r\n                        userIds.add(document.id)\r\n                    }\r\n\r\n                    // <------------------------------------------------------- Missing here\r\n\r\n                    // delete chat\r\n                    /*\r\n                    db.collection(\"chat\")\r\n                        .document(chatId)\r\n                        .delete()\r\n*/\r\n\r\n                    // delete chat references in members\r\n                    for (i in 0 until userIds.size) {\r\n\r\n                        db.collection(\"profile\")\r\n                            .document(userIds[i])\r\n                            .collection(\"chat\")\r\n                            .document(chatId)\r\n                            .delete()\r\n                            .addOnCompleteListener {\r\n                                // If its the last callback refresh the activity\r\n                                if (i == userIds.size - 1)\r\n                                    callback()\r\n                            }\r\n\r\n                    }\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    fun getAllDirectChatIdsByUser(userId: String, callBack: (List<String?>) -> Unit){\r\n\r\n        var chatIds = arrayListOf<String?>()\r\n\r\n        // Get all profile chat ids\r\n        db.collection(\"profile\")\r\n            .document(userId)\r\n            .collection(\"chat\")\r\n            .whereEqualTo(\"type\", \"chat\")\r\n            .get()\r\n            .addOnSuccessListener { documents ->\r\n                for (document in documents) {\r\n                    chatIds.add(document.id)\r\n                }\r\n\r\n                println(\"DEntroooo\" + chatIds)\r\n                callBack(chatIds)\r\n            }\r\n\r\n    }\r\n\r\n    fun getDirectChatById(chatIds: List<String?>, userId: String, callBack: (String?)-> Unit) {\r\n\r\n        var chatId : String? = null\r\n\r\n        for (id in chatIds) {\r\n            db.collection(\"chat\")\r\n                .document(id!!)\r\n                .collection(\"user\")\r\n                .get()\r\n                .addOnSuccessListener { documents ->\r\n                    for(document in documents) {\r\n                        if(document.id == userId){\r\n                            chatId = id\r\n                        }\r\n                    }\r\n\r\n                    println(\"ACABOU2---------------------------------------\")\r\n                    callBack(chatId)\r\n                }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /*\r\n       ------------------------------------------------ Register Manipulation ------------------------------------------------\r\n    */\r\n\r\n    fun getIpcaData(email: String, callBack: (Profile?)->Unit) {\r\n\r\n        var profile : Profile? = null\r\n\r\n        db.collection(\"ipca_data\")\r\n            .whereEqualTo(\"email\", email)\r\n            .get()\r\n            .addOnSuccessListener { documents ->\r\n\r\n                for (document in documents) {\r\n                    profile = Profile.fromHash(document)\r\n                }\r\n\r\n                callBack(profile)\r\n\r\n            }\r\n\r\n    }\r\n\r\n\r\n    /*\r\n       ------------------------------------------------ Files ------------------------------------------------\r\n    */\r\n\r\n    fun getAllChatFolderFiles(path: String, callBack: (List<FirebaseFile>) -> Unit) {\r\n\r\n        val files = arrayListOf<FirebaseFile>()\r\n        val listRef = Firebase.storage.reference.child(path)\r\n\r\n        // Find all the prefixes and items.\r\n        listRef.listAll().addOnSuccessListener {\r\n\r\n            for (i in it.prefixes) {\r\n                files.add(FirebaseFile(i.name, R.drawable.ic_folder))\r\n            }\r\n\r\n            for (i in it.items) {\r\n                val icon = Utilis.getFileIcon(i.name)\r\n                if (icon != -1) {\r\n                    val file = FirebaseFile(i.name, icon)\r\n                    files.add(file)\r\n                }\r\n            }\r\n\r\n            callBack(files)\r\n        }\r\n\r\n    }\r\n\r\n    /*\r\n      ------------------------------------------------ Files ------------------------------------------------\r\n   */\r\n\r\n\r\n    fun deleteAllFilesInsideFolder(filePath: String, callback: ()->Unit) {\r\n\r\n        val storage = Firebase.storage\r\n        val listRef = storage.reference.child(filePath)\r\n\r\n        listRef.listAll()\r\n            .addOnSuccessListener {\r\n\r\n                it.items.forEach { item ->\r\n                    item.delete()\r\n                        .addOnCompleteListener {\r\n                            callback()\r\n                        }\r\n                }\r\n\r\n            }\r\n    }\r\n\r\n\r\n    fun getFileUrl(filePath: String, callback: (Uri)->Unit) {\r\n\r\n        val storageRef = FirebaseStorage.getInstance().reference.child(filePath)\r\n\r\n        storageRef.downloadUrl.addOnCompleteListener {\r\n            callback(it.result!!)\r\n        }\r\n\r\n    }\r\n\r\n\r\n    fun postTokenAddress(tokenAdress: String, uid: String){\r\n        println(tokenAdress)\r\n        println(uid)\r\n        var token = HashMap<String, String>()\r\n        db.collection(\"profile\")\r\n            .document(uid)\r\n            .collection(\"tokens\")\r\n            .document(tokenAdress)\r\n            .set(token)\r\n    }\r\n\r\n    fun getAllTokens(uid: String, callBack: (List<String>) -> Unit){\r\n        val tokens = arrayListOf<String>()\r\n\r\n        db.collection(\"profile\").document(uid).collection(\"tokens\")\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n                    for (document in documents) {\r\n                            tokens.add(document.id)\r\n                    }\r\n\r\n                    callBack(tokens)\r\n                }\r\n            }\r\n\r\n    }\r\n\r\n    fun createJsonArrayString(array: List<String>): JSONArray {\r\n        return JSONArray(array)\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/singularity/ipcaplus/utils/Backend.kt b/app/src/main/java/com/singularity/ipcaplus/utils/Backend.kt
---- a/app/src/main/java/com/singularity/ipcaplus/utils/Backend.kt	(revision d7d49fadf70fadd33042282dce690a6bd606ece4)
-+++ b/app/src/main/java/com/singularity/ipcaplus/utils/Backend.kt	(date 1642079549056)
-@@ -866,4 +866,22 @@
-     fun createJsonArrayString(array: List<String>): JSONArray {
-         return JSONArray(array)
-     }
-+
-+    fun getIv(chat_id: String, callBack: (String?)->Unit) {
-+
-+        var iv : String? = null
-+
-+        db.collection("chat")
-+            .get()
-+            .addOnSuccessListener { documents ->
-+                for(document in documents) {
-+                    if (document.id == chat_id) {
-+                        val chat = Chat.fromHash(document)
-+                        iv = chat.iv.toString()
-+                    }
-+                }
-+                callBack(iv)
-+            }
-+    }
-+
- }
-\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_1_13_2022_3_27_PM_[Default_Changelist]/shelved.patch
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_1_13_2022_3_27_PM_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_1_13_2022_3_27_PM_[Default_Changelist]/shelved.patch
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_1_13_2022_3_27_PM_[Default_Changelist]/shelved.patch	(revision 29efb0e97c5348e589c6b41e71b726f921c3b5a0)
+++ /dev/null	(revision 29efb0e97c5348e589c6b41e71b726f921c3b5a0)
@@ -1,1590 +0,0 @@
-Index: app/src/main/java/com/singularity/ipcaplus/chat/CreateDirectChatActivity.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.singularity.ipcaplus.chat\r\n\r\nimport android.content.ContentValues\r\nimport android.content.Intent\r\nimport android.net.Uri\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.Menu\r\nimport android.view.MenuInflater\r\nimport com.google.firebase.Timestamp\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.R\r\nimport com.singularity.ipcaplus.cryptography.metaGenrateKey\r\nimport com.singularity.ipcaplus.databinding.ActivityCreateChatBinding\r\nimport com.singularity.ipcaplus.drawer.DrawerActivty\r\nimport com.singularity.ipcaplus.models.Chat\r\nimport com.singularity.ipcaplus.models.Message\r\nimport com.singularity.ipcaplus.utils.ActivityImageHelper\r\nimport com.singularity.ipcaplus.utils.Backend\r\nimport com.singularity.ipcaplus.utils.Utilis\r\nimport com.singularity.ipcaplus.utils.Utilis.buildSystemMessage\r\nimport com.theartofdev.edmodo.cropper.CropImage\r\nimport com.theartofdev.edmodo.cropper.CropImageView\r\n\r\nclass CreateDirectChatActivity : ActivityImageHelper() {\r\n\r\n\r\n    val db = Firebase.firestore\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        // Variables\r\n        var chatName : String\r\n\r\n        var type = intent.getStringExtra(\"type\")!!\r\n        var memberIds = intent.getStringArrayListExtra(\"users\")!!\r\n        println(memberIds)\r\n\r\n        // Generate key for chats\r\n        val keygen = metaGenrateKey()\r\n\r\n            Backend.getUserProfile(memberIds[1]) {\r\n\r\n\r\n                chatName = it.name\r\n                println(\"Nome antes\" + chatName)\r\n\r\n                // Chat data\r\n                var chat = Chat(\r\n                    chatName,\r\n                    type,\r\n                    keygen\r\n                )\r\n\r\n                // System message data\r\n                val message = Message(\r\n                    \"system\",\r\n                    buildSystemMessage(keygen),\r\n                    Timestamp.now(),\r\n                    \"\"\r\n\r\n                )\r\n\r\n                val user = HashMap<String, Any>()\r\n                val admin = hashMapOf<String?, Any>(\r\n                    \"admin\" to true\r\n                )\r\n\r\n                db.collection(\"chat\")\r\n                    .add(chat.toHash())\r\n                    .addOnSuccessListener { documentReference ->\r\n                        db.collection(\"chat\")\r\n                            .document(documentReference.id)\r\n                            .collection(\"message\")\r\n                            .add(message.toHash())\r\n                        for (member in memberIds) {\r\n                            println(\"IDSDSDS\" + memberIds)\r\n                            Backend.getUserProfile(memberIds[0]) {\r\n                                if (member == Firebase.auth.currentUser!!.uid) {\r\n                                    println(\"IF\")\r\n                                    // Chat data\r\n                                    chat = Chat(\r\n                                        it.name,\r\n                                        type,\r\n                                        keygen\r\n                                    )\r\n                                }\r\n                                println(\"NOMEEEEE\" + it.name)\r\n\r\n                                db.collection(\"profile\")\r\n                                    .document(member)\r\n                                    .collection(\"chat\")\r\n                                    .document(documentReference.id)\r\n                                    .set(chat)\r\n                                db.collection(\"chat\")\r\n                                    .document(documentReference.id)\r\n                                    .collection(\"user\")\r\n                                    .document(member)\r\n                                    .set(user)\r\n                                db.collection(\"chat\")\r\n                                    .document(documentReference.id)\r\n                                    .collection(\"user\")\r\n                                    .document(member)\r\n                                    .update(admin)\r\n\r\n                            }\r\n\r\n\r\n\r\n                        }\r\n\r\n                    }\r\n                    .addOnFailureListener { e ->\r\n                        Log.w(ContentValues.TAG, \"Error adding document\", e)\r\n                    }\r\n\r\n                val intent = Intent(this, DrawerActivty::class.java)\r\n                startActivity(intent)\r\n\r\n            }\r\n\r\n\r\n        }\r\n    }
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/singularity/ipcaplus/chat/CreateDirectChatActivity.kt b/app/src/main/java/com/singularity/ipcaplus/chat/CreateDirectChatActivity.kt
---- a/app/src/main/java/com/singularity/ipcaplus/chat/CreateDirectChatActivity.kt	(revision 5fa09412663837672a36a41fd04f1700573c5f37)
-+++ b/app/src/main/java/com/singularity/ipcaplus/chat/CreateDirectChatActivity.kt	(date 1642087624652)
-@@ -5,6 +5,7 @@
- import android.net.Uri
- import androidx.appcompat.app.AppCompatActivity
- import android.os.Bundle
-+import android.provider.Settings
- import android.util.Log
- import android.view.Menu
- import android.view.MenuInflater
-@@ -13,6 +14,7 @@
- import com.google.firebase.firestore.ktx.firestore
- import com.google.firebase.ktx.Firebase
- import com.singularity.ipcaplus.R
-+import com.singularity.ipcaplus.cryptography.generateRandomIV
- import com.singularity.ipcaplus.cryptography.metaGenrateKey
- import com.singularity.ipcaplus.databinding.ActivityCreateChatBinding
- import com.singularity.ipcaplus.drawer.DrawerActivty
-@@ -20,15 +22,22 @@
- import com.singularity.ipcaplus.models.Message
- import com.singularity.ipcaplus.utils.ActivityImageHelper
- import com.singularity.ipcaplus.utils.Backend
-+import com.singularity.ipcaplus.utils.Backend.createJsonArrayString
- import com.singularity.ipcaplus.utils.Utilis
- import com.singularity.ipcaplus.utils.Utilis.buildSystemMessage
-+import com.singularity.ipcaplus.utils.Utilis.createNotificationGroup
- import com.theartofdev.edmodo.cropper.CropImage
- import com.theartofdev.edmodo.cropper.CropImageView
-+import kotlinx.coroutines.Dispatchers
-+import kotlinx.coroutines.GlobalScope
-+import kotlinx.coroutines.launch
-+import kotlinx.coroutines.withContext
- 
- class CreateDirectChatActivity : ActivityImageHelper() {
- 
- 
-     val db = Firebase.firestore
-+    var noteKey : String = ""
-     override fun onCreate(savedInstanceState: Bundle?) {
-         super.onCreate(savedInstanceState)
- 
-@@ -37,7 +46,30 @@
- 
-         var type = intent.getStringExtra("type")!!
-         var memberIds = intent.getStringArrayListExtra("users")!!
-+        var tokens_adress = arrayListOf<String>()
-+
-         println(memberIds)
-+        val ivGenerated = generateRandomIV()
-+
-+        for (memberId in memberIds){
-+
-+            // Getting all of tokens of  profile associated devices
-+            Backend.getAllTokens(memberId) {
-+                if (tokens_adress.isEmpty()){
-+                    tokens_adress.clear()
-+                }
-+                tokens_adress.addAll(it)
-+
-+                GlobalScope.launch {
-+                    withContext(Dispatchers.IO){
-+                        Log.d("paaaaaa", tokens_adress.toString())
-+                        noteKey = createNotificationGroup(generateRandomIV(), createJsonArrayString(tokens_adress))
-+                    }
-+                }
-+
-+            }
-+
-+        }
- 
-         // Generate key for chats
-         val keygen = metaGenrateKey()
-@@ -52,13 +84,15 @@
-                 var chat = Chat(
-                     chatName,
-                     type,
--                    keygen
-+                    keygen,
-+                    ivGenerated,
-+                    noteKey
-                 )
- 
-                 // System message data
-                 val message = Message(
-                     "system",
--                    buildSystemMessage(keygen),
-+                    buildSystemMessage(keygen, ivGenerated),
-                     Timestamp.now(),
-                     ""
- 
-@@ -77,7 +111,6 @@
-                             .collection("message")
-                             .add(message.toHash())
-                         for (member in memberIds) {
--                            println("IDSDSDS" + memberIds)
-                             Backend.getUserProfile(memberIds[0]) {
-                                 if (member == Firebase.auth.currentUser!!.uid) {
-                                     println("IF")
-@@ -85,10 +118,11 @@
-                                     chat = Chat(
-                                         it.name,
-                                         type,
--                                        keygen
-+                                        keygen,
-+                                        ivGenerated,
-+                                        noteKey
-                                     )
-                                 }
--                                println("NOMEEEEE" + it.name)
- 
-                                 db.collection("profile")
-                                     .document(member)
-Index: app/src/main/java/com/singularity/ipcaplus/utils/Utilis.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.singularity.ipcaplus.utils\r\n\r\nimport android.app.Activity\r\nimport android.app.DownloadManager\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.res.Resources\r\nimport android.graphics.Bitmap\r\nimport android.graphics.BitmapFactory\r\nimport android.graphics.drawable.BitmapDrawable\r\nimport android.graphics.drawable.GradientDrawable\r\nimport android.net.Uri\r\nimport android.os.Build\r\nimport android.provider.MediaStore\r\nimport android.util.Log\r\nimport androidx.annotation.RequiresApi\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.google.firebase.storage.FirebaseStorage\r\nimport com.google.firebase.storage.StorageReference\r\nimport com.google.firebase.storage.ktx.storage\r\nimport com.singularity.ipcaplus.R\r\nimport com.singularity.ipcaplus.cryptography.encryptMeta\r\nimport java.io.File\r\nimport java.io.IOException\r\nimport java.lang.Exception\r\nimport java.net.URI\r\nimport java.text.SimpleDateFormat\r\nimport java.time.LocalDate\r\nimport java.util.*\r\nimport java.util.regex.Pattern\r\n\r\nimport androidx.core.content.res.ResourcesCompat\r\nimport androidx.core.graphics.drawable.toBitmap\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport java.io.ByteArrayOutputStream\r\nimport com.singularity.ipcaplus.chat.ChatActivity\r\n\r\n\r\nobject  Utilis {\r\n\r\n    /*\r\n        This function return the current month id\r\n     */\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    fun getCurrentMonthId(): Int {\r\n\r\n        val c = LocalDate.now()\r\n        val strArray = Pattern.compile(\"-\").split(c.toString())\r\n\r\n        return strArray[1].toInt()\r\n    }\r\n\r\n    /*\r\n        This function return the current year id\r\n     */\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    fun getCurrentYear(): String {\r\n\r\n        val c = LocalDate.now()\r\n        val strArray = Pattern.compile(\"-\").split(c.toString())\r\n\r\n        return strArray[0]\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    fun getYearByCalendarId(id: Int): Int {\r\n\r\n        var count = id\r\n        var result = 2021 - 121 // add 1900\r\n\r\n        while (count > 0) {\r\n            count -= 1\r\n            result ++\r\n        }\r\n\r\n        return result\r\n    }\r\n\r\n    /*\r\n        This function return the month value in string by an id\r\n        @month = month id\r\n     */\r\n    fun getMonthById(month: Int): String {\r\n        return when (month) {\r\n            1 -> \"Janeiro\"\r\n            2 -> \"Fevereiro\"\r\n            3 -> \"Março\"\r\n            4 -> \"Abril\"\r\n            5 -> \"Maio\"\r\n            6 -> \"Junho\"\r\n            7 -> \"Julho\"\r\n            8 -> \"Agosto\"\r\n            9 -> \"Setembro\"\r\n            10 -> \"Outubro\"\r\n            11 -> \"Novembro\"\r\n            12 -> \"Dezembro\"\r\n            else -> \"None\"\r\n        }\r\n    }\r\n\r\n    fun convertHoursStringToInt(strVal: String): Int {\r\n        val strArray = Pattern.compile(\":\").split(strVal)\r\n        val result = strArray[0] + strArray[1]\r\n        return result.toInt()\r\n    }\r\n\r\n    fun getDate(milliSeconds: Long, dateFormat: String?): String {\r\n        // Create a DateFormatter object for displaying date in specified format.\r\n        val formatter = SimpleDateFormat(dateFormat)\r\n\r\n        // Create a calendar object that will convert the date and time value in milliseconds to date.\r\n        val calendar: Calendar = Calendar.getInstance()\r\n        calendar.timeInMillis = milliSeconds\r\n        return formatter.format(calendar.time)\r\n    }\r\n\r\n\r\n    /*\r\n        This function split the date and return only the day\r\n        @date = default date\r\n     */\r\n    fun getDay(dateTime: String): String {\r\n\r\n        // Split the date\r\n        val strArray = Pattern.compile(\"-\").split(dateTime)\r\n        val strArray2 = Pattern.compile(\"T\").split(strArray[2])\r\n\r\n        return strArray2[0]\r\n    }\r\n\r\n\r\n    /*\r\n        This function split the date and return only the month in text\r\n        @date = default date\r\n     */\r\n    fun getMonth(dateTime: String): String {\r\n\r\n        // Split the date\r\n        val strArray = Pattern.compile(\"-\").split(dateTime)\r\n\r\n        return strArray[1].toString()\r\n    }\r\n\r\n\r\n    /*\r\n        This function split the date and return only the year in text\r\n        @date = default date\r\n     */\r\n    fun getYear(dateTime: String): String {\r\n\r\n        // Split the date\r\n        val strArray = Pattern.compile(\"-\").split(dateTime)\r\n\r\n        return strArray[0].toString()\r\n    }\r\n\r\n\r\n    /*\r\n        This function split the date and return only the Hours in text\r\n        @date = default date\r\n     */\r\n    fun getHours(dateTime: String): String {\r\n\r\n        // Split the date\r\n        val strArray = Pattern.compile(\"T\").split(dateTime)\r\n        val strArray2 = Pattern.compile(\":\").split(strArray[1])\r\n\r\n        return strArray2[0].toString()\r\n    }\r\n\r\n\r\n    /*\r\n        This function split the date and return only the Minutes in text\r\n        @date = default date\r\n     */\r\n    fun getMinutes(dateTime: String): String {\r\n\r\n        // Split the date\r\n        val strArray = Pattern.compile(\"T\").split(dateTime)\r\n        val strArray2 = Pattern.compile(\":\").split(strArray[1])\r\n\r\n        return strArray2[1].toString()\r\n    }\r\n\r\n    /*\r\n        This function get the buffer with the name of filename on assets folder\r\n     */\r\n\r\n    fun getJsonDataFromAsset(context: Context, fileName: String): String? {\r\n        val jsonString: String\r\n        try {\r\n            jsonString = context.assets.open(fileName).bufferedReader().use { it.readText() }\r\n        } catch (ioException: IOException) {\r\n            ioException.printStackTrace()\r\n            return null\r\n        }\r\n        return jsonString\r\n    }\r\n\r\n    fun getFirstAndLastName(fullName: String): String {\r\n\r\n        val nameArray = Pattern.compile(\" \").split(fullName)\r\n\r\n        return nameArray[0] + \" \" + nameArray[nameArray.size-1]\r\n    }\r\n\r\n    /*\r\n       ------------------------------------------------ Images ------------------------------------------------\r\n    */\r\n\r\n    fun convertDrawableToBitmap(context: Context, drawable: Int): Bitmap {\r\n        return BitmapFactory.decodeResource(context.resources, R.drawable.circle)\r\n    }\r\n\r\n\r\n    fun getFile(context: Context, path: String, suffix: String, callback:(Bitmap)->Unit) {\r\n\r\n        // Retrieve image from firebase\r\n        val storageRef = FirebaseStorage.getInstance().reference.child(path)\r\n        val localfile = File.createTempFile(\"tempImage\", suffix)\r\n\r\n        // Set ImageView\r\n        storageRef.getFile(localfile).addOnSuccessListener {\r\n            val bitmap = BitmapFactory.decodeFile(localfile.absolutePath)\r\n            callback(bitmap)\r\n        }.addOnFailureListener {\r\n            val bitmap = (ResourcesCompat.getDrawable(\r\n                context.resources,\r\n                R.drawable.circle,\r\n                null\r\n            ) as GradientDrawable?)!!.toBitmap()\r\n            callback(bitmap)\r\n        }\r\n\r\n    }\r\n\r\n    fun downloadFile(context: Context, fileName: String, fileExtension: String, destinationDirectory: String, uri: Uri) {\r\n\r\n        val downloadManager = context.getSystemService(Context.DOWNLOAD_SERVICE) as DownloadManager\r\n        val request = DownloadManager.Request(uri)\r\n\r\n        request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED)\r\n        request.setDestinationInExternalPublicDir(destinationDirectory, fileName + fileExtension)\r\n\r\n        downloadManager.enqueue(request)\r\n    }\r\n\r\n\r\n    fun uploadFile(filePath: Uri, targetPath: String) {\r\n\r\n        val storage = Firebase.storage\r\n        val storageRef = storage.reference\r\n\r\n        if (filePath != Uri.EMPTY) {\r\n            val ref: StorageReference = storageRef.child(targetPath)\r\n            ref.putFile(filePath)\r\n        }\r\n    }\r\n\r\n\r\n    fun getFileIcon(fileName:String): Int {\r\n        return if (fileName.contains(\".\")) {\r\n\r\n            val extensionArray = Pattern.compile(\"[.]\").split(fileName)\r\n            val extension = extensionArray[extensionArray.size-1]\r\n\r\n            when (extension) {\r\n                \"png\", \"jpg\", \"jpeg\", \"jep\", \"jfif\", \"gif\" -> R.drawable.ic_picture\r\n                \"invisible\" -> -1\r\n                else -> R.drawable.ic_file\r\n            }\r\n\r\n        } else\r\n            -1\r\n    }\r\n\r\n\r\n    fun uniqueImageNameGen(): String {\r\n        val characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!#$$%&/()=@[]{}\"\r\n\r\n        val sb = StringBuilder(15)\r\n\r\n        for(x in 0 until 15){\r\n            val random = (characters.indices).random()\r\n            sb.append(characters[random])\r\n        }\r\n\r\n        return sb.toString()\r\n    }\r\n\r\n\r\n    /*\r\n        This function gets the domain of email\r\n        split remove the @ and make the array like this -> [a20115][alunos.ipca.pt]\r\n     */\r\n    fun getEmailDomain(email: String) : String{\r\n        val strArray = Pattern.compile(\"@\").split(email)\r\n        val result= strArray[1]\r\n\r\n        return result.toString()\r\n\r\n    }\r\n\r\n    /*\r\n        ------------------------------------------------ Chat ------------------------------------------------\r\n     */\r\n\r\n    /*\r\n       This function returns the encrypted system message\r\n       @callBack = return the list\r\n    */\r\n    fun buildSystemMessage(key: String) : String {\r\n\r\n        // Build encryptation data of first message send by the system\r\n        var message = encryptMeta(\"This chat is being encripted with Singularity Encryption!\", key)\r\n\r\n        return message.toString()\r\n\r\n    }\r\n\r\n    // Que merda é esta :v\r\n    fun getUID(): String? {\r\n        val firebaseAuth = FirebaseAuth.getInstance()\r\n        return firebaseAuth.uid\r\n    }\r\n\r\n    fun calculateInSampleSize(options: BitmapFactory.Options, reqWidth: Int, reqHeight: Int): Int {\r\n        // Raw height and width of image\r\n        val (height: Int, width: Int) = options.run { outHeight to outWidth }\r\n        var inSampleSize = 1\r\n\r\n        if (height > reqHeight || width > reqWidth) {\r\n\r\n            val halfHeight: Int = height / 2\r\n            val halfWidth: Int = width / 2\r\n\r\n            // Calculate the largest inSampleSize value that is a power of 2 and keeps both\r\n            // height and width larger than the requested height and width.\r\n            while (halfHeight / inSampleSize >= reqHeight && halfWidth / inSampleSize >= reqWidth) {\r\n                inSampleSize *= 2\r\n            }\r\n        }\r\n\r\n        return inSampleSize\r\n    }\r\n\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/singularity/ipcaplus/utils/Utilis.kt b/app/src/main/java/com/singularity/ipcaplus/utils/Utilis.kt
---- a/app/src/main/java/com/singularity/ipcaplus/utils/Utilis.kt	(revision 5fa09412663837672a36a41fd04f1700573c5f37)
-+++ b/app/src/main/java/com/singularity/ipcaplus/utils/Utilis.kt	(date 1642084505643)
-@@ -2,6 +2,7 @@
- 
- import android.app.Activity
- import android.app.DownloadManager
-+import android.content.ContentValues
- import android.content.Context
- import android.content.Intent
- import android.content.res.Resources
-@@ -21,8 +22,6 @@
- import com.google.firebase.storage.ktx.storage
- import com.singularity.ipcaplus.R
- import com.singularity.ipcaplus.cryptography.encryptMeta
--import java.io.File
--import java.io.IOException
- import java.lang.Exception
- import java.net.URI
- import java.text.SimpleDateFormat
-@@ -33,8 +32,15 @@
- import androidx.core.content.res.ResourcesCompat
- import androidx.core.graphics.drawable.toBitmap
- import com.google.firebase.auth.FirebaseAuth
--import java.io.ByteArrayOutputStream
- import com.singularity.ipcaplus.chat.ChatActivity
-+import kotlinx.coroutines.Dispatchers
-+import kotlinx.coroutines.delay
-+import kotlinx.coroutines.withContext
-+import org.json.JSONArray
-+import org.json.JSONObject
-+import java.io.*
-+import java.net.URL
-+import javax.net.ssl.HttpsURLConnection
- 
- 
- object  Utilis {
-@@ -310,10 +316,10 @@
-        This function returns the encrypted system message
-        @callBack = return the list
-     */
--    fun buildSystemMessage(key: String) : String {
-+    fun buildSystemMessage(key: String, iv : String) : String {
- 
-         // Build encryptation data of first message send by the system
--        var message = encryptMeta("This chat is being encripted with Singularity Encryption!", key)
-+        var message = encryptMeta("This chat is being encripted with Singularity Encryption!", key, iv)
- 
-         return message.toString()
- 
-@@ -345,4 +351,181 @@
-         return inSampleSize
-     }
- 
-+    suspend fun  createNotificationGroup(notificationKeyName : String, registrationIds : JSONArray) : String {
-+
-+        var notificationKey = ""
-+
-+        try {
-+
-+            Log.d("json", registrationIds.toString())
-+
-+            //Request
-+            val endPoint = URL("https://fcm.googleapis.com/fcm/notification")
-+
-+            //Establish a connection
-+            val httpsURLConnection: HttpsURLConnection =
-+                endPoint.openConnection() as HttpsURLConnection
-+
-+            //Connection to fcm
-+            //The time available to read from the input stream when the connection is established
-+            httpsURLConnection.readTimeout = 10000
-+            //The time available to connect to the url
-+            httpsURLConnection.connectTimeout = 15000
-+            //Defining the type of request to be made to the fcm
-+            httpsURLConnection.requestMethod = "POST"
-+            //Defining that the url connection can be used to send and receive data
-+            httpsURLConnection.doInput = true
-+            httpsURLConnection.doOutput = true
-+
-+            // Build parameters for json
-+            httpsURLConnection.setRequestProperty("Content-Type", "application/json")
-+            val project_key = "AAAAMMR-Gaw:APA91bFeijRa909_QEdEFsQeDSaJZRYD7rOk8B8Bc2QiYcGoyLG1xqqpZLkOJXmZrG0FbScojvqBCsweSEWDrMLM6kr67boS-BVB2oy7fL6Zn1N9ICVk6efGniauDa3z8eaOb1TENmEs"
-+            val senderId = "209455028652"
-+            httpsURLConnection.setRequestProperty("authorization", "key=$project_key")
-+            httpsURLConnection.setRequestProperty("project_id", senderId)
-+
-+            val json = JSONObject()
-+
-+            json.put("operation", "create")
-+            json.put("notification_key_name", notificationKeyName)
-+            json.put("registration_ids", registrationIds)
-+
-+
-+            // Writer
-+            val outputStream: OutputStream =
-+                BufferedOutputStream(httpsURLConnection.outputStream)
-+            val writer = BufferedWriter(OutputStreamWriter(outputStream, "utf-8"))
-+
-+            // POST
-+            writer.write(json.toString())
-+            writer.flush()
-+            writer.close()
-+
-+            outputStream.close()
-+
-+            //The response code and message of the POST requests
-+            val responseCode: Int = httpsURLConnection.responseCode
-+            val responseMessage = httpsURLConnection.responseMessage
-+
-+            Log.d(ContentValues.TAG, "$responseCode $responseMessage")
-+
-+
-+            // Check server STATUS
-+            if (responseCode in 400..499) {
-+                httpsURLConnection.errorStream
-+            } else {
-+                httpsURLConnection.inputStream
-+            }
-+            println("CUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU NAO CHEGOU SEU BURRO")
-+            if (responseCode == 200) {
-+                Log.e(ContentValues.TAG, "Group Created!!")
-+
-+                val response = httpsURLConnection.inputStream.bufferedReader()
-+                    .use { it.readText() }  // defaults to UTF-8
-+                withContext(Dispatchers.Main) {
-+                    //notification_key
-+                    val jsonObject  = JSONObject(response)
-+                    notificationKey = jsonObject.getString("notification_key")
-+                    println("NotifKey: $notificationKey")
-+                    Log.d("NotifKey", notificationKey)
-+                }
-+                println("CUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU $notificationKey")
-+                return notificationKey
-+            } else {
-+                Log.e(ContentValues.TAG, "Error it didn´t work")
-+            }
-+
-+            //Here i close the connection to the endPoint
-+            httpsURLConnection.disconnect()
-+
-+
-+        } catch (e: Exception) {
-+            e.printStackTrace()
-+        }
-+        return notificationKey
-+    }
-+
-+    //This function sends push notifications to devices that are subscribed to a specific topic
-+    suspend fun sendNotificationToGroup(title: String, message: String, notificationKey : String) {
-+
-+        delay(1500)
-+
-+        try {
-+
-+            //Request
-+            val url = URL("https://fcm.googleapis.com/fcm/send")
-+
-+            //Establish a connection
-+            val httpsURLConnection: HttpsURLConnection =
-+                url.openConnection() as HttpsURLConnection
-+
-+            //The time available to read from the input stream when the connection is established
-+            httpsURLConnection.readTimeout = 10000
-+            //The time available to connect to the url
-+            httpsURLConnection.connectTimeout = 15000
-+            //Defining the type of request to be made to the fcm
-+            httpsURLConnection.requestMethod = "POST"
-+            //Defining that the url connection can be used to send and receive data
-+            httpsURLConnection.doInput = true
-+            httpsURLConnection.doOutput = true
-+
-+            // Config of FCM
-+            val project_key =
-+                "AAAAMMR-Gaw:APA91bFeijRa909_QEdEFsQeDSaJZRYD7rOk8B8Bc2QiYcGoyLG1xqqpZLkOJXmZrG0FbScojvqBCsweSEWDrMLM6kr67boS-BVB2oy7fL6Zn1N9ICVk6efGniauDa3z8eaOb1TENmEs"
-+            httpsURLConnection.setRequestProperty("authorization", "key=$project_key")
-+            httpsURLConnection.setRequestProperty("Content-Type", "application/json")
-+
-+            val jsonObject = JSONObject()
-+            val data = JSONObject()
-+
-+            data.put("title", title)
-+            data.put("content", message)
-+            //On Notification Click Activity
-+            data.put("click_action", ".LoginActivity")
-+
-+            //jsonObject for POST
-+            jsonObject.put("data", data)
-+            //
-+            jsonObject.put("to", notificationKey)
-+
-+            val outputStream: OutputStream =
-+                BufferedOutputStream(httpsURLConnection.outputStream)
-+            val writer = BufferedWriter(OutputStreamWriter(outputStream, "utf-8"))
-+
-+            writer.write(jsonObject.toString())
-+            writer.flush()
-+            writer.close()
-+
-+            outputStream.close()
-+
-+            //The response code and message of the POST requests
-+            val responseCode: Int = httpsURLConnection.responseCode
-+            val responseMessage: String = httpsURLConnection.responseMessage
-+
-+
-+            Log.d(ContentValues.TAG, "Response from sendMes: $responseCode $responseMessage")
-+
-+
-+            // Check server STATUS
-+            if (responseCode in 400..499) {
-+                httpsURLConnection.errorStream
-+            } else {
-+                httpsURLConnection.inputStream
-+            }
-+            if (responseCode == 200) {
-+                Log.e(
-+                    ContentValues.TAG,
-+                    "Notification Sent \n Title: $title \n Body: $message"
-+                )
-+            } else {
-+                Log.e(ContentValues.TAG, "Notification Error")
-+            }
-+
-+            httpsURLConnection.disconnect()
-+
-+        } catch (e: Exception) {
-+            e.printStackTrace()
-+        }
-+    }
-+
- }
-\ No newline at end of file
-Index: app/src/main/java/com/singularity/ipcaplus/chat/CreateChatActivity.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.singularity.ipcaplus.chat\r\n\r\nimport android.content.ContentValues\r\nimport android.content.Intent\r\nimport android.net.Uri\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.Menu\r\nimport android.view.MenuInflater\r\nimport android.widget.ImageView\r\nimport com.google.firebase.Timestamp\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.R\r\nimport com.singularity.ipcaplus.cryptography.metaGenrateKey\r\nimport com.singularity.ipcaplus.databinding.ActivityCreateChatBinding\r\nimport com.singularity.ipcaplus.drawer.DrawerActivty\r\nimport com.singularity.ipcaplus.models.Chat\r\nimport com.singularity.ipcaplus.models.Message\r\nimport com.singularity.ipcaplus.utils.ActivityImageHelper\r\nimport com.singularity.ipcaplus.utils.Backend\r\nimport com.singularity.ipcaplus.utils.Utilis\r\nimport com.singularity.ipcaplus.utils.Utilis.buildSystemMessage\r\nimport com.theartofdev.edmodo.cropper.CropImage\r\nimport com.theartofdev.edmodo.cropper.CropImageView\r\n\r\nclass CreateChatActivity : ActivityImageHelper() {\r\n\r\n    // Variables\r\n    private lateinit var binding: ActivityCreateChatBinding\r\n    var uri = Uri.EMPTY\r\n\r\n    val db = Firebase.firestore\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_create_chat)\r\n\r\n        binding = ActivityCreateChatBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        // Variables\r\n        var chatName : String\r\n\r\n        var type = intent.getStringExtra(\"type\")!!\r\n        var memberIds = intent.getStringArrayListExtra(\"users\")!!\r\n\r\n        // Generate key for chats\r\n        val keygen = metaGenrateKey()\r\n\r\n        binding.imageViewChatPhoto.setOnClickListener {\r\n            checkPermission(android.Manifest.permission.READ_EXTERNAL_STORAGE, STORAGE_PERMISSION_CODE)\r\n        }\r\n\r\n\r\n            // Create Chat\r\n            binding.fabCreateChat.setOnClickListener {\r\n\r\n\r\n                chatName = binding.editTextChatName.text.toString()\r\n\r\n                // Chat data\r\n                val chat = Chat(\r\n                    chatName,\r\n                    type.toString(),\r\n                    keygen\r\n                )\r\n\r\n                // System message data\r\n                val message = Message(\r\n                    \"system\",\r\n                    buildSystemMessage(keygen),\r\n                    Timestamp.now(),\r\n                    \"\"\r\n\r\n                )\r\n\r\n                val user = HashMap<String, Any>()\r\n                val admin = hashMapOf<String?, Any>(\r\n                    \"admin\" to true\r\n                )\r\n\r\n                db.collection(\"chat\")\r\n                    .add(chat.toHash())\r\n                    .addOnSuccessListener { documentReference ->\r\n                        db.collection(\"chat\")\r\n                            .document(documentReference.id)\r\n                            .collection(\"message\")\r\n                            .add(message.toHash())\r\n                        for (member in memberIds) {\r\n                            db.collection(\"profile\")\r\n                                .document(member)\r\n                                .collection(\"chat\")\r\n                                .document(documentReference.id)\r\n                                .set(chat)\r\n                            db.collection(\"chat\")\r\n                                .document(documentReference.id)\r\n                                .collection(\"user\")\r\n                                .document(member)\r\n                                .set(user)\r\n                            if (member == Firebase.auth.currentUser!!.uid) {\r\n                                db.collection(\"chat\")\r\n                                    .document(documentReference.id)\r\n                                    .collection(\"user\")\r\n                                    .document(member)\r\n                                    .update(admin)\r\n                            }\r\n                            if (uri != Uri.EMPTY)\r\n                                Utilis.uploadFile(uri, \"chats/${documentReference.id}/icon.png\")\r\n\r\n                        }\r\n\r\n                    }\r\n                    .addOnFailureListener { e ->\r\n                        Log.w(ContentValues.TAG, \"Error adding document\", e)\r\n                    }\r\n\r\n                val intent = Intent(this, DrawerActivty::class.java)\r\n                startActivity(intent)\r\n\r\n            }\r\n\r\n    }\r\n    /*\r\n       This function happen after picking photo, and make changes in the activity\r\n    */\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n\r\n        if(requestCode == IMAGE_REQUEST_CODE && resultCode == RESULT_OK){\r\n            CropImage.activity(data?.data)\r\n                .setGuidelines(CropImageView.Guidelines.ON)\r\n                .setAspectRatio(1,1)\r\n                .start(this)\r\n        }\r\n\r\n        if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {\r\n            val result = CropImage.getActivityResult(data)\r\n            if (resultCode == RESULT_OK) {\r\n                binding.imageViewChatPhoto.setImageURI(result.uri)\r\n                uri = result.uri\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n       This function create the action bar above the activity\r\n    */\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        val inflater: MenuInflater = menuInflater\r\n        inflater.inflate(R.menu.menu_chat, menu)\r\n        supportActionBar?.setDisplayHomeAsUpEnabled(true)\r\n        supportActionBar?.setHomeAsUpIndicator(R.drawable.ic_arrow_back_24)\r\n\r\n\r\n        return true\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/singularity/ipcaplus/chat/CreateChatActivity.kt b/app/src/main/java/com/singularity/ipcaplus/chat/CreateChatActivity.kt
---- a/app/src/main/java/com/singularity/ipcaplus/chat/CreateChatActivity.kt	(revision 5fa09412663837672a36a41fd04f1700573c5f37)
-+++ b/app/src/main/java/com/singularity/ipcaplus/chat/CreateChatActivity.kt	(date 1642084878652)
-@@ -9,11 +9,14 @@
- import android.view.Menu
- import android.view.MenuInflater
- import android.widget.ImageView
-+import android.widget.TextView
-+import androidx.appcompat.app.ActionBar
- import com.google.firebase.Timestamp
- import com.google.firebase.auth.ktx.auth
- import com.google.firebase.firestore.ktx.firestore
- import com.google.firebase.ktx.Firebase
- import com.singularity.ipcaplus.R
-+import com.singularity.ipcaplus.cryptography.generateRandomIV
- import com.singularity.ipcaplus.cryptography.metaGenrateKey
- import com.singularity.ipcaplus.databinding.ActivityCreateChatBinding
- import com.singularity.ipcaplus.drawer.DrawerActivty
-@@ -25,20 +28,33 @@
- import com.singularity.ipcaplus.utils.Utilis.buildSystemMessage
- import com.theartofdev.edmodo.cropper.CropImage
- import com.theartofdev.edmodo.cropper.CropImageView
-+import kotlinx.coroutines.Dispatchers
-+import kotlinx.coroutines.GlobalScope
-+import kotlinx.coroutines.launch
-+import kotlinx.coroutines.withContext
- 
- class CreateChatActivity : ActivityImageHelper() {
- 
-     // Variables
-     private lateinit var binding: ActivityCreateChatBinding
-     var uri = Uri.EMPTY
--
-     val db = Firebase.firestore
-+    var noteKey : String = ""
-+
-     override fun onCreate(savedInstanceState: Bundle?) {
-         super.onCreate(savedInstanceState)
-         setContentView(R.layout.activity_create_chat)
- 
-         binding = ActivityCreateChatBinding.inflate(layoutInflater)
-         setContentView(binding.root)
-+        supportActionBar?.displayOptions = ActionBar.DISPLAY_SHOW_CUSTOM
-+        supportActionBar?.setCustomView(R.layout.custom_bar_layout)
-+        var tokens_adress = arrayListOf<String>()
-+        findViewById<TextView>(R.id.AppBarTittle).text = "Novo Grupo"
-+        // Back button
-+        findViewById<ImageView>(R.id.BackButtonImageView).setOnClickListener{
-+            finish()
-+        }
- 
-         // Variables
-         var chatName : String
-@@ -49,6 +65,25 @@
-         // Generate key for chats
-         val keygen = metaGenrateKey()
- 
-+        for (memberId in memberIds){
-+
-+            // Getting all of tokens of  profile associated devices
-+            Backend.getAllTokens(memberId) {
-+                if (tokens_adress.isEmpty()){
-+                    tokens_adress.clear()
-+                }
-+                tokens_adress.addAll(it)
-+
-+                GlobalScope.launch {
-+                    withContext(Dispatchers.IO){
-+                        noteKey = Utilis.createNotificationGroup(generateRandomIV(), Backend.createJsonArrayString(tokens_adress))
-+                    }
-+                }
-+
-+            }
-+
-+        }
-+
-         binding.imageViewChatPhoto.setOnClickListener {
-             checkPermission(android.Manifest.permission.READ_EXTERNAL_STORAGE, STORAGE_PERMISSION_CODE)
-         }
-@@ -59,18 +94,21 @@
- 
- 
-                 chatName = binding.editTextChatName.text.toString()
-+                val ivGenerated = generateRandomIV()
- 
-                 // Chat data
-                 val chat = Chat(
-                     chatName,
-                     type.toString(),
--                    keygen
-+                    keygen,
-+                    ivGenerated,
-+                    noteKey
-                 )
- 
-                 // System message data
-                 val message = Message(
-                     "system",
--                    buildSystemMessage(keygen),
-+                    buildSystemMessage(keygen, ivGenerated),
-                     Timestamp.now(),
-                     ""
- 
-@@ -144,17 +182,4 @@
-             }
-         }
-     }
--
--    /*
--       This function create the action bar above the activity
--    */
--    override fun onCreateOptionsMenu(menu: Menu): Boolean {
--        val inflater: MenuInflater = menuInflater
--        inflater.inflate(R.menu.menu_chat, menu)
--        supportActionBar?.setDisplayHomeAsUpEnabled(true)
--        supportActionBar?.setHomeAsUpIndicator(R.drawable.ic_arrow_back_24)
--
--
--        return true
--    }
- }
-\ No newline at end of file
-Index: app/src/main/java/com/singularity/ipcaplus/models/Chat.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.singularity.ipcaplus.models\r\n\r\nimport com.google.firebase.firestore.QueryDocumentSnapshot\r\n\r\nclass Chat {\r\n    var name : String = \"\"\r\n    var type : String = \"\"\r\n    var ox : String? = \"\"\r\n    var id : String? =  null\r\n\r\n    constructor(name : String, type : String, ox : String) {\r\n        this.name = name\r\n        this.type = type\r\n        this.ox = ox\r\n    }\r\n\r\n    fun toHash() :HashMap<String, Any> {\r\n        var hashMap = HashMap<String, Any>()\r\n        hashMap.put(\"name\", name)\r\n        hashMap.put(\"type\", type)\r\n        hashMap.put(\"ox\", ox!!)\r\n        return hashMap\r\n    }\r\n\r\n    companion object {\r\n        fun fromHash(hashMap: QueryDocumentSnapshot) : Chat {\r\n            val chat = Chat(\r\n                hashMap[\"name\"] as String,\r\n                hashMap[\"type\"] as String,\r\n                hashMap[\"ox\"] as String\r\n            )\r\n            return chat\r\n        }\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/singularity/ipcaplus/models/Chat.kt b/app/src/main/java/com/singularity/ipcaplus/models/Chat.kt
---- a/app/src/main/java/com/singularity/ipcaplus/models/Chat.kt	(revision 5fa09412663837672a36a41fd04f1700573c5f37)
-+++ b/app/src/main/java/com/singularity/ipcaplus/models/Chat.kt	(date 1642080867530)
-@@ -7,11 +7,15 @@
-     var type : String = ""
-     var ox : String? = ""
-     var id : String? =  null
-+    var iv : String? = ""
-+    var notificationKey : String? = ""
- 
--    constructor(name : String, type : String, ox : String) {
-+    constructor(name : String, type : String, ox : String, iv : String, notificationKey : String) {
-         this.name = name
-         this.type = type
-         this.ox = ox
-+        this.iv = iv
-+        this.notificationKey = notificationKey
-     }
- 
-     fun toHash() :HashMap<String, Any> {
-@@ -19,6 +23,8 @@
-         hashMap.put("name", name)
-         hashMap.put("type", type)
-         hashMap.put("ox", ox!!)
-+        hashMap.put("iv", iv!!)
-+        hashMap.put("notificationKey", notificationKey!!)
-         return hashMap
-     }
- 
-@@ -27,7 +33,10 @@
-             val chat = Chat(
-                 hashMap["name"] as String,
-                 hashMap["type"] as String,
--                hashMap["ox"] as String
-+                hashMap["ox"] as String,
-+                hashMap["iv"] as String,
-+                hashMap["notificationKey"] as String
-+
-             )
-             return chat
-         }
-Index: app/src/main/java/com/singularity/ipcaplus/chat/ChatActivity.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.singularity.ipcaplus.chat\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.app.ActionBar\r\nimport android.content.ContentValues.TAG\r\nimport android.content.Intent\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.*\r\nimport android.widget.ImageView\r\nimport android.widget.TextView\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.view.isVisible\r\nimport androidx.recyclerview.widget.DefaultItemAnimator\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.google.firebase.Timestamp\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.Query\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.drawer.CalendarActivity\r\nimport com.singularity.ipcaplus.R\r\nimport com.singularity.ipcaplus.utils.Utilis\r\nimport com.singularity.ipcaplus.cryptography.decryptWithAESmeta\r\nimport com.singularity.ipcaplus.cryptography.encryptMeta\r\nimport com.singularity.ipcaplus.cryptography.getMetaOx\r\nimport com.singularity.ipcaplus.databinding.ActivityChatBinding\r\nimport com.singularity.ipcaplus.models.Chat\r\nimport com.singularity.ipcaplus.models.Message\r\nimport com.singularity.ipcaplus.utils.Backend\r\nimport com.singularity.ipcaplus.utils.Backend.createJsonArrayString\r\nimport kotlinx.coroutines.*\r\nimport org.json.JSONArray\r\nimport org.json.JSONObject\r\nimport java.io.BufferedOutputStream\r\nimport java.io.BufferedWriter\r\nimport java.io.OutputStream\r\nimport java.io.OutputStreamWriter\r\nimport java.net.URL\r\nimport java.time.LocalDateTime\r\nimport java.time.format.DateTimeFormatter\r\nimport javax.net.ssl.HttpsURLConnection\r\n\r\nclass ChatActivity : AppCompatActivity() {\r\n\r\n    var messages = arrayListOf<Message>()\r\n    var currentUserIsAdmin = false\r\n    private lateinit var binding: ActivityChatBinding\r\n    private lateinit var chat_id : String\r\n    var tokens_adress = arrayListOf<String>()\r\n    var chat_user_uids = arrayListOf<String>()\r\n    private var mAdapter: RecyclerView.Adapter<*>? = null\r\n    private var mLayoutManager: LinearLayoutManager? = null\r\n\r\n    val db = Firebase.firestore\r\n    @SuppressLint(\"WrongConstant\")\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_chat)\r\n\r\n        binding = ActivityChatBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        supportActionBar?.displayOptions = ActionBar.DISPLAY_SHOW_CUSTOM\r\n        supportActionBar?.setCustomView(R.layout.appbar_custom_layout_chat)\r\n        findViewById<TextView>(R.id.AppBarTittle).text = \"Chat name\"\r\n        // Back button\r\n        findViewById<ImageView>(R.id.BackButtonImageView).setOnClickListener{\r\n            finish()\r\n        }\r\n\r\n        // Variables\r\n        chat_id = intent.getStringExtra(\"chat_id\").toString()\r\n        val current = LocalDateTime.now()\r\n\r\n        val formatter = DateTimeFormatter.BASIC_ISO_DATE\r\n        val formatted = current.format(formatter)\r\n\r\n        // Check if user is admin\r\n        Backend.getChatAdminIds(chat_id) {\r\n            val currentUser = Firebase.auth.currentUser!!.uid\r\n            for (admin in it) {\r\n                if (admin == currentUser)\r\n                    currentUserIsAdmin = true\r\n            }\r\n        }\r\n\r\n        // Get all members id of chat\r\n        Backend.getChatUsersUids(chat_id){\r\n            chat_user_uids.clear()\r\n            chat_user_uids.addAll(it)\r\n\r\n            for (userId in chat_user_uids){\r\n                // Getting all of tokens of  profile associated devices\r\n                Backend.getAllTokens(userId) {\r\n                    if (tokens_adress.isEmpty()){\r\n                        tokens_adress.clear()\r\n                    }\r\n                    tokens_adress.addAll(it)\r\n\r\n                    /*GlobalScope.launch {\r\n                        withContext(Dispatchers.IO){\r\n                            createNotificationGroup(\"grupotrablahotentativa\", createJsonArrayString(tokens_adress))\r\n                        }\r\n                    }*/\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n        val profilePicfromTop = findViewById<ImageView>(R.id.ProfileImageView)\r\n        Utilis.getFile(this, \"chats/$chat_id/icon.png\", \"png\") { bitmap ->\r\n            profilePicfromTop.setImageBitmap(bitmap)\r\n        }\r\n\r\n        println(\"Current Date is: $formatted\")\r\n\r\n        // Send Message\r\n        binding.fabSend.setOnClickListener {\r\n            if(!binding.editTextMessage.text.isNullOrBlank()) {\r\n                // get data of ecripted shared preferences (\"chatuid\" -> \"key\")\r\n                val keygen = getMetaOx(this, chat_id)\r\n                // Build encryptation data of message send by the user\r\n                var meta = encryptMeta( binding.editTextMessage.text.toString(), keygen.toString())\r\n                val savedText = binding.editTextMessage.text.toString()\r\n\r\n                val message = Message(\r\n                    Firebase.auth.currentUser!!.uid,\r\n                    meta.toString(),\r\n                    Timestamp.now(),\r\n                    \"\"\r\n\r\n                )\r\n                db.collection(\"chat\").document(\"$chat_id\").collection(\"message\")\r\n                    .add(message.toHash())\r\n                    .addOnSuccessListener { documentReference ->\r\n\r\n                        GlobalScope.launch {\r\n                            withContext(Dispatchers.IO){\r\n                                //APA91bEKDInIYA242YofpahBmhB57pEI4gNT63DJJenWCccJGqeSYrWzj0BSruX49DhVp2vGSY5xJ2fEJk2vhtoraT3_bbjEKw4Nx3eJKj7tttVRPjQs0Uc_OPkrcj4twR70H5tAilnY\r\n                                println(\"AVEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\"+ savedText)\r\n                                sendNotificationToGroup( chat_id, savedText, \"APA91bGaOoMTjTD2s9MU63F1AvLqP6tkwdAFE0Mqs9jbghlSgcWlfe_38CboFiE2iiWFoKqNRwhF0G_TA5X9xegTL0_Tg0OGuFadJuBj1sGZqjqCcmF1EH2ZeRU7ySHosdNkmLmmOyFF\")\r\n                            }\r\n                        }\r\n                        Log.d(TAG, \"DocumentSnapshot added with ID: ${documentReference.id}\")\r\n\r\n\r\n                    }\r\n                    .addOnFailureListener { e ->\r\n                        Log.w(TAG, \"Error adding document\", e)\r\n                    }\r\n                binding.editTextMessage.text.clear()\r\n\r\n            }\r\n        }\r\n\r\n        // Show Messages\r\n        db.collection(\"chat\").document(\"$chat_id\").collection(\"message\").orderBy(\"time\", Query.Direction.DESCENDING)\r\n            .addSnapshotListener { documents, e ->\r\n\r\n                documents?.let {\r\n                    messages.clear()\r\n                    for (document in it) {\r\n                        Log.d(TAG, \"${document.id} => ${document.data}\")\r\n                        val message = Message.fromHash(document)\r\n                        messages.add(message)\r\n\r\n                    }\r\n                    mAdapter?.notifyDataSetChanged()\r\n                }\r\n\r\n            }\r\n\r\n        // Recycler View Messages\r\n        mLayoutManager = LinearLayoutManager(this, LinearLayoutManager.VERTICAL, false)\r\n        binding.recycleViewChat.layoutManager = mLayoutManager\r\n        mAdapter = MessageAdapter()\r\n        binding.recycleViewChat.itemAnimator = DefaultItemAnimator()\r\n        binding.recycleViewChat.adapter = mAdapter\r\n\r\n        mLayoutManager!!.reverseLayout = true\r\n\r\n    }\r\n\r\n    /*\r\n       This function create the action bar above the activity\r\n    */\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        val inflater: MenuInflater = menuInflater\r\n        inflater.inflate(R.menu.menu_chat, menu)\r\n\r\n        db.collection(\"profile\")\r\n            .document(Firebase.auth.currentUser!!.uid)\r\n            .collection(\"chat\")\r\n            .addSnapshotListener { documents, e ->\r\n                documents?.let {\r\n                    for (document in it) {\r\n                        if(document.id == chat_id) {\r\n                            val chat = Chat.fromHash(document)\r\n                            var name = chat.name\r\n                            if (chat.type == \"chat\") {\r\n                                name  = Utilis.getFirstAndLastName(chat.name)\r\n                            }\r\n                            //supportActionBar?.title = chat.name\r\n                            findViewById<TextView>(R.id.AppBarTittle).text = name\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n        return true\r\n    }\r\n\r\n\r\n    /*\r\n        This function define the events of the action bar buttons\r\n     */\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        super.onOptionsItemSelected(item)\r\n\r\n        when (item.itemId){\r\n            R.id.calendario -> {\r\n                val intent = Intent(this, CalendarActivity::class.java)\r\n                intent.putExtra(\"chat_id\", chat_id)\r\n                intent.putExtra(\"is_admin\", currentUserIsAdmin)\r\n                startActivity(intent)\r\n                return true\r\n            }\r\n            R.id.chatMore -> {\r\n                val intent = Intent(this, ChatMoreActivity::class.java)\r\n                intent.putExtra(\"chat_id\", chat_id)\r\n                println(\"3------------------------------ \" + currentUserIsAdmin)\r\n                intent.putExtra(\"is_admin\", currentUserIsAdmin)\r\n                intent.putExtra(\"chat_name\",  findViewById<TextView>(R.id.AppBarTittle).text.toString())\r\n                startActivity(intent)\r\n                return true\r\n            }\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n\r\n    // When the support action bar back button is pressed, the app will go back to the previous activity\r\n    override fun onSupportNavigateUp(): Boolean {\r\n        onBackPressed()\r\n        return true\r\n    }\r\n\r\n\r\n    inner class MessageAdapter : RecyclerView.Adapter<MessageAdapter.ViewHolder>() {\r\n\r\n        inner class ViewHolder(val v: View) : RecyclerView.ViewHolder(v)\r\n\r\n        var otherUser = false\r\n\r\n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n            if(viewType == 1) {\r\n                otherUser = false\r\n                return ViewHolder(\r\n                    LayoutInflater.from(parent.context).inflate(R.layout.row_message_self, parent, false))\r\n            } else if (viewType == 2){\r\n                otherUser = false\r\n                return ViewHolder(\r\n                    LayoutInflater.from(parent.context).inflate(R.layout.row_message_system, parent, false))\r\n            } else {\r\n                otherUser = true\r\n                return ViewHolder(\r\n                    LayoutInflater.from(parent.context).inflate(R.layout.row_message_others, parent, false))\r\n            }\r\n\r\n        }\r\n\r\n        @RequiresApi(Build.VERSION_CODES.M)\r\n         override fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n\r\n\r\n            holder.v.apply {\r\n\r\n                val textViewMessage = findViewById<TextView>(R.id.textViewMessage)\r\n                val timeLastMessage = findViewById<TextView?>(R.id.timeLastMessage)\r\n                val textViewUsername = findViewById<TextView?>(R.id.textViewUsername)\r\n\r\n\r\n                timeLastMessage?.isVisible = false\r\n                val keygen = getMetaOx(context, chat_id)\r\n                val message_decripted = decryptWithAESmeta(keygen.toString(), messages[position].message)\r\n\r\n               /* if (otherUser) {\r\n                        Backend.getUserProfile(messages[position].user) {\r\n                            val userName = Utilis.getFirstAndLastName(it.name)\r\n                            textViewUsername.text = userName\r\n                        }\r\n                    }\r\n                */\r\n\r\n                textViewMessage.text = message_decripted\r\n                println(message_decripted)\r\n                if(position == messages.size - 1) {\r\n                    val data = Utilis.getDate(\r\n                        messages[position].time.seconds * 1000,\r\n                        \"yyyy-MM-dd'T'HH:mm:ss.SSS\"\r\n                    )\r\n                    timeLastMessage.isVisible = true\r\n                    timeLastMessage.text = Utilis.getHours(data) + \":\" + Utilis.getMinutes(data)\r\n                }\r\n\r\n                if (otherUser) {\r\n                    val imageViewUser = findViewById<ImageView?>(R.id.imageViewUser)\r\n                    if (imageViewUser != null) {\r\n                        Utilis.getFile(context, \"profilePictures/${messages[position].user}.png\", \"png\") { bitmap ->\r\n                            imageViewUser.setImageBitmap(bitmap)\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        override fun getItemViewType(position: Int) : Int {\r\n            if (messages[position].user == Firebase.auth.currentUser!!.uid) {\r\n                return 1\r\n            } else if (messages[position].user == \"system\"){\r\n                return 2\r\n            } else {\r\n                return 0\r\n            }\r\n        }\r\n\r\n        override fun getItemCount(): Int {\r\n            return messages.size\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    private suspend fun  createNotificationGroup(notificationKeyName : String, registrationIds : JSONArray)  {\r\n\r\n        try {\r\n\r\n            Log.d(\"json\", registrationIds.toString())\r\n\r\n            //Request\r\n            val endPoint = URL(\"https://fcm.googleapis.com/fcm/notification\")\r\n\r\n            //Establish a connection\r\n            val httpsURLConnection: HttpsURLConnection =\r\n                endPoint.openConnection() as HttpsURLConnection\r\n\r\n            //Connection to fcm\r\n            //The time available to read from the input stream when the connection is established\r\n            httpsURLConnection.readTimeout = 10000\r\n            //The time available to connect to the url\r\n            httpsURLConnection.connectTimeout = 15000\r\n            //Defining the type of request to be made to the fcm\r\n            httpsURLConnection.requestMethod = \"POST\"\r\n            //Defining that the url connection can be used to send and receive data\r\n            httpsURLConnection.doInput = true\r\n            httpsURLConnection.doOutput = true\r\n\r\n            // Build parameters for json\r\n            httpsURLConnection.setRequestProperty(\"Content-Type\", \"application/json\")\r\n            val project_key = \"AAAAMMR-Gaw:APA91bFeijRa909_QEdEFsQeDSaJZRYD7rOk8B8Bc2QiYcGoyLG1xqqpZLkOJXmZrG0FbScojvqBCsweSEWDrMLM6kr67boS-BVB2oy7fL6Zn1N9ICVk6efGniauDa3z8eaOb1TENmEs\"\r\n            val senderId = \"209455028652\"\r\n            httpsURLConnection.setRequestProperty(\"authorization\", \"key=$project_key\")\r\n            httpsURLConnection.setRequestProperty(\"project_id\", senderId)\r\n\r\n            val json = JSONObject()\r\n\r\n            json.put(\"operation\", \"create\")\r\n            json.put(\"notification_key_name\", notificationKeyName)\r\n            json.put(\"registration_ids\", registrationIds)\r\n\r\n\r\n            // Writer\r\n            val outputStream: OutputStream =\r\n                BufferedOutputStream(httpsURLConnection.outputStream)\r\n            val writer = BufferedWriter(OutputStreamWriter(outputStream, \"utf-8\"))\r\n\r\n            // POST\r\n            writer.write(json.toString())\r\n            writer.flush()\r\n            writer.close()\r\n\r\n            outputStream.close()\r\n\r\n            //The response code and message of the POST requests\r\n            val responseCode: Int = httpsURLConnection.responseCode\r\n            val responseMessage = httpsURLConnection.responseMessage\r\n\r\n            Log.d(TAG, \"$responseCode $responseMessage\")\r\n\r\n\r\n            // Check server STATUS\r\n            if (responseCode in 400..499) {\r\n                httpsURLConnection.errorStream\r\n            } else {\r\n                httpsURLConnection.inputStream\r\n            }\r\n\r\n            if (responseCode == 200) {\r\n                Log.e(TAG, \"Group Created!!\")\r\n\r\n                val response = httpsURLConnection.inputStream.bufferedReader()\r\n                    .use { it.readText() }  // defaults to UTF-8\r\n                withContext(Dispatchers.Main) {\r\n                    //notification_key\r\n                    val jsonObject  = JSONObject(response)\r\n                    val notificationKey = jsonObject.getString(\"notification_key\")\r\n                    println(\"NotifKey: $notificationKey\")\r\n                    Log.d(\"NotifKey\", notificationKey)\r\n                }\r\n            } else {\r\n                Log.e(TAG, \"Error it didn´t work\")\r\n            }\r\n\r\n            //Here i close the connection to the endPoint\r\n            httpsURLConnection.disconnect()\r\n\r\n\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    //This function sends push notifications to devices that are subscribed to a specific topic\r\n    private suspend fun sendNotificationToGroup(title: String, message: String, notificationKey : String) {\r\n\r\n        delay(1500)\r\n\r\n        try {\r\n\r\n            //Request\r\n            val url = URL(\"https://fcm.googleapis.com/fcm/send\")\r\n\r\n            //Establish a connection\r\n            val httpsURLConnection: HttpsURLConnection =\r\n                url.openConnection() as HttpsURLConnection\r\n\r\n            //The time available to read from the input stream when the connection is established\r\n            httpsURLConnection.readTimeout = 10000\r\n            //The time available to connect to the url\r\n            httpsURLConnection.connectTimeout = 15000\r\n            //Defining the type of request to be made to the fcm\r\n            httpsURLConnection.requestMethod = \"POST\"\r\n            //Defining that the url connection can be used to send and receive data\r\n            httpsURLConnection.doInput = true\r\n            httpsURLConnection.doOutput = true\r\n\r\n            // Config of FCM\r\n            val project_key = \"AAAAMMR-Gaw:APA91bFeijRa909_QEdEFsQeDSaJZRYD7rOk8B8Bc2QiYcGoyLG1xqqpZLkOJXmZrG0FbScojvqBCsweSEWDrMLM6kr67boS-BVB2oy7fL6Zn1N9ICVk6efGniauDa3z8eaOb1TENmEs\"\r\n            httpsURLConnection.setRequestProperty(\"authorization\", \"key=$project_key\")\r\n            httpsURLConnection.setRequestProperty(\"Content-Type\", \"application/json\")\r\n\r\n            val jsonObject = JSONObject()\r\n            val data = JSONObject()\r\n\r\n            data.put(\"title\", title)\r\n            data.put(\"content\", message)\r\n            //On Notification Click Activity\r\n            data.put(\"click_action\", \".LoginActivity\")\r\n\r\n            //jsonObject for POST\r\n            jsonObject.put(\"data\", data)\r\n            //\r\n            jsonObject.put(\"to\", notificationKey)\r\n\r\n            val outputStream: OutputStream =\r\n                BufferedOutputStream(httpsURLConnection.outputStream)\r\n            val writer = BufferedWriter(OutputStreamWriter(outputStream, \"utf-8\"))\r\n            \r\n            writer.write(jsonObject.toString())\r\n            writer.flush()\r\n            writer.close()\r\n\r\n            outputStream.close()\r\n\r\n            //The response code and message of the POST requests\r\n            val responseCode: Int = httpsURLConnection.responseCode\r\n            val responseMessage: String = httpsURLConnection.responseMessage\r\n\r\n\r\n            Log.d(TAG, \"Response from sendMes: $responseCode $responseMessage\")\r\n\r\n\r\n            // Check server STATUS\r\n            if (responseCode in 400..499) {\r\n                httpsURLConnection.errorStream\r\n            } else {\r\n                httpsURLConnection.inputStream\r\n            }\r\n            if (responseCode == 200) {\r\n                Log.e(\r\n                    TAG,\r\n                    \"Notification Sent \\n Title: $title \\n Body: $message\"\r\n                )\r\n            } else {\r\n                Log.e(TAG, \"Notification Error\")\r\n            }\r\n\r\n            httpsURLConnection.disconnect()\r\n\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/singularity/ipcaplus/chat/ChatActivity.kt b/app/src/main/java/com/singularity/ipcaplus/chat/ChatActivity.kt
---- a/app/src/main/java/com/singularity/ipcaplus/chat/ChatActivity.kt	(revision 5fa09412663837672a36a41fd04f1700573c5f37)
-+++ b/app/src/main/java/com/singularity/ipcaplus/chat/ChatActivity.kt	(date 1642084049841)
-@@ -32,6 +32,9 @@
- import com.singularity.ipcaplus.models.Message
- import com.singularity.ipcaplus.utils.Backend
- import com.singularity.ipcaplus.utils.Backend.createJsonArrayString
-+import com.singularity.ipcaplus.utils.Backend.getIv
-+import com.singularity.ipcaplus.utils.Backend.getNotificationKey
-+import com.singularity.ipcaplus.utils.Utilis.sendNotificationToGroup
- import kotlinx.coroutines.*
- import org.json.JSONArray
- import org.json.JSONObject
-@@ -89,30 +92,7 @@
-             }
-         }
- 
--        // Get all members id of chat
--        Backend.getChatUsersUids(chat_id){
--            chat_user_uids.clear()
--            chat_user_uids.addAll(it)
--
--            for (userId in chat_user_uids){
--                // Getting all of tokens of  profile associated devices
--                Backend.getAllTokens(userId) {
--                    if (tokens_adress.isEmpty()){
--                        tokens_adress.clear()
--                    }
--                    tokens_adress.addAll(it)
--
--                    /*GlobalScope.launch {
--                        withContext(Dispatchers.IO){
--                            createNotificationGroup("grupotrablahotentativa", createJsonArrayString(tokens_adress))
--                        }
--                    }*/
--
--                }
- 
--            }
--
--        }
-         val profilePicfromTop = findViewById<ImageView>(R.id.ProfileImageView)
-         Utilis.getFile(this, "chats/$chat_id/icon.png", "png") { bitmap ->
-             profilePicfromTop.setImageBitmap(bitmap)
-@@ -126,39 +106,50 @@
-                 // get data of ecripted shared preferences ("chatuid" -> "key")
-                 val keygen = getMetaOx(this, chat_id)
-                 // Build encryptation data of message send by the user
--                var meta = encryptMeta( binding.editTextMessage.text.toString(), keygen.toString())
--                val savedText = binding.editTextMessage.text.toString()
-+                getIv(chat_id) {
-+
-+                    var meta = encryptMeta( binding.editTextMessage.text.toString(), keygen.toString(), it.toString())
-+                    val savedText = binding.editTextMessage.text.toString()
- 
--                val message = Message(
--                    Firebase.auth.currentUser!!.uid,
--                    meta.toString(),
--                    Timestamp.now(),
--                    ""
-+                    val message = Message(
-+                        Firebase.auth.currentUser!!.uid,
-+                        meta.toString(),
-+                        Timestamp.now(),
-+                        ""
- 
--                )
--                db.collection("chat").document("$chat_id").collection("message")
--                    .add(message.toHash())
--                    .addOnSuccessListener { documentReference ->
-+                    )
-+                    db.collection("chat").document("$chat_id").collection("message")
-+                        .add(message.toHash())
-+                        .addOnSuccessListener { documentReference ->
- 
--                        GlobalScope.launch {
--                            withContext(Dispatchers.IO){
--                                //APA91bEKDInIYA242YofpahBmhB57pEI4gNT63DJJenWCccJGqeSYrWzj0BSruX49DhVp2vGSY5xJ2fEJk2vhtoraT3_bbjEKw4Nx3eJKj7tttVRPjQs0Uc_OPkrcj4twR70H5tAilnY
--                                println("AVEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE"+ savedText)
--                                sendNotificationToGroup( chat_id, savedText, "APA91bGaOoMTjTD2s9MU63F1AvLqP6tkwdAFE0Mqs9jbghlSgcWlfe_38CboFiE2iiWFoKqNRwhF0G_TA5X9xegTL0_Tg0OGuFadJuBj1sGZqjqCcmF1EH2ZeRU7ySHosdNkmLmmOyFF")
--                            }
--                        }
--                        Log.d(TAG, "DocumentSnapshot added with ID: ${documentReference.id}")
-+                            GlobalScope.launch {
-+                                withContext(Dispatchers.IO){
-+                                    //APA91bEKDInIYA242YofpahBmhB57pEI4gNT63DJJenWCccJGqeSYrWzj0BSruX49DhVp2vGSY5xJ2fEJk2vhtoraT3_bbjEKw4Nx3eJKj7tttVRPjQs0Uc_OPkrcj4twR70H5tAilnY
-+                                    // APA91bGaOoMTjTD2s9MU63F1AvLqP6tkwdAFE0Mqs9jbghlSgcWlfe_38CboFiE2iiWFoKqNRwhF0G_TA5X9xegTL0_Tg0OGuFadJuBj1sGZqjqCcmF1EH2ZeRU7ySHosdNkmLmmOyFF
-+                                    println("AVEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE"+ savedText)
-+                                    getNotificationKey(chat_id){
-+                                        GlobalScope.launch {
-+                                            withContext(Dispatchers.IO){
-+                                                sendNotificationToGroup( chat_id, savedText, it.toString())
-+                                            }
-+                                        }
-+                                    }
-+                                }
-+                            }
-+                            Log.d(TAG, "DocumentSnapshot added with ID: ${documentReference.id}")
- 
- 
--                    }
--                    .addOnFailureListener { e ->
--                        Log.w(TAG, "Error adding document", e)
--                    }
--                binding.editTextMessage.text.clear()
-+                        }
-+                        .addOnFailureListener { e ->
-+                            Log.w(TAG, "Error adding document", e)
-+                        }
-+                    binding.editTextMessage.text.clear()
- 
--            }
--        }
-+                }
-+            }
- 
-+        }
-+
-         // Show Messages
-         db.collection("chat").document("$chat_id").collection("message").orderBy("time", Query.Direction.DESCENDING)
-             .addSnapshotListener { documents, e ->
-@@ -290,32 +281,34 @@
- 
-                 timeLastMessage?.isVisible = false
-                 val keygen = getMetaOx(context, chat_id)
--                val message_decripted = decryptWithAESmeta(keygen.toString(), messages[position].message)
-+                getIv(chat_id){
-+                    val message_decripted = decryptWithAESmeta(keygen.toString(), messages[position].message, it.toString())
- 
--               /* if (otherUser) {
--                        Backend.getUserProfile(messages[position].user) {
--                            val userName = Utilis.getFirstAndLastName(it.name)
--                            textViewUsername.text = userName
--                        }
--                    }
--                */
-+                    /* if (otherUser) {
-+                             Backend.getUserProfile(messages[position].user) {
-+                                 val userName = Utilis.getFirstAndLastName(it.name)
-+                                 textViewUsername.text = userName
-+                             }
-+                         }
-+                     */
- 
--                textViewMessage.text = message_decripted
--                println(message_decripted)
--                if(position == messages.size - 1) {
--                    val data = Utilis.getDate(
--                        messages[position].time.seconds * 1000,
--                        "yyyy-MM-dd'T'HH:mm:ss.SSS"
--                    )
--                    timeLastMessage.isVisible = true
--                    timeLastMessage.text = Utilis.getHours(data) + ":" + Utilis.getMinutes(data)
--                }
-+                    textViewMessage.text = message_decripted
-+                    println(message_decripted)
-+                    if(position == messages.size - 1) {
-+                        val data = Utilis.getDate(
-+                            messages[position].time.seconds * 1000,
-+                            "yyyy-MM-dd'T'HH:mm:ss.SSS"
-+                        )
-+                        timeLastMessage.isVisible = true
-+                        timeLastMessage.text = Utilis.getHours(data) + ":" + Utilis.getMinutes(data)
-+                    }
- 
--                if (otherUser) {
--                    val imageViewUser = findViewById<ImageView?>(R.id.imageViewUser)
--                    if (imageViewUser != null) {
--                        Utilis.getFile(context, "profilePictures/${messages[position].user}.png", "png") { bitmap ->
--                            imageViewUser.setImageBitmap(bitmap)
-+                    if (otherUser) {
-+                        val imageViewUser = findViewById<ImageView?>(R.id.imageViewUser)
-+                        if (imageViewUser != null) {
-+                            Utilis.getFile(context, "profilePictures/${messages[position].user}.png", "png") { bitmap ->
-+                                imageViewUser.setImageBitmap(bitmap)
-+                            }
-                         }
-                     }
-                 }
-@@ -340,175 +333,4 @@
- 
- 
-     }
--
--    private suspend fun  createNotificationGroup(notificationKeyName : String, registrationIds : JSONArray)  {
--
--        try {
--
--            Log.d("json", registrationIds.toString())
--
--            //Request
--            val endPoint = URL("https://fcm.googleapis.com/fcm/notification")
--
--            //Establish a connection
--            val httpsURLConnection: HttpsURLConnection =
--                endPoint.openConnection() as HttpsURLConnection
--
--            //Connection to fcm
--            //The time available to read from the input stream when the connection is established
--            httpsURLConnection.readTimeout = 10000
--            //The time available to connect to the url
--            httpsURLConnection.connectTimeout = 15000
--            //Defining the type of request to be made to the fcm
--            httpsURLConnection.requestMethod = "POST"
--            //Defining that the url connection can be used to send and receive data
--            httpsURLConnection.doInput = true
--            httpsURLConnection.doOutput = true
--
--            // Build parameters for json
--            httpsURLConnection.setRequestProperty("Content-Type", "application/json")
--            val project_key = "AAAAMMR-Gaw:APA91bFeijRa909_QEdEFsQeDSaJZRYD7rOk8B8Bc2QiYcGoyLG1xqqpZLkOJXmZrG0FbScojvqBCsweSEWDrMLM6kr67boS-BVB2oy7fL6Zn1N9ICVk6efGniauDa3z8eaOb1TENmEs"
--            val senderId = "209455028652"
--            httpsURLConnection.setRequestProperty("authorization", "key=$project_key")
--            httpsURLConnection.setRequestProperty("project_id", senderId)
--
--            val json = JSONObject()
--
--            json.put("operation", "create")
--            json.put("notification_key_name", notificationKeyName)
--            json.put("registration_ids", registrationIds)
--
--
--            // Writer
--            val outputStream: OutputStream =
--                BufferedOutputStream(httpsURLConnection.outputStream)
--            val writer = BufferedWriter(OutputStreamWriter(outputStream, "utf-8"))
--
--            // POST
--            writer.write(json.toString())
--            writer.flush()
--            writer.close()
--
--            outputStream.close()
--
--            //The response code and message of the POST requests
--            val responseCode: Int = httpsURLConnection.responseCode
--            val responseMessage = httpsURLConnection.responseMessage
--
--            Log.d(TAG, "$responseCode $responseMessage")
--
--
--            // Check server STATUS
--            if (responseCode in 400..499) {
--                httpsURLConnection.errorStream
--            } else {
--                httpsURLConnection.inputStream
--            }
--
--            if (responseCode == 200) {
--                Log.e(TAG, "Group Created!!")
--
--                val response = httpsURLConnection.inputStream.bufferedReader()
--                    .use { it.readText() }  // defaults to UTF-8
--                withContext(Dispatchers.Main) {
--                    //notification_key
--                    val jsonObject  = JSONObject(response)
--                    val notificationKey = jsonObject.getString("notification_key")
--                    println("NotifKey: $notificationKey")
--                    Log.d("NotifKey", notificationKey)
--                }
--            } else {
--                Log.e(TAG, "Error it didn´t work")
--            }
--
--            //Here i close the connection to the endPoint
--            httpsURLConnection.disconnect()
--
--
--        } catch (e: Exception) {
--            e.printStackTrace()
--        }
--    }
--
--    //This function sends push notifications to devices that are subscribed to a specific topic
--    private suspend fun sendNotificationToGroup(title: String, message: String, notificationKey : String) {
--
--        delay(1500)
--
--        try {
--
--            //Request
--            val url = URL("https://fcm.googleapis.com/fcm/send")
--
--            //Establish a connection
--            val httpsURLConnection: HttpsURLConnection =
--                url.openConnection() as HttpsURLConnection
--
--            //The time available to read from the input stream when the connection is established
--            httpsURLConnection.readTimeout = 10000
--            //The time available to connect to the url
--            httpsURLConnection.connectTimeout = 15000
--            //Defining the type of request to be made to the fcm
--            httpsURLConnection.requestMethod = "POST"
--            //Defining that the url connection can be used to send and receive data
--            httpsURLConnection.doInput = true
--            httpsURLConnection.doOutput = true
--
--            // Config of FCM
--            val project_key = "AAAAMMR-Gaw:APA91bFeijRa909_QEdEFsQeDSaJZRYD7rOk8B8Bc2QiYcGoyLG1xqqpZLkOJXmZrG0FbScojvqBCsweSEWDrMLM6kr67boS-BVB2oy7fL6Zn1N9ICVk6efGniauDa3z8eaOb1TENmEs"
--            httpsURLConnection.setRequestProperty("authorization", "key=$project_key")
--            httpsURLConnection.setRequestProperty("Content-Type", "application/json")
--
--            val jsonObject = JSONObject()
--            val data = JSONObject()
--
--            data.put("title", title)
--            data.put("content", message)
--            //On Notification Click Activity
--            data.put("click_action", ".LoginActivity")
--
--            //jsonObject for POST
--            jsonObject.put("data", data)
--            //
--            jsonObject.put("to", notificationKey)
--
--            val outputStream: OutputStream =
--                BufferedOutputStream(httpsURLConnection.outputStream)
--            val writer = BufferedWriter(OutputStreamWriter(outputStream, "utf-8"))
--            
--            writer.write(jsonObject.toString())
--            writer.flush()
--            writer.close()
--
--            outputStream.close()
--
--            //The response code and message of the POST requests
--            val responseCode: Int = httpsURLConnection.responseCode
--            val responseMessage: String = httpsURLConnection.responseMessage
--
--
--            Log.d(TAG, "Response from sendMes: $responseCode $responseMessage")
--
--
--            // Check server STATUS
--            if (responseCode in 400..499) {
--                httpsURLConnection.errorStream
--            } else {
--                httpsURLConnection.inputStream
--            }
--            if (responseCode == 200) {
--                Log.e(
--                    TAG,
--                    "Notification Sent \n Title: $title \n Body: $message"
--                )
--            } else {
--                Log.e(TAG, "Notification Error")
--            }
--
--            httpsURLConnection.disconnect()
--
--        } catch (e: Exception) {
--            e.printStackTrace()
--        }
--    }
- }
-\ No newline at end of file
-Index: app/src/main/java/com/singularity/ipcaplus/AddPeopleActivity.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.singularity.ipcaplus\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ImageView\r\nimport android.widget.TextView\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.recyclerview.widget.DefaultItemAnimator\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.chat.CreateChatActivity\r\nimport com.singularity.ipcaplus.databinding.ActivityAddPeopleBinding\r\nimport com.singularity.ipcaplus.models.Chat\r\nimport com.singularity.ipcaplus.models.Profile\r\nimport com.singularity.ipcaplus.utils.Backend\r\nimport com.singularity.ipcaplus.utils.Utilis\r\n\r\nclass AddPeopleActivity: AppCompatActivity() {\r\n\r\n    var users = arrayListOf<Profile>()\r\n    var selectedUsers = arrayListOf<Profile>()\r\n\r\n    private lateinit var binding: ActivityAddPeopleBinding\r\n\r\n    private var userAdapter: RecyclerView.Adapter<*>? = null\r\n    private var userSelectedAdapter: RecyclerView.Adapter<*>? = null\r\n\r\n    private var userLayoutManager: LinearLayoutManager? = null\r\n    private var userSelectedLayoutManager: LinearLayoutManager? = null\r\n\r\n\r\n    val db = Firebase.firestore\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_add_people)\r\n        binding = ActivityAddPeopleBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        binding.backBtn.setOnClickListener {\r\n            finish()\r\n        }\r\n\r\n        // Add people with a chat already created\r\n        if (intent.hasExtra(\"chat_id\")) {\r\n            val chat_id = intent.getStringExtra(\"chat_id\")\r\n            Backend.getAllUsersExceptChatUsers(chat_id!!) {\r\n                users.clear()\r\n                users.addAll(it)\r\n                userAdapter?.notifyDataSetChanged()\r\n            }\r\n\r\n            // Continue button\r\n            binding.fabCreateChat.setOnClickListener {\r\n\r\n                Backend.db.collection(\"chat\")\r\n                    .document(chat_id)\r\n                    .get()\r\n                    .addOnSuccessListener { document ->\r\n\r\n                        val chat = Chat(\r\n                            document[\"name\"] as String,\r\n                            document[\"type\"] as String,\r\n                            document[\"ox\"] as String\r\n                        )\r\n\r\n                        val selectedUsersIds = arrayListOf<String>()\r\n                        for(user in selectedUsers) {\r\n                            selectedUsersIds.add(user.id!!)\r\n                        }\r\n\r\n                        Backend.addUsersIntoChat(chat, chat_id, selectedUsersIds) {\r\n                            finish()\r\n                        }\r\n\r\n                    }\r\n\r\n            }\r\n        }\r\n        // Add people and create chat for the first time\r\n        else {\r\n            Backend.getAllUsersExceptCurrent {\r\n                users.clear()\r\n                users.addAll(it)\r\n                userAdapter?.notifyDataSetChanged()\r\n            }\r\n\r\n            // Continue button\r\n            binding.fabCreateChat.setOnClickListener {\r\n\r\n                val selectedUsersIds = arrayListOf<String>()\r\n                for(user in selectedUsers) {\r\n                    selectedUsersIds.add(user.id!!)\r\n                }\r\n\r\n                // Add current user to users list\r\n                Backend.getUserProfile(Firebase.auth.currentUser!!.uid) {\r\n                    selectedUsersIds.add(it.id!!)\r\n\r\n                    // Send users list to chat creation\r\n                    val intent = Intent(this, CreateChatActivity::class.java)\r\n                    intent.putExtra(\"users\", selectedUsersIds)\r\n                    intent.putExtra(\"type\", \"group\")\r\n                    startActivity(intent)\r\n                }\r\n            }\r\n        }\r\n\r\n        // Recycler View All Users\r\n        userLayoutManager = LinearLayoutManager(this, LinearLayoutManager.VERTICAL, false)\r\n        binding.recyclerViewUsers.layoutManager = userLayoutManager\r\n        userAdapter = AllUsersAdapter()\r\n        binding.recyclerViewUsers.itemAnimator = DefaultItemAnimator()\r\n        binding.recyclerViewUsers.adapter = userAdapter\r\n\r\n        // Recycler View Selected Users\r\n        userSelectedLayoutManager = LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false)\r\n        binding.recyclerViewUsersSelected.layoutManager = userSelectedLayoutManager\r\n        userSelectedAdapter = SelectedUsersAdapter()\r\n        binding.recyclerViewUsersSelected.itemAnimator = DefaultItemAnimator()\r\n        binding.recyclerViewUsersSelected.adapter = userSelectedAdapter\r\n\r\n    }\r\n\r\n\r\n    inner class AllUsersAdapter : RecyclerView.Adapter<AllUsersAdapter.ViewHolder>() {\r\n\r\n        inner class ViewHolder(val v: View) : RecyclerView.ViewHolder(v)\r\n\r\n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n            return ViewHolder(\r\n                LayoutInflater.from(parent.context).inflate(R.layout.row_user, parent, false)\r\n            )\r\n        }\r\n\r\n        override fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n\r\n            holder.v.apply {\r\n                // Variables\r\n                val username = findViewById<TextView>(R.id.textViewProfileName)\r\n                val imageViewUser = findViewById<ImageView>(R.id.imageViewProfile)\r\n\r\n                // Set data\r\n                Utilis.getFile(context, \"profilePictures/${users[position].id}.png\", \"png\") { bitmap ->\r\n                    imageViewUser.setImageBitmap(bitmap)\r\n                }\r\n\r\n                username.text = Utilis.getFirstAndLastName(users[position].name)\r\n\r\n            }\r\n            holder.v.setOnClickListener {\r\n\r\n                selectedUsers.add(users[position])\r\n                users.remove(users[position])\r\n                userSelectedAdapter?.notifyDataSetChanged()\r\n                userAdapter?.notifyDataSetChanged()\r\n            }\r\n\r\n        }\r\n\r\n        override fun getItemCount(): Int {\r\n            return users.size\r\n        }\r\n    }\r\n\r\n    inner class SelectedUsersAdapter : RecyclerView.Adapter<SelectedUsersAdapter.ViewHolder>() {\r\n\r\n        inner class ViewHolder(val v: View) : RecyclerView.ViewHolder(v)\r\n\r\n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n            return ViewHolder(\r\n                LayoutInflater.from(parent.context).inflate(R.layout.row_add_pp, parent, false)\r\n            )\r\n        }\r\n\r\n        override fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n\r\n            holder.v.apply {\r\n                // Variables\r\n                val username = findViewById<TextView>(R.id.textViewProfileNameAdd)\r\n                val imageViewUser = findViewById<ImageView>(R.id.imageViewProfile)\r\n\r\n                // Set data\r\n                Utilis.getFile(context,\"profilePictures/${selectedUsers[position].id}.png\", \"png\") { bitmap ->\r\n                    imageViewUser.setImageBitmap(bitmap)\r\n                }\r\n\r\n                username.text = Utilis.getFirstAndLastName(selectedUsers[position].name)\r\n\r\n            }\r\n            holder.v.setOnClickListener {\r\n\r\n                users.add(selectedUsers[position])\r\n                selectedUsers.remove(selectedUsers[position])\r\n                userAdapter?.notifyDataSetChanged()\r\n                userSelectedAdapter?.notifyDataSetChanged()\r\n            }\r\n\r\n        }\r\n\r\n        override fun getItemCount(): Int {\r\n            return selectedUsers.size\r\n        }\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/singularity/ipcaplus/AddPeopleActivity.kt b/app/src/main/java/com/singularity/ipcaplus/AddPeopleActivity.kt
---- a/app/src/main/java/com/singularity/ipcaplus/AddPeopleActivity.kt	(revision 5fa09412663837672a36a41fd04f1700573c5f37)
-+++ b/app/src/main/java/com/singularity/ipcaplus/AddPeopleActivity.kt	(date 1642080867525)
-@@ -67,7 +67,9 @@
-                         val chat = Chat(
-                             document["name"] as String,
-                             document["type"] as String,
--                            document["ox"] as String
-+                            document["ox"] as String,
-+                            document["iv"] as String,
-+                            document["notificationKey"] as String
-                         )
- 
-                         val selectedUsersIds = arrayListOf<String>()
-Index: app/src/main/java/com/singularity/ipcaplus/utils/Backend.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.singularity.ipcaplus.utils\r\n\r\nimport android.net.Uri\r\nimport com.google.firebase.Timestamp\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.Query\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.google.firebase.storage.FirebaseStorage\r\nimport com.google.firebase.storage.ktx.storage\r\nimport com.singularity.ipcaplus.R\r\nimport com.singularity.ipcaplus.models.*\r\nimport org.json.JSONArray\r\nimport java.io.File\r\n\r\nobject Backend {\r\n\r\n    val db = Firebase.firestore\r\n\r\n    /*\r\n       ------------------------------------------------ Events ------------------------------------------------\r\n    */\r\n\r\n    /*\r\n       This function returns all events during the month in the firebase to an list\r\n       @month = selected month\r\n       @callBack = return the list\r\n    */\r\n    fun getAllMonthEvents(month: String, callBack: (List<EventCalendar>)->Unit) {\r\n\r\n        val events = arrayListOf<EventCalendar>()\r\n\r\n        // Get all user chat ids\r\n        val chatIds = arrayListOf<String>()\r\n        getAllUserChatIds {\r\n            chatIds.addAll(it)\r\n\r\n            // Search in all chats\r\n            for (id in chatIds) {\r\n                db.collection(\"chat\")\r\n                    .document(id)\r\n                    .collection(\"event\")\r\n                    .addSnapshotListener { documents, _ ->\r\n\r\n                        documents?.let {\r\n\r\n                            for (document in documents) {\r\n                                val event = EventCalendar.fromHash(document)\r\n                                event.id = document.id\r\n\r\n                                val date = Utilis.getDate(event.datetime.seconds * 1000, \"yyyy-MM-dd'T'HH:mm:ss.SSS\")\r\n                                if (month == Utilis.getMonthById(Utilis.getMonth(date).toInt())) {\r\n                                    events.add(event)\r\n                                }\r\n                            }\r\n                            callBack(events)\r\n                        }\r\n                    }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private fun getAllUserChatIds(callBack: (List<String>)->Unit) {\r\n\r\n        val chatIds = arrayListOf<String>()\r\n\r\n        // Get Group Chats Ids\r\n        db.collection(\"profile\").document(Firebase.auth.currentUser!!.uid).collection(\"chat\")\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n                    for (document in it) {\r\n                        chatIds.add(document.id)\r\n                    }\r\n\r\n                    callBack(chatIds)\r\n                }\r\n            }\r\n    }\r\n\r\n\r\n    /*\r\n       This function returns all events during the month in the firebase to an list\r\n       @month = selected month\r\n       @callBack = return the list\r\n    */\r\n    fun getAllChatMonthEvents(month: String, chat_id: String, callBack: (List<EventCalendar>)->Unit) {\r\n\r\n        val events = arrayListOf<EventCalendar>()\r\n\r\n        db.collection(\"chat\")\r\n            .document(chat_id)\r\n            .collection(\"event\")\r\n            .addSnapshotListener { documents, _ ->\r\n\r\n                documents?.let {\r\n\r\n                    for (document in documents) {\r\n                        val event = EventCalendar.fromHash(document)\r\n                        event.id = document.id\r\n\r\n                        val date = Utilis.getDate(\r\n                            event.datetime.seconds * 1000,\r\n                            \"yyyy-MM-dd'T'HH:mm:ss.SSS\"\r\n                        )\r\n                        if (month == Utilis.getMonthById(Utilis.getMonth(date).toInt())) {\r\n                            events.add(event)\r\n                        }\r\n                    }\r\n\r\n                    callBack(events)\r\n                }\r\n\r\n            }\r\n    }\r\n\r\n\r\n    /*\r\n       This function returns all events during the day in the firebase to an list\r\n       @day = selected day\r\n       @callBack = return the list\r\n    */\r\n    fun getAllChatMonthDayEvents(month: String, day: Int, chat_id: String, callBack: (List<EventCalendar>)->Unit) {\r\n\r\n        val events = arrayListOf<EventCalendar>()\r\n\r\n        db.collection(\"chat\")\r\n            .document(chat_id)\r\n            .collection(\"event\")\r\n            .addSnapshotListener { documents, _ ->\r\n\r\n                documents?.let {\r\n\r\n                    for (document in documents) {\r\n                        val event = EventCalendar.fromHash(document)\r\n                        event.id = document.id\r\n\r\n                        val date = Utilis.getDate(\r\n                            event.datetime.seconds * 1000,\r\n                            \"yyyy-MM-dd'T'HH:mm:ss.SSS\"\r\n                        )\r\n                        if (day == Utilis.getDay(date).toInt() && month == Utilis.getMonthById(\r\n                                Utilis.getMonth(date).toInt()\r\n                            )\r\n                        ) {\r\n                            events.add(event)\r\n                        }\r\n                    }\r\n\r\n                    callBack(events)\r\n                }\r\n\r\n            }\r\n    }\r\n\r\n\r\n    /*\r\n       This function returns all events during the day in the firebase to an list\r\n       @day = selected day\r\n       @callBack = return the list\r\n    */\r\n    fun getAllMonthDayEvents(month: String, day: Int, callBack: (List<EventCalendar>)->Unit) {\r\n\r\n        val events = arrayListOf<EventCalendar>()\r\n\r\n        // Get all user chat ids\r\n        val chatIds = arrayListOf<String>()\r\n        getAllUserChatIds {\r\n            chatIds.addAll(it)\r\n\r\n            // Search in all chats\r\n            for (id in chatIds) {\r\n                db.collection(\"chat\")\r\n                    .document(id)\r\n                    .collection(\"event\")\r\n                    .addSnapshotListener { documents, _ ->\r\n\r\n                        documents?.let {\r\n\r\n                            for (document in documents) {\r\n                                val event = EventCalendar.fromHash(document)\r\n                                event.id = document.id\r\n\r\n                                val date = Utilis.getDate(event.datetime.seconds * 1000, \"yyyy-MM-dd'T'HH:mm:ss.SSS\")\r\n                                if (day == Utilis.getDay(date).toInt() && month == Utilis.getMonthById(\r\n                                        Utilis.getMonth(date).toInt())\r\n                                ) {\r\n                                    events.add(event)\r\n                                }\r\n                            }\r\n\r\n                            callBack(events)\r\n                        }\r\n\r\n                    }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    fun deleteEvent(chatID: String, eventID: String) {\r\n\r\n        db.collection(\"chat\")\r\n            .document(chatID)\r\n            .collection(\"event\")\r\n            .document(eventID)\r\n            .delete()\r\n\r\n    }\r\n\r\n\r\n    /*\r\n       ------------------------------------------------ Schedule ------------------------------------------------\r\n    */\r\n\r\n    /*\r\n       This function returns all events in the firebase to an list\r\n       @callBack = return the list\r\n    */\r\n    fun getDayCourseSubjects(day: String, courseId: String, callBack: (List<Subject>)->Unit) {\r\n\r\n        val subjects = arrayListOf<Subject>()\r\n        val subjectsWithBreaks = arrayListOf<Subject>()\r\n\r\n        db.collection(\"course\").document(courseId).collection(\"subject\")\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n\r\n                    // Add every subject to the list\r\n                    for (document in documents) {\r\n                        val subject = Subject.fromHash(document)\r\n                        if (day == subject.day) {\r\n                            subjects.add(subject)\r\n                        }\r\n                    }\r\n\r\n                    // Order the subjects by time\r\n                    for (i in 0 until subjects.size) {\r\n                        for (j in 0 until subjects.size - 1) {\r\n\r\n                            if (Utilis.convertHoursStringToInt(subjects[j].start_time) > Utilis.convertHoursStringToInt(\r\n                                    subjects[j + 1].start_time\r\n                                )\r\n                            ) {\r\n                                val temp = subjects[j]\r\n                                subjects[j] = subjects[j + 1]\r\n                                subjects[j + 1] = temp\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Add Break Times Between Classes\r\n                    for (i in 0 until subjects.size) {\r\n                        if (i % 2 == 0) {\r\n                            subjectsWithBreaks.add(subjects[i])\r\n                        }\r\n                        else {\r\n                            val diff = Utilis.convertHoursStringToInt(subjects[i].start_time) - Utilis.convertHoursStringToInt(\r\n                                subjects[i - 1].end_time\r\n                            )\r\n                            subjectsWithBreaks.add(Subject(\"breaktime\", diff.toString()))\r\n                            subjectsWithBreaks.add(subjects[i])\r\n                        }\r\n                    }\r\n\r\n                    callBack(subjectsWithBreaks)\r\n                }\r\n\r\n            }\r\n\r\n    }\r\n\r\n\r\n    /*\r\n       This function returns the user course by callback\r\n       @id = user uid\r\n    */\r\n    fun getUserCourses(uid: String, callBack:(String)->Unit) {\r\n\r\n        db.collection(\"profile\")\r\n            .document(uid)\r\n            .collection(\"course\")\r\n            .addSnapshotListener { documents, _ ->\r\n\r\n                documents?.let {\r\n\r\n                    var courseId = \"\"\r\n                    for (document in documents)\r\n                        courseId = document.id\r\n\r\n                    callBack(courseId)\r\n                }\r\n            }\r\n    }\r\n\r\n\r\n    /*\r\n       This function returns the user course by callback\r\n       @id = user uid\r\n    */\r\n    fun getUserCoursesIds(uid: String, courseTag: String, callBack:(List<String>)->Unit) {\r\n\r\n        val courseIds = arrayListOf<String>()\r\n\r\n        db.collection(\"course\")\r\n            .whereEqualTo(\"tag\", courseTag)\r\n            .get()\r\n            .addOnSuccessListener { documents ->\r\n\r\n                documents?.let {\r\n\r\n                    for (document in documents)\r\n                        courseIds.add(document.id)\r\n\r\n                    callBack(courseIds)\r\n                }\r\n\r\n            }\r\n\r\n    }\r\n\r\n\r\n    fun setUserCourses(userID: String, courseID: String) {\r\n\r\n        val profile = HashMap<String, Any>()\r\n        db.collection(\"profile\")\r\n            .document(userID)\r\n            .collection(\"course\")\r\n            .document(courseID)\r\n            .set(profile)\r\n    }\r\n\r\n\r\n    /*\r\n       ------------------------------------------------ Contacts ------------------------------------------------\r\n    */\r\n\r\n    /*\r\n       This function returns all contacts in the firebase to an list\r\n       @callBack = return the list\r\n    */\r\n    fun getAllContacts(callBack: (List<Contact>)->Unit) {\r\n\r\n        val contacts = arrayListOf<Contact>()\r\n\r\n        db.collection(\"contacts\")\r\n            .addSnapshotListener { documents, _ ->\r\n\r\n                documents?.let {\r\n\r\n                    for (document in documents) {\r\n                        val contact = Contact.fromHash(document)\r\n                        contacts.add(contact)\r\n                    }\r\n\r\n                    callBack(contacts)\r\n                }\r\n\r\n            }\r\n\r\n    }\r\n\r\n\r\n    /*\r\n       ------------------------------------------------ Profile ------------------------------------------------\r\n    */\r\n\r\n    fun getUserProfile(userId: String, callBack:(Profile)->Unit) {\r\n\r\n        var profile = Profile()\r\n\r\n        db.collection(\"profile\")\r\n            .addSnapshotListener { documents, _ ->\r\n\r\n                documents?.let {\r\n\r\n                    for (document in documents) {\r\n\r\n                        if (document.id == userId) {\r\n                            profile = Profile.fromHash(document)\r\n                            profile.id = document.id\r\n                        }\r\n                    }\r\n\r\n                    callBack(profile)\r\n                }\r\n            }\r\n    }\r\n\r\n    fun getAllUsers (callBack:(List<Profile>)->Unit) {\r\n        val profiles = arrayListOf<Profile>()\r\n\r\n        db.collection(\"profile\")\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n\r\n                    for (document in documents) {\r\n                        val profile = Profile.fromHash(document)\r\n                        profile.id = document.id\r\n                        profiles.add(profile)\r\n                    }\r\n                }\r\n\r\n                callBack(profiles)\r\n            }\r\n    }\r\n\r\n    fun getAllUsersExceptCurrent (callBack:(List<Profile>)->Unit) {\r\n        val profiles = arrayListOf<Profile>()\r\n\r\n        db.collection(\"profile\")\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n\r\n                    for (document in documents) {\r\n                        val profile = Profile.fromHash(document)\r\n\r\n                        if (Firebase.auth.currentUser!!.uid != document.id) {\r\n                            profile.id = document.id\r\n                            profiles.add(profile)\r\n                        }\r\n                    }\r\n                }\r\n\r\n                callBack(profiles)\r\n            }\r\n    }\r\n\r\n\r\n    fun getAllUsersExceptChatUsers (chatID: String, callBack:(List<Profile>)->Unit) {\r\n\r\n        val currentUserIds = arrayListOf<String>()\r\n        val profiles = arrayListOf<Profile>()\r\n\r\n        // Get current chat users ids\r\n        getChatUsers(chatID) {\r\n            for (user in it)\r\n                currentUserIds.add(user.id!!)\r\n\r\n            db.collection(\"profile\")\r\n                .addSnapshotListener { documents, _ ->\r\n                    documents?.let {\r\n\r\n                        for (document in documents) {\r\n                            val profile = Profile.fromHash(document)\r\n\r\n                            // Verify if user is not in the chat\r\n                            var found = false\r\n                            for (id in currentUserIds) {\r\n                                if (id == document.id)\r\n                                    found = true\r\n                            }\r\n\r\n                            if (!found) {\r\n                                profile.id = document.id\r\n                                profiles.add(profile)\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    callBack(profiles)\r\n                }\r\n        }\r\n    }\r\n\r\n\r\n    fun changeUserChatAdminStatus(chatId: String, userId: String, status: Boolean) {\r\n\r\n        db.collection(\"chat\")\r\n            .document(chatId)\r\n            .collection(\"user\")\r\n            .document(userId)\r\n            .update(\"admin\", status)\r\n\r\n    }\r\n\r\n\r\n    /*\r\n       ------------------------------------------------ Chats ------------------------------------------------\r\n    */\r\n\r\n\r\n    fun getChatUsers(chatID: String, callBack: (List<Profile>)->Unit) {\r\n\r\n        val userIds = arrayListOf<String>()\r\n        val adminIds = arrayListOf<String>()\r\n        val users = arrayListOf<Profile>()\r\n\r\n        // Get the ids of the users in the chat\r\n        db.collection(\"chat\")\r\n            .document(chatID)\r\n            .collection(\"user\")\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n                    for (document in documents) {\r\n                        userIds.add(document.id)\r\n\r\n                        if (document[\"admin\"] != true)\r\n                            adminIds.add(document.id)\r\n\r\n                    }\r\n                }\r\n\r\n                // Find the data for each id\r\n                db.collection(\"profile\")\r\n                    .addSnapshotListener { documents2, _ ->\r\n                        documents2?.let {\r\n                            for (document in documents2) {\r\n                                for (id in userIds) {\r\n                                    if (document.id == id) {\r\n                                        val profile = Profile.fromHash(document)\r\n                                        profile.id = document.id\r\n                                        users.add(profile)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        // Get Admins\r\n                        for (u in users) {\r\n                            for (a in adminIds) {\r\n                                if (u.id == a) {\r\n                                    u.isAdmin = true\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        callBack(users)\r\n                    }\r\n\r\n            }\r\n\r\n    }\r\n\r\n\r\n    fun getChatUsersUids(chatID: String, callBack: (List<String>) -> Unit){\r\n        var userIds = arrayListOf<String>()\r\n\r\n        // Get the ids of the users in the chat\r\n        db.collection(\"chat\")\r\n            .document(chatID)\r\n            .collection(\"user\")\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n                    for (document in documents) {\r\n                        userIds.add(document.id)\r\n                    }\r\n                }\r\n\r\n                callBack(userIds)\r\n            }\r\n    }\r\n\r\n\r\n    fun changeChatName(chatID: String, newName: String) {\r\n\r\n        var userIds = arrayListOf<String>()\r\n\r\n        db.collection(\"chat\")\r\n            .document(chatID)\r\n            .update(\"name\", newName)\r\n\r\n        getChatUsersUids(chatID) {\r\n            userIds.addAll(it)\r\n\r\n            for (userId in userIds) {\r\n                db.collection(\"profile\")\r\n                    .document(userId)\r\n                    .collection(\"chat\")\r\n                    .document(chatID)\r\n                    .update(\"name\", newName)\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /*\r\n       This function returns last chat message by chat id\r\n       @callBack = return the message\r\n    */\r\n    fun getLastMessageByChatID(chatID: String, callBack: (Message?)->Unit) {\r\n\r\n        var message : Message? = null\r\n\r\n        db.collection(\"chat\").document(\"${chatID}\").collection(\"message\")\r\n            .orderBy(\"time\", Query.Direction.DESCENDING).limit(1)\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n                    for (document in documents) {\r\n                        message = Message.fromHash(document)\r\n                        }\r\n                    }\r\n\r\n                    callBack(message)\r\n                }\r\n\r\n    }\r\n\r\n\r\n    fun getChatAdminIds(chatID: String, callBack: (List<String>)->Unit) {\r\n\r\n        val adminIds = arrayListOf<String>()\r\n\r\n        // Get Admins\r\n        db.collection(\"chat\")\r\n            .document(chatID)\r\n            .collection(\"user\")\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n                    for (document in documents) {\r\n\r\n                        if (document[\"admin\"] == true)\r\n                            adminIds.add(document.id)\r\n\r\n                    }\r\n\r\n                    callBack(adminIds)\r\n                }\r\n            }\r\n\r\n    }\r\n\r\n\r\n    fun removeUserFromChat(chatId: String, userId: String) {\r\n\r\n        // remover user from chat user list\r\n        db.collection(\"chat\")\r\n            .document(chatId)\r\n            .collection(\"user\")\r\n            .document(userId)\r\n            .delete()\r\n\r\n        // remove chat from user chat list\r\n        db.collection(\"profile\")\r\n            .document(userId)\r\n            .collection(\"chat\")\r\n            .document(chatId)\r\n            .delete()\r\n    }\r\n\r\n\r\n    fun addUsersIntoChat(chat: Chat, chatId: String, usersId: ArrayList<String>, callBack: ()->Unit) {\r\n\r\n        for (userId in usersId) {\r\n\r\n            // Create chat in user profile\r\n            db.collection(\"profile\")\r\n                .document(userId)\r\n                .collection(\"chat\")\r\n                .document(chatId)\r\n                .set(chat)\r\n                .addOnCompleteListener {\r\n\r\n                    val profile = HashMap<String, Any>()\r\n                    db.collection(\"chat\")\r\n                        .document(chatId)\r\n                        .collection(\"user\")\r\n                        .document(userId)\r\n                        .set(profile)\r\n                        .addOnCompleteListener {\r\n                            callBack()\r\n                        }\r\n\r\n                }\r\n\r\n        }\r\n    }\r\n\r\n\r\n    fun deleteChat(chatId: String, callback: ()->Unit) {\r\n\r\n        val userIds = arrayListOf<String>()\r\n\r\n        // get all chat members ids\r\n        db.collection(\"chat\")\r\n            .document(chatId)\r\n            .collection(\"user\")\r\n            .addSnapshotListener { documents, _ ->\r\n\r\n                documents?.let {\r\n                    for (document in documents) {\r\n                        userIds.add(document.id)\r\n                    }\r\n\r\n                    // <------------------------------------------------------- Missing here\r\n\r\n                    // delete chat\r\n                    /*\r\n                    db.collection(\"chat\")\r\n                        .document(chatId)\r\n                        .delete()\r\n*/\r\n\r\n                    // delete chat references in members\r\n                    for (i in 0 until userIds.size) {\r\n\r\n                        db.collection(\"profile\")\r\n                            .document(userIds[i])\r\n                            .collection(\"chat\")\r\n                            .document(chatId)\r\n                            .delete()\r\n                            .addOnCompleteListener {\r\n                                // If its the last callback refresh the activity\r\n                                if (i == userIds.size - 1)\r\n                                    callback()\r\n                            }\r\n\r\n                    }\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    fun getAllDirectChatIdsByUser(userId: String, callBack: (List<String?>) -> Unit){\r\n\r\n        var chatIds = arrayListOf<String?>()\r\n\r\n        // Get all profile chat ids\r\n        db.collection(\"profile\")\r\n            .document(userId)\r\n            .collection(\"chat\")\r\n            .whereEqualTo(\"type\", \"chat\")\r\n            .get()\r\n            .addOnSuccessListener { documents ->\r\n                for (document in documents) {\r\n                    chatIds.add(document.id)\r\n                }\r\n\r\n                println(\"DEntroooo\" + chatIds)\r\n                callBack(chatIds)\r\n            }\r\n\r\n    }\r\n\r\n    fun getDirectChatById(chatIds: List<String?>, userId: String, callBack: (String?)-> Unit) {\r\n\r\n        var chatId : String? = null\r\n\r\n        for (id in chatIds) {\r\n            db.collection(\"chat\")\r\n                .document(id!!)\r\n                .collection(\"user\")\r\n                .get()\r\n                .addOnSuccessListener { documents ->\r\n                    for(document in documents) {\r\n                        if(document.id == userId){\r\n                            chatId = id\r\n                        }\r\n                    }\r\n\r\n                    println(\"ACABOU2---------------------------------------\")\r\n                    callBack(chatId)\r\n                }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /*\r\n       ------------------------------------------------ Register Manipulation ------------------------------------------------\r\n    */\r\n\r\n    fun getIpcaData(email: String, callBack: (Profile?)->Unit) {\r\n\r\n        var profile : Profile? = null\r\n\r\n        db.collection(\"ipca_data\")\r\n            .whereEqualTo(\"email\", email)\r\n            .get()\r\n            .addOnSuccessListener { documents ->\r\n\r\n                for (document in documents) {\r\n                    profile = Profile.fromHash(document)\r\n                }\r\n\r\n                callBack(profile)\r\n\r\n            }\r\n\r\n    }\r\n\r\n\r\n    /*\r\n       ------------------------------------------------ Files ------------------------------------------------\r\n    */\r\n\r\n    fun getAllChatFolderFiles(path: String, callBack: (List<FirebaseFile>) -> Unit) {\r\n\r\n        val files = arrayListOf<FirebaseFile>()\r\n        val listRef = Firebase.storage.reference.child(path)\r\n\r\n        // Find all the prefixes and items.\r\n        listRef.listAll().addOnSuccessListener {\r\n\r\n            for (i in it.prefixes) {\r\n                files.add(FirebaseFile(i.name, R.drawable.ic_folder))\r\n            }\r\n\r\n            for (i in it.items) {\r\n                val icon = Utilis.getFileIcon(i.name)\r\n                if (icon != -1) {\r\n                    val file = FirebaseFile(i.name, icon)\r\n                    files.add(file)\r\n                }\r\n            }\r\n\r\n            callBack(files)\r\n        }\r\n\r\n    }\r\n\r\n    /*\r\n      ------------------------------------------------ Files ------------------------------------------------\r\n   */\r\n\r\n\r\n    fun deleteAllFilesInsideFolder(filePath: String, callback: ()->Unit) {\r\n\r\n        val storage = Firebase.storage\r\n        val listRef = storage.reference.child(filePath)\r\n\r\n        listRef.listAll()\r\n            .addOnSuccessListener {\r\n\r\n                it.items.forEach { item ->\r\n                    item.delete()\r\n                        .addOnCompleteListener {\r\n                            callback()\r\n                        }\r\n                }\r\n\r\n            }\r\n    }\r\n\r\n\r\n    fun getFileUrl(filePath: String, callback: (Uri)->Unit) {\r\n\r\n        val storageRef = FirebaseStorage.getInstance().reference.child(filePath)\r\n\r\n        storageRef.downloadUrl.addOnCompleteListener {\r\n            callback(it.result!!)\r\n        }\r\n\r\n    }\r\n\r\n\r\n    fun postTokenAddress(tokenAdress: String, uid: String){\r\n        println(tokenAdress)\r\n        println(uid)\r\n        var token = HashMap<String, String>()\r\n        db.collection(\"profile\")\r\n            .document(uid)\r\n            .collection(\"tokens\")\r\n            .document(tokenAdress)\r\n            .set(token)\r\n    }\r\n\r\n    fun getAllTokens(uid: String, callBack: (List<String>) -> Unit){\r\n        val tokens = arrayListOf<String>()\r\n\r\n        db.collection(\"profile\").document(uid).collection(\"tokens\")\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n                    for (document in documents) {\r\n                            tokens.add(document.id)\r\n                    }\r\n\r\n                    callBack(tokens)\r\n                }\r\n            }\r\n\r\n    }\r\n\r\n    fun createJsonArrayString(array: List<String>): JSONArray {\r\n        return JSONArray(array)\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/singularity/ipcaplus/utils/Backend.kt b/app/src/main/java/com/singularity/ipcaplus/utils/Backend.kt
---- a/app/src/main/java/com/singularity/ipcaplus/utils/Backend.kt	(revision 5fa09412663837672a36a41fd04f1700573c5f37)
-+++ b/app/src/main/java/com/singularity/ipcaplus/utils/Backend.kt	(date 1642080867521)
-@@ -880,4 +880,39 @@
-     fun createJsonArrayString(array: List<String>): JSONArray {
-         return JSONArray(array)
-     }
-+
-+    fun getIv(chat_id: String, callBack: (String?)->Unit) {
-+
-+        var iv : String? = null
-+
-+        db.collection("chat")
-+            .get()
-+            .addOnSuccessListener { documents ->
-+                for(document in documents) {
-+                    if (document.id == chat_id) {
-+                        val chat = Chat.fromHash(document)
-+                        iv = chat.iv.toString()
-+                    }
-+                }
-+                callBack(iv)
-+            }
-+    }
-+
-+    fun getNotificationKey(chat_id: String, callBack: (String?)->Unit) {
-+
-+        var notificationKey : String? = null
-+
-+        db.collection("chat")
-+            .get()
-+            .addOnSuccessListener { documents ->
-+                for(document in documents) {
-+                    if (document.id == chat_id) {
-+                        val chat = Chat.fromHash(document)
-+                        notificationKey = chat.notificationKey.toString()
-+                    }
-+                }
-+                callBack(notificationKey)
-+            }
-+    }
-+
- }
-\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_1_13_2022_1_20_PM_[Default_Changelist]/shelved.patch
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_1_13_2022_1_20_PM_[Default_Changelist]/shelved.patch b/.idea/shelf/Uncommitted_changes_before_Update_at_1_13_2022_1_20_PM_[Default_Changelist]/shelved.patch
-new file mode 100644
---- /dev/null	(date 1642080053207)
-+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_1_13_2022_1_20_PM_[Default_Changelist]/shelved.patch	(date 1642080053207)
-@@ -0,0 +1,497 @@
-+Index: app/src/main/java/com/singularity/ipcaplus/chat/ChatActivity.kt
-+IDEA additional info:
-+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-+<+>package com.singularity.ipcaplus.chat\r\n\r\nimport android.annotation.SuppressLint\r\nimport android.app.ActionBar\r\nimport android.content.ContentValues.TAG\r\nimport android.content.Intent\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.*\r\nimport android.widget.ImageView\r\nimport android.widget.TextView\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.core.view.isVisible\r\nimport androidx.recyclerview.widget.DefaultItemAnimator\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.google.firebase.Timestamp\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.Query\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.drawer.CalendarActivity\r\nimport com.singularity.ipcaplus.R\r\nimport com.singularity.ipcaplus.utils.Utilis\r\nimport com.singularity.ipcaplus.cryptography.decryptWithAESmeta\r\nimport com.singularity.ipcaplus.cryptography.encryptMeta\r\nimport com.singularity.ipcaplus.cryptography.getMetaOx\r\nimport com.singularity.ipcaplus.databinding.ActivityChatBinding\r\nimport com.singularity.ipcaplus.models.Chat\r\nimport com.singularity.ipcaplus.models.Message\r\nimport com.singularity.ipcaplus.utils.Backend\r\nimport com.singularity.ipcaplus.utils.Backend.createJsonArrayString\r\nimport kotlinx.coroutines.*\r\nimport org.json.JSONArray\r\nimport org.json.JSONObject\r\nimport java.io.BufferedOutputStream\r\nimport java.io.BufferedWriter\r\nimport java.io.OutputStream\r\nimport java.io.OutputStreamWriter\r\nimport java.net.URL\r\nimport java.time.LocalDateTime\r\nimport java.time.format.DateTimeFormatter\r\nimport javax.net.ssl.HttpsURLConnection\r\n\r\nclass ChatActivity : AppCompatActivity() {\r\n\r\n    var messages = arrayListOf<Message>()\r\n    var currentUserIsAdmin = false\r\n    private lateinit var binding: ActivityChatBinding\r\n    private lateinit var chat_id : String\r\n    var tokens_adress = arrayListOf<String>()\r\n    var chat_user_uids = arrayListOf<String>()\r\n    private var mAdapter: RecyclerView.Adapter<*>? = null\r\n    private var mLayoutManager: LinearLayoutManager? = null\r\n\r\n    val db = Firebase.firestore\r\n    @SuppressLint(\"WrongConstant\")\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_chat)\r\n\r\n        binding = ActivityChatBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        supportActionBar?.displayOptions = ActionBar.DISPLAY_SHOW_CUSTOM\r\n        supportActionBar?.setCustomView(R.layout.appbar_custom_layout_chat)\r\n        findViewById<TextView>(R.id.AppBarTittle).text = \"Chat name\"\r\n        // Back button\r\n        findViewById<ImageView>(R.id.BackButtonImageView).setOnClickListener{\r\n            finish()\r\n        }\r\n\r\n        // Variables\r\n        chat_id = intent.getStringExtra(\"chat_id\").toString()\r\n        val current = LocalDateTime.now()\r\n\r\n        val formatter = DateTimeFormatter.BASIC_ISO_DATE\r\n        val formatted = current.format(formatter)\r\n\r\n        // Check if user is admin\r\n        Backend.getChatAdminIds(chat_id) {\r\n            val currentUser = Firebase.auth.currentUser!!.uid\r\n            for (admin in it) {\r\n                if (admin == currentUser)\r\n                    currentUserIsAdmin = true\r\n            }\r\n        }\r\n\r\n        // Get all members id of chat\r\n        Backend.getChatUsersUids(chat_id){\r\n            chat_user_uids.clear()\r\n            chat_user_uids.addAll(it)\r\n\r\n            for (userId in chat_user_uids){\r\n                // Getting all of tokens of  profile associated devices\r\n                Backend.getAllTokens(userId) {\r\n                    if (tokens_adress.isEmpty()){\r\n                        tokens_adress.clear()\r\n                    }\r\n                    tokens_adress.addAll(it)\r\n\r\n                    /*GlobalScope.launch {\r\n                        withContext(Dispatchers.IO){\r\n                            createNotificationGroup(\"grupotrablahotentativa\", createJsonArrayString(tokens_adress))\r\n                        }\r\n                    }*/\r\n\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n        val profilePicfromTop = findViewById<ImageView>(R.id.ProfileImageView)\r\n        Utilis.getFile(this, \"chats/$chat_id/icon.png\", \"png\") { bitmap ->\r\n            profilePicfromTop.setImageBitmap(bitmap)\r\n        }\r\n\r\n        println(\"Current Date is: $formatted\")\r\n\r\n        // Send Message\r\n        binding.fabSend.setOnClickListener {\r\n            if(!binding.editTextMessage.text.isNullOrBlank()) {\r\n                // get data of ecripted shared preferences (\"chatuid\" -> \"key\")\r\n                val keygen = getMetaOx(this, chat_id)\r\n                // Build encryptation data of message send by the user\r\n                var meta = encryptMeta( binding.editTextMessage.text.toString(), keygen.toString())\r\n                val savedText = binding.editTextMessage.text.toString()\r\n\r\n                val message = Message(\r\n                    Firebase.auth.currentUser!!.uid,\r\n                    meta.toString(),\r\n                    Timestamp.now(),\r\n                    \"\"\r\n\r\n                )\r\n                db.collection(\"chat\").document(\"$chat_id\").collection(\"message\")\r\n                    .add(message.toHash())\r\n                    .addOnSuccessListener { documentReference ->\r\n\r\n                        GlobalScope.launch {\r\n                            withContext(Dispatchers.IO){\r\n                                //APA91bEKDInIYA242YofpahBmhB57pEI4gNT63DJJenWCccJGqeSYrWzj0BSruX49DhVp2vGSY5xJ2fEJk2vhtoraT3_bbjEKw4Nx3eJKj7tttVRPjQs0Uc_OPkrcj4twR70H5tAilnY\r\n                                println(\"AVEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\"+ savedText)\r\n                                sendNotificationToGroup( chat_id, savedText, \"APA91bGaOoMTjTD2s9MU63F1AvLqP6tkwdAFE0Mqs9jbghlSgcWlfe_38CboFiE2iiWFoKqNRwhF0G_TA5X9xegTL0_Tg0OGuFadJuBj1sGZqjqCcmF1EH2ZeRU7ySHosdNkmLmmOyFF\")\r\n                            }\r\n                        }\r\n                        Log.d(TAG, \"DocumentSnapshot added with ID: ${documentReference.id}\")\r\n\r\n\r\n                    }\r\n                    .addOnFailureListener { e ->\r\n                        Log.w(TAG, \"Error adding document\", e)\r\n                    }\r\n                binding.editTextMessage.text.clear()\r\n\r\n            }\r\n        }\r\n\r\n        // Show Messages\r\n        db.collection(\"chat\").document(\"$chat_id\").collection(\"message\").orderBy(\"time\", Query.Direction.DESCENDING)\r\n            .addSnapshotListener { documents, e ->\r\n\r\n                documents?.let {\r\n                    messages.clear()\r\n                    for (document in it) {\r\n                        Log.d(TAG, \"${document.id} => ${document.data}\")\r\n                        val message = Message.fromHash(document)\r\n                        messages.add(message)\r\n\r\n                    }\r\n                    mAdapter?.notifyDataSetChanged()\r\n                }\r\n\r\n            }\r\n\r\n        // Recycler View Messages\r\n        mLayoutManager = LinearLayoutManager(this, LinearLayoutManager.VERTICAL, false)\r\n        binding.recycleViewChat.layoutManager = mLayoutManager\r\n        mAdapter = MessageAdapter()\r\n        binding.recycleViewChat.itemAnimator = DefaultItemAnimator()\r\n        binding.recycleViewChat.adapter = mAdapter\r\n\r\n        mLayoutManager!!.reverseLayout = true\r\n\r\n    }\r\n\r\n    /*\r\n       This function create the action bar above the activity\r\n    */\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        val inflater: MenuInflater = menuInflater\r\n        inflater.inflate(R.menu.menu_chat, menu)\r\n\r\n        db.collection(\"chat\")\r\n            .addSnapshotListener { documents, e ->\r\n                documents?.let {\r\n                    for (document in it) {\r\n                        if(document.id == chat_id) {\r\n                            val chat = Chat.fromHash(document)\r\n                            val name = Utilis.getFirstAndLastName(chat.name)\r\n                            //supportActionBar?.title = chat.name\r\n                            findViewById<TextView>(R.id.AppBarTittle).text = name\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n\r\n        return true\r\n    }\r\n\r\n\r\n    /*\r\n        This function define the events of the action bar buttons\r\n     */\r\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\r\n        super.onOptionsItemSelected(item)\r\n\r\n        when (item.itemId){\r\n            R.id.calendario -> {\r\n                val intent = Intent(this, CalendarActivity::class.java)\r\n                intent.putExtra(\"chat_id\", chat_id)\r\n                intent.putExtra(\"is_admin\", currentUserIsAdmin)\r\n                startActivity(intent)\r\n                return true\r\n            }\r\n            R.id.chatMore -> {\r\n                val intent = Intent(this, ChatMoreActivity::class.java)\r\n                intent.putExtra(\"chat_id\", chat_id)\r\n                println(\"3------------------------------ \" + currentUserIsAdmin)\r\n                intent.putExtra(\"is_admin\", currentUserIsAdmin)\r\n                intent.putExtra(\"chat_name\",  Utilis.getFirstAndLastName(findViewById<TextView>(R.id.AppBarTittle).text.toString()))\r\n                startActivity(intent)\r\n                return true\r\n            }\r\n        }\r\n\r\n        return false\r\n    }\r\n\r\n\r\n    // When the support action bar back button is pressed, the app will go back to the previous activity\r\n    override fun onSupportNavigateUp(): Boolean {\r\n        onBackPressed()\r\n        return true\r\n    }\r\n\r\n\r\n    inner class MessageAdapter : RecyclerView.Adapter<MessageAdapter.ViewHolder>() {\r\n\r\n        inner class ViewHolder(val v: View) : RecyclerView.ViewHolder(v)\r\n\r\n        var otherUser = false\r\n\r\n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n            if(viewType == 1) {\r\n                otherUser = false\r\n                return ViewHolder(\r\n                    LayoutInflater.from(parent.context).inflate(R.layout.row_message_self, parent, false))\r\n            } else if (viewType == 2){\r\n                otherUser = false\r\n                return ViewHolder(\r\n                    LayoutInflater.from(parent.context).inflate(R.layout.row_message_system, parent, false))\r\n            } else {\r\n                otherUser = true\r\n                return ViewHolder(\r\n                    LayoutInflater.from(parent.context).inflate(R.layout.row_message_others, parent, false))\r\n            }\r\n\r\n        }\r\n\r\n        @RequiresApi(Build.VERSION_CODES.M)\r\n         override fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n\r\n\r\n            holder.v.apply {\r\n\r\n                val textViewMessage = findViewById<TextView>(R.id.textViewMessage)\r\n                val timeLastMessage = findViewById<TextView?>(R.id.timeLastMessage)\r\n                val textViewUsername = findViewById<TextView?>(R.id.textViewUsername)\r\n\r\n\r\n                timeLastMessage?.isVisible = false\r\n                val keygen = getMetaOx(context, chat_id)\r\n                val message_decripted = decryptWithAESmeta(keygen.toString(), messages[position].message)\r\n\r\n               /* if (otherUser) {\r\n                        Backend.getUserProfile(messages[position].user) {\r\n                            val userName = Utilis.getFirstAndLastName(it.name)\r\n                            textViewUsername.text = userName\r\n                        }\r\n                    }\r\n                */\r\n\r\n                textViewMessage.text = message_decripted\r\n                println(message_decripted)\r\n                if(position == messages.size - 1) {\r\n                    val data = Utilis.getDate(\r\n                        messages[position].time.seconds * 1000,\r\n                        \"yyyy-MM-dd'T'HH:mm:ss.SSS\"\r\n                    )\r\n                    timeLastMessage.isVisible = true\r\n                    timeLastMessage.text = Utilis.getHours(data) + \":\" + Utilis.getMinutes(data)\r\n                }\r\n\r\n                if (otherUser) {\r\n                    val imageViewUser = findViewById<ImageView?>(R.id.imageViewUser)\r\n                    if (imageViewUser != null) {\r\n                        Utilis.getFile(context, \"profilePictures/${messages[position].user}.png\", \"png\") { bitmap ->\r\n                            imageViewUser.setImageBitmap(bitmap)\r\n                        }\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        override fun getItemViewType(position: Int) : Int {\r\n            if (messages[position].user == Firebase.auth.currentUser!!.uid) {\r\n                return 1\r\n            } else if (messages[position].user == \"system\"){\r\n                return 2\r\n            } else {\r\n                return 0\r\n            }\r\n        }\r\n\r\n        override fun getItemCount(): Int {\r\n            return messages.size\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    private suspend fun  createNotificationGroup(notificationKeyName : String, registrationIds : JSONArray)  {\r\n\r\n        try {\r\n\r\n            Log.d(\"json\", registrationIds.toString())\r\n\r\n            //Request\r\n            val endPoint = URL(\"https://fcm.googleapis.com/fcm/notification\")\r\n\r\n            //Establish a connection\r\n            val httpsURLConnection: HttpsURLConnection =\r\n                endPoint.openConnection() as HttpsURLConnection\r\n\r\n            //Connection to fcm\r\n            //The time available to read from the input stream when the connection is established\r\n            httpsURLConnection.readTimeout = 10000\r\n            //The time available to connect to the url\r\n            httpsURLConnection.connectTimeout = 15000\r\n            //Defining the type of request to be made to the fcm\r\n            httpsURLConnection.requestMethod = \"POST\"\r\n            //Defining that the url connection can be used to send and receive data\r\n            httpsURLConnection.doInput = true\r\n            httpsURLConnection.doOutput = true\r\n\r\n            // Build parameters for json\r\n            httpsURLConnection.setRequestProperty(\"Content-Type\", \"application/json\")\r\n            val project_key = \"AAAAMMR-Gaw:APA91bFeijRa909_QEdEFsQeDSaJZRYD7rOk8B8Bc2QiYcGoyLG1xqqpZLkOJXmZrG0FbScojvqBCsweSEWDrMLM6kr67boS-BVB2oy7fL6Zn1N9ICVk6efGniauDa3z8eaOb1TENmEs\"\r\n            val senderId = \"209455028652\"\r\n            httpsURLConnection.setRequestProperty(\"authorization\", \"key=$project_key\")\r\n            httpsURLConnection.setRequestProperty(\"project_id\", senderId)\r\n\r\n            val json = JSONObject()\r\n\r\n            json.put(\"operation\", \"create\")\r\n            json.put(\"notification_key_name\", notificationKeyName)\r\n            json.put(\"registration_ids\", registrationIds)\r\n\r\n\r\n            // Writer\r\n            val outputStream: OutputStream =\r\n                BufferedOutputStream(httpsURLConnection.outputStream)\r\n            val writer = BufferedWriter(OutputStreamWriter(outputStream, \"utf-8\"))\r\n\r\n            // POST\r\n            writer.write(json.toString())\r\n            writer.flush()\r\n            writer.close()\r\n\r\n            outputStream.close()\r\n\r\n            //The response code and message of the POST requests\r\n            val responseCode: Int = httpsURLConnection.responseCode\r\n            val responseMessage = httpsURLConnection.responseMessage\r\n\r\n            Log.d(TAG, \"$responseCode $responseMessage\")\r\n\r\n\r\n            // Check server STATUS\r\n            if (responseCode in 400..499) {\r\n                httpsURLConnection.errorStream\r\n            } else {\r\n                httpsURLConnection.inputStream\r\n            }\r\n\r\n            if (responseCode == 200) {\r\n                Log.e(TAG, \"Group Created!!\")\r\n\r\n                val response = httpsURLConnection.inputStream.bufferedReader()\r\n                    .use { it.readText() }  // defaults to UTF-8\r\n                withContext(Dispatchers.Main) {\r\n                    //notification_key\r\n                    val jsonObject  = JSONObject(response)\r\n                    val notificationKey = jsonObject.getString(\"notification_key\")\r\n                    println(\"NotifKey: $notificationKey\")\r\n                    Log.d(\"NotifKey\", notificationKey)\r\n                }\r\n            } else {\r\n                Log.e(TAG, \"Error it didn´t work\")\r\n            }\r\n\r\n            //Here i close the connection to the endPoint\r\n            httpsURLConnection.disconnect()\r\n\r\n\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n\r\n    //This function sends push notifications to devices that are subscribed to a specific topic\r\n    private suspend fun sendNotificationToGroup(title: String, message: String, notificationKey : String) {\r\n\r\n        delay(1500)\r\n\r\n        try {\r\n\r\n            //Request\r\n            val url = URL(\"https://fcm.googleapis.com/fcm/send\")\r\n\r\n            //Establish a connection\r\n            val httpsURLConnection: HttpsURLConnection =\r\n                url.openConnection() as HttpsURLConnection\r\n\r\n            //The time available to read from the input stream when the connection is established\r\n            httpsURLConnection.readTimeout = 10000\r\n            //The time available to connect to the url\r\n            httpsURLConnection.connectTimeout = 15000\r\n            //Defining the type of request to be made to the fcm\r\n            httpsURLConnection.requestMethod = \"POST\"\r\n            //Defining that the url connection can be used to send and receive data\r\n            httpsURLConnection.doInput = true\r\n            httpsURLConnection.doOutput = true\r\n\r\n            // Config of FCM\r\n            val project_key = \"AAAAMMR-Gaw:APA91bFeijRa909_QEdEFsQeDSaJZRYD7rOk8B8Bc2QiYcGoyLG1xqqpZLkOJXmZrG0FbScojvqBCsweSEWDrMLM6kr67boS-BVB2oy7fL6Zn1N9ICVk6efGniauDa3z8eaOb1TENmEs\"\r\n            httpsURLConnection.setRequestProperty(\"authorization\", \"key=$project_key\")\r\n            httpsURLConnection.setRequestProperty(\"Content-Type\", \"application/json\")\r\n\r\n            val jsonObject = JSONObject()\r\n            val data = JSONObject()\r\n\r\n            data.put(\"title\", title)\r\n            data.put(\"content\", message)\r\n            //On Notification Click Activity\r\n            data.put(\"click_action\", \".LoginActivity\")\r\n\r\n            //jsonObject for POST\r\n            jsonObject.put(\"data\", data)\r\n            //\r\n            jsonObject.put(\"to\", notificationKey)\r\n\r\n            val outputStream: OutputStream =\r\n                BufferedOutputStream(httpsURLConnection.outputStream)\r\n            val writer = BufferedWriter(OutputStreamWriter(outputStream, \"utf-8\"))\r\n            \r\n            writer.write(jsonObject.toString())\r\n            writer.flush()\r\n            writer.close()\r\n\r\n            outputStream.close()\r\n\r\n            //The response code and message of the POST requests\r\n            val responseCode: Int = httpsURLConnection.responseCode\r\n            val responseMessage: String = httpsURLConnection.responseMessage\r\n\r\n\r\n            Log.d(TAG, \"Response from sendMes: $responseCode $responseMessage\")\r\n\r\n\r\n            // Check server STATUS\r\n            if (responseCode in 400..499) {\r\n                httpsURLConnection.errorStream\r\n            } else {\r\n                httpsURLConnection.inputStream\r\n            }\r\n            if (responseCode == 200) {\r\n                Log.e(\r\n                    TAG,\r\n                    \"Notification Sent \\n Title: $title \\n Body: $message\"\r\n                )\r\n            } else {\r\n                Log.e(TAG, \"Notification Error\")\r\n            }\r\n\r\n            httpsURLConnection.disconnect()\r\n\r\n        } catch (e: Exception) {\r\n            e.printStackTrace()\r\n        }\r\n    }\r\n}
-+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-+<+>UTF-8
-+===================================================================
-+diff --git a/app/src/main/java/com/singularity/ipcaplus/chat/ChatActivity.kt b/app/src/main/java/com/singularity/ipcaplus/chat/ChatActivity.kt
-+--- a/app/src/main/java/com/singularity/ipcaplus/chat/ChatActivity.kt	(revision d7d49fadf70fadd33042282dce690a6bd606ece4)
-++++ b/app/src/main/java/com/singularity/ipcaplus/chat/ChatActivity.kt	(date 1642079549061)
-+@@ -32,6 +32,7 @@
-+ import com.singularity.ipcaplus.models.Message
-+ import com.singularity.ipcaplus.utils.Backend
-+ import com.singularity.ipcaplus.utils.Backend.createJsonArrayString
-++import com.singularity.ipcaplus.utils.Backend.getIv
-+ import kotlinx.coroutines.*
-+ import org.json.JSONArray
-+ import org.json.JSONObject
-+@@ -126,39 +127,43 @@
-+                 // get data of ecripted shared preferences ("chatuid" -> "key")
-+                 val keygen = getMetaOx(this, chat_id)
-+                 // Build encryptation data of message send by the user
-+-                var meta = encryptMeta( binding.editTextMessage.text.toString(), keygen.toString())
-+-                val savedText = binding.editTextMessage.text.toString()
-++                getIv(chat_id) {
-++
-++                    var meta = encryptMeta( binding.editTextMessage.text.toString(), keygen.toString(), it.toString())
-++                    val savedText = binding.editTextMessage.text.toString()
-+ 
-+-                val message = Message(
-+-                    Firebase.auth.currentUser!!.uid,
-+-                    meta.toString(),
-+-                    Timestamp.now(),
-+-                    ""
-++                    val message = Message(
-++                        Firebase.auth.currentUser!!.uid,
-++                        meta.toString(),
-++                        Timestamp.now(),
-++                        ""
-+ 
-+-                )
-+-                db.collection("chat").document("$chat_id").collection("message")
-+-                    .add(message.toHash())
-+-                    .addOnSuccessListener { documentReference ->
-++                    )
-++                    db.collection("chat").document("$chat_id").collection("message")
-++                        .add(message.toHash())
-++                        .addOnSuccessListener { documentReference ->
-+ 
-+-                        GlobalScope.launch {
-+-                            withContext(Dispatchers.IO){
-+-                                //APA91bEKDInIYA242YofpahBmhB57pEI4gNT63DJJenWCccJGqeSYrWzj0BSruX49DhVp2vGSY5xJ2fEJk2vhtoraT3_bbjEKw4Nx3eJKj7tttVRPjQs0Uc_OPkrcj4twR70H5tAilnY
-+-                                println("AVEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE"+ savedText)
-+-                                sendNotificationToGroup( chat_id, savedText, "APA91bGaOoMTjTD2s9MU63F1AvLqP6tkwdAFE0Mqs9jbghlSgcWlfe_38CboFiE2iiWFoKqNRwhF0G_TA5X9xegTL0_Tg0OGuFadJuBj1sGZqjqCcmF1EH2ZeRU7ySHosdNkmLmmOyFF")
-+-                            }
-+-                        }
-+-                        Log.d(TAG, "DocumentSnapshot added with ID: ${documentReference.id}")
-++                            GlobalScope.launch {
-++                                withContext(Dispatchers.IO){
-++                                    //APA91bEKDInIYA242YofpahBmhB57pEI4gNT63DJJenWCccJGqeSYrWzj0BSruX49DhVp2vGSY5xJ2fEJk2vhtoraT3_bbjEKw4Nx3eJKj7tttVRPjQs0Uc_OPkrcj4twR70H5tAilnY
-++                                    println("AVEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE"+ savedText)
-++                                    sendNotificationToGroup( chat_id, savedText, "APA91bGaOoMTjTD2s9MU63F1AvLqP6tkwdAFE0Mqs9jbghlSgcWlfe_38CboFiE2iiWFoKqNRwhF0G_TA5X9xegTL0_Tg0OGuFadJuBj1sGZqjqCcmF1EH2ZeRU7ySHosdNkmLmmOyFF")
-++                                }
-++                            }
-++                            Log.d(TAG, "DocumentSnapshot added with ID: ${documentReference.id}")
-+ 
-+ 
-+-                    }
-+-                    .addOnFailureListener { e ->
-+-                        Log.w(TAG, "Error adding document", e)
-+-                    }
-+-                binding.editTextMessage.text.clear()
-++                        }
-++                        .addOnFailureListener { e ->
-++                            Log.w(TAG, "Error adding document", e)
-++                        }
-++                    binding.editTextMessage.text.clear()
-+ 
-+-            }
-+-        }
-++                }
-++            }
-+ 
-++        }
-++
-+         // Show Messages
-+         db.collection("chat").document("$chat_id").collection("message").orderBy("time", Query.Direction.DESCENDING)
-+             .addSnapshotListener { documents, e ->
-+@@ -285,32 +290,34 @@
-+ 
-+                 timeLastMessage?.isVisible = false
-+                 val keygen = getMetaOx(context, chat_id)
-+-                val message_decripted = decryptWithAESmeta(keygen.toString(), messages[position].message)
-++                getIv(chat_id){
-++                    val message_decripted = decryptWithAESmeta(keygen.toString(), messages[position].message, it.toString())
-+ 
-+-               /* if (otherUser) {
-+-                        Backend.getUserProfile(messages[position].user) {
-+-                            val userName = Utilis.getFirstAndLastName(it.name)
-+-                            textViewUsername.text = userName
-+-                        }
-+-                    }
-+-                */
-++                    /* if (otherUser) {
-++                             Backend.getUserProfile(messages[position].user) {
-++                                 val userName = Utilis.getFirstAndLastName(it.name)
-++                                 textViewUsername.text = userName
-++                             }
-++                         }
-++                     */
-+ 
-+-                textViewMessage.text = message_decripted
-+-                println(message_decripted)
-+-                if(position == messages.size - 1) {
-+-                    val data = Utilis.getDate(
-+-                        messages[position].time.seconds * 1000,
-+-                        "yyyy-MM-dd'T'HH:mm:ss.SSS"
-+-                    )
-+-                    timeLastMessage.isVisible = true
-+-                    timeLastMessage.text = Utilis.getHours(data) + ":" + Utilis.getMinutes(data)
-+-                }
-++                    textViewMessage.text = message_decripted
-++                    println(message_decripted)
-++                    if(position == messages.size - 1) {
-++                        val data = Utilis.getDate(
-++                            messages[position].time.seconds * 1000,
-++                            "yyyy-MM-dd'T'HH:mm:ss.SSS"
-++                        )
-++                        timeLastMessage.isVisible = true
-++                        timeLastMessage.text = Utilis.getHours(data) + ":" + Utilis.getMinutes(data)
-++                    }
-+ 
-+-                if (otherUser) {
-+-                    val imageViewUser = findViewById<ImageView?>(R.id.imageViewUser)
-+-                    if (imageViewUser != null) {
-+-                        Utilis.getFile(context, "profilePictures/${messages[position].user}.png", "png") { bitmap ->
-+-                            imageViewUser.setImageBitmap(bitmap)
-++                    if (otherUser) {
-++                        val imageViewUser = findViewById<ImageView?>(R.id.imageViewUser)
-++                        if (imageViewUser != null) {
-++                            Utilis.getFile(context, "profilePictures/${messages[position].user}.png", "png") { bitmap ->
-++                                imageViewUser.setImageBitmap(bitmap)
-++                            }
-+                         }
-+                     }
-+                 }
-+Index: app/src/main/java/com/singularity/ipcaplus/chat/CreateDirectChatActivity.kt
-+IDEA additional info:
-+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-+<+>package com.singularity.ipcaplus.chat\r\n\r\nimport android.content.ContentValues\r\nimport android.content.Intent\r\nimport android.net.Uri\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.Menu\r\nimport android.view.MenuInflater\r\nimport com.google.firebase.Timestamp\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.R\r\nimport com.singularity.ipcaplus.cryptography.metaGenrateKey\r\nimport com.singularity.ipcaplus.databinding.ActivityCreateChatBinding\r\nimport com.singularity.ipcaplus.drawer.DrawerActivty\r\nimport com.singularity.ipcaplus.models.Chat\r\nimport com.singularity.ipcaplus.models.Message\r\nimport com.singularity.ipcaplus.utils.ActivityImageHelper\r\nimport com.singularity.ipcaplus.utils.Backend\r\nimport com.singularity.ipcaplus.utils.Utilis\r\nimport com.singularity.ipcaplus.utils.Utilis.buildSystemMessage\r\nimport com.theartofdev.edmodo.cropper.CropImage\r\nimport com.theartofdev.edmodo.cropper.CropImageView\r\n\r\nclass CreateDirectChatActivity : ActivityImageHelper() {\r\n\r\n\r\n    val db = Firebase.firestore\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n\r\n        // Variables\r\n        var chatName : String\r\n\r\n        var type = intent.getStringExtra(\"type\")!!\r\n        var memberIds = intent.getStringArrayListExtra(\"users\")!!\r\n        println(memberIds)\r\n\r\n        // Generate key for chats\r\n        val keygen = metaGenrateKey()\r\n\r\n            Backend.getUserProfile(memberIds[1]) {\r\n\r\n\r\n                chatName = it.name\r\n                println(\"Nome antes\" + chatName)\r\n\r\n                // Chat data\r\n                var chat = Chat(\r\n                    chatName,\r\n                    type,\r\n                    keygen\r\n                )\r\n\r\n                // System message data\r\n                val message = Message(\r\n                    \"system\",\r\n                    buildSystemMessage(keygen),\r\n                    Timestamp.now(),\r\n                    \"\"\r\n\r\n                )\r\n\r\n                val user = HashMap<String, Any>()\r\n                val admin = hashMapOf<String?, Any>(\r\n                    \"admin\" to true\r\n                )\r\n\r\n                db.collection(\"chat\")\r\n                    .add(chat.toHash())\r\n                    .addOnSuccessListener { documentReference ->\r\n                        db.collection(\"chat\")\r\n                            .document(documentReference.id)\r\n                            .collection(\"message\")\r\n                            .add(message.toHash())\r\n                        for (member in memberIds) {\r\n                            println(\"IDSDSDS\" + memberIds)\r\n                            Backend.getUserProfile(memberIds[0]) {\r\n                                if (member == Firebase.auth.currentUser!!.uid) {\r\n                                    println(\"IF\")\r\n                                    // Chat data\r\n                                    chat = Chat(\r\n                                        it.name,\r\n                                        type,\r\n                                        keygen\r\n                                    )\r\n                                }\r\n                                println(\"NOMEEEEE\" + it.name)\r\n\r\n                                db.collection(\"profile\")\r\n                                    .document(member)\r\n                                    .collection(\"chat\")\r\n                                    .document(documentReference.id)\r\n                                    .set(chat)\r\n                                db.collection(\"chat\")\r\n                                    .document(documentReference.id)\r\n                                    .collection(\"user\")\r\n                                    .document(member)\r\n                                    .set(user)\r\n                                db.collection(\"chat\")\r\n                                    .document(documentReference.id)\r\n                                    .collection(\"user\")\r\n                                    .document(member)\r\n                                    .update(admin)\r\n\r\n                            }\r\n\r\n\r\n\r\n                        }\r\n\r\n                    }\r\n                    .addOnFailureListener { e ->\r\n                        Log.w(ContentValues.TAG, \"Error adding document\", e)\r\n                    }\r\n\r\n                val intent = Intent(this, DrawerActivty::class.java)\r\n                startActivity(intent)\r\n\r\n            }\r\n\r\n\r\n        }\r\n    }
-+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-+<+>UTF-8
-+===================================================================
-+diff --git a/app/src/main/java/com/singularity/ipcaplus/chat/CreateDirectChatActivity.kt b/app/src/main/java/com/singularity/ipcaplus/chat/CreateDirectChatActivity.kt
-+--- a/app/src/main/java/com/singularity/ipcaplus/chat/CreateDirectChatActivity.kt	(revision d7d49fadf70fadd33042282dce690a6bd606ece4)
-++++ b/app/src/main/java/com/singularity/ipcaplus/chat/CreateDirectChatActivity.kt	(date 1642079549076)
-+@@ -13,6 +13,7 @@
-+ import com.google.firebase.firestore.ktx.firestore
-+ import com.google.firebase.ktx.Firebase
-+ import com.singularity.ipcaplus.R
-++import com.singularity.ipcaplus.cryptography.generateRandomIV
-+ import com.singularity.ipcaplus.cryptography.metaGenrateKey
-+ import com.singularity.ipcaplus.databinding.ActivityCreateChatBinding
-+ import com.singularity.ipcaplus.drawer.DrawerActivty
-+@@ -38,6 +39,7 @@
-+         var type = intent.getStringExtra("type")!!
-+         var memberIds = intent.getStringArrayListExtra("users")!!
-+         println(memberIds)
-++        val ivGenerated = generateRandomIV()
-+ 
-+         // Generate key for chats
-+         val keygen = metaGenrateKey()
-+@@ -52,13 +54,14 @@
-+                 var chat = Chat(
-+                     chatName,
-+                     type,
-+-                    keygen
-++                    keygen,
-++                    ivGenerated
-+                 )
-+ 
-+                 // System message data
-+                 val message = Message(
-+                     "system",
-+-                    buildSystemMessage(keygen),
-++                    buildSystemMessage(keygen, ivGenerated),
-+                     Timestamp.now(),
-+                     ""
-+ 
-+@@ -85,7 +88,8 @@
-+                                     chat = Chat(
-+                                         it.name,
-+                                         type,
-+-                                        keygen
-++                                        keygen,
-++                                        ivGenerated
-+                                     )
-+                                 }
-+                                 println("NOMEEEEE" + it.name)
-+Index: app/src/main/java/com/singularity/ipcaplus/utils/Utilis.kt
-+IDEA additional info:
-+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-+<+>package com.singularity.ipcaplus.utils\r\n\r\nimport android.app.Activity\r\nimport android.app.DownloadManager\r\nimport android.content.Context\r\nimport android.content.Intent\r\nimport android.content.res.Resources\r\nimport android.graphics.Bitmap\r\nimport android.graphics.BitmapFactory\r\nimport android.graphics.drawable.BitmapDrawable\r\nimport android.graphics.drawable.GradientDrawable\r\nimport android.net.Uri\r\nimport android.os.Build\r\nimport android.provider.MediaStore\r\nimport android.util.Log\r\nimport androidx.annotation.RequiresApi\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.google.firebase.storage.FirebaseStorage\r\nimport com.google.firebase.storage.StorageReference\r\nimport com.google.firebase.storage.ktx.storage\r\nimport com.singularity.ipcaplus.R\r\nimport com.singularity.ipcaplus.cryptography.encryptMeta\r\nimport java.io.File\r\nimport java.io.IOException\r\nimport java.lang.Exception\r\nimport java.net.URI\r\nimport java.text.SimpleDateFormat\r\nimport java.time.LocalDate\r\nimport java.util.*\r\nimport java.util.regex.Pattern\r\n\r\nimport androidx.core.content.res.ResourcesCompat\r\nimport androidx.core.graphics.drawable.toBitmap\r\nimport com.google.firebase.auth.FirebaseAuth\r\nimport java.io.ByteArrayOutputStream\r\nimport com.singularity.ipcaplus.chat.ChatActivity\r\n\r\n\r\nobject  Utilis {\r\n\r\n    /*\r\n        This function return the current month id\r\n     */\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    fun getCurrentMonthId(): Int {\r\n\r\n        val c = LocalDate.now()\r\n        val strArray = Pattern.compile(\"-\").split(c.toString())\r\n\r\n        return strArray[1].toInt()\r\n    }\r\n\r\n    /*\r\n        This function return the current year id\r\n     */\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    fun getCurrentYear(): String {\r\n\r\n        val c = LocalDate.now()\r\n        val strArray = Pattern.compile(\"-\").split(c.toString())\r\n\r\n        return strArray[0]\r\n    }\r\n\r\n    @RequiresApi(Build.VERSION_CODES.O)\r\n    fun getYearByCalendarId(id: Int): Int {\r\n\r\n        var count = id\r\n        var result = 2021 - 121 // add 1900\r\n\r\n        while (count > 0) {\r\n            count -= 1\r\n            result ++\r\n        }\r\n\r\n        return result\r\n    }\r\n\r\n    /*\r\n        This function return the month value in string by an id\r\n        @month = month id\r\n     */\r\n    fun getMonthById(month: Int): String {\r\n        return when (month) {\r\n            1 -> \"Janeiro\"\r\n            2 -> \"Fevereiro\"\r\n            3 -> \"Março\"\r\n            4 -> \"Abril\"\r\n            5 -> \"Maio\"\r\n            6 -> \"Junho\"\r\n            7 -> \"Julho\"\r\n            8 -> \"Agosto\"\r\n            9 -> \"Setembro\"\r\n            10 -> \"Outubro\"\r\n            11 -> \"Novembro\"\r\n            12 -> \"Dezembro\"\r\n            else -> \"None\"\r\n        }\r\n    }\r\n\r\n    fun convertHoursStringToInt(strVal: String): Int {\r\n        val strArray = Pattern.compile(\":\").split(strVal)\r\n        val result = strArray[0] + strArray[1]\r\n        return result.toInt()\r\n    }\r\n\r\n    fun getDate(milliSeconds: Long, dateFormat: String?): String {\r\n        // Create a DateFormatter object for displaying date in specified format.\r\n        val formatter = SimpleDateFormat(dateFormat)\r\n\r\n        // Create a calendar object that will convert the date and time value in milliseconds to date.\r\n        val calendar: Calendar = Calendar.getInstance()\r\n        calendar.timeInMillis = milliSeconds\r\n        return formatter.format(calendar.time)\r\n    }\r\n\r\n\r\n    /*\r\n        This function split the date and return only the day\r\n        @date = default date\r\n     */\r\n    fun getDay(dateTime: String): String {\r\n\r\n        // Split the date\r\n        val strArray = Pattern.compile(\"-\").split(dateTime)\r\n        val strArray2 = Pattern.compile(\"T\").split(strArray[2])\r\n\r\n        return strArray2[0]\r\n    }\r\n\r\n\r\n    /*\r\n        This function split the date and return only the month in text\r\n        @date = default date\r\n     */\r\n    fun getMonth(dateTime: String): String {\r\n\r\n        // Split the date\r\n        val strArray = Pattern.compile(\"-\").split(dateTime)\r\n\r\n        return strArray[1].toString()\r\n    }\r\n\r\n\r\n    /*\r\n        This function split the date and return only the year in text\r\n        @date = default date\r\n     */\r\n    fun getYear(dateTime: String): String {\r\n\r\n        // Split the date\r\n        val strArray = Pattern.compile(\"-\").split(dateTime)\r\n\r\n        return strArray[0].toString()\r\n    }\r\n\r\n\r\n    /*\r\n        This function split the date and return only the Hours in text\r\n        @date = default date\r\n     */\r\n    fun getHours(dateTime: String): String {\r\n\r\n        // Split the date\r\n        val strArray = Pattern.compile(\"T\").split(dateTime)\r\n        val strArray2 = Pattern.compile(\":\").split(strArray[1])\r\n\r\n        return strArray2[0].toString()\r\n    }\r\n\r\n\r\n    /*\r\n        This function split the date and return only the Minutes in text\r\n        @date = default date\r\n     */\r\n    fun getMinutes(dateTime: String): String {\r\n\r\n        // Split the date\r\n        val strArray = Pattern.compile(\"T\").split(dateTime)\r\n        val strArray2 = Pattern.compile(\":\").split(strArray[1])\r\n\r\n        return strArray2[1].toString()\r\n    }\r\n\r\n    /*\r\n        This function get the buffer with the name of filename on assets folder\r\n     */\r\n\r\n    fun getJsonDataFromAsset(context: Context, fileName: String): String? {\r\n        val jsonString: String\r\n        try {\r\n            jsonString = context.assets.open(fileName).bufferedReader().use { it.readText() }\r\n        } catch (ioException: IOException) {\r\n            ioException.printStackTrace()\r\n            return null\r\n        }\r\n        return jsonString\r\n    }\r\n\r\n    fun getFirstAndLastName(fullName: String): String {\r\n\r\n        val nameArray = Pattern.compile(\" \").split(fullName)\r\n\r\n        return nameArray[0] + \" \" + nameArray[nameArray.size-1]\r\n    }\r\n\r\n    /*\r\n       ------------------------------------------------ Images ------------------------------------------------\r\n    */\r\n\r\n    fun convertDrawableToBitmap(context: Context, drawable: Int): Bitmap {\r\n        return BitmapFactory.decodeResource(context.resources, R.drawable.circle)\r\n    }\r\n\r\n\r\n    fun getFile(context: Context, path: String, suffix: String, callback:(Bitmap)->Unit) {\r\n\r\n        // Retrieve image from firebase\r\n        val storageRef = FirebaseStorage.getInstance().reference.child(path)\r\n        val localfile = File.createTempFile(\"tempImage\", suffix)\r\n\r\n        // Set ImageView\r\n        storageRef.getFile(localfile).addOnSuccessListener {\r\n            val bitmap = BitmapFactory.decodeFile(localfile.absolutePath)\r\n            callback(bitmap)\r\n        }.addOnFailureListener {\r\n            val bitmap = (ResourcesCompat.getDrawable(\r\n                context.resources,\r\n                R.drawable.circle,\r\n                null\r\n            ) as GradientDrawable?)!!.toBitmap()\r\n            callback(bitmap)\r\n        }\r\n\r\n    }\r\n\r\n    fun downloadFile(context: Context, fileName: String, fileExtension: String, destinationDirectory: String, uri: Uri) {\r\n\r\n        val downloadManager = context.getSystemService(Context.DOWNLOAD_SERVICE) as DownloadManager\r\n        val request = DownloadManager.Request(uri)\r\n\r\n        request.setNotificationVisibility(DownloadManager.Request.VISIBILITY_VISIBLE_NOTIFY_COMPLETED)\r\n        request.setDestinationInExternalPublicDir(destinationDirectory, fileName + fileExtension)\r\n\r\n        downloadManager.enqueue(request)\r\n    }\r\n\r\n\r\n    fun uploadFile(filePath: Uri, targetPath: String) {\r\n\r\n        val storage = Firebase.storage\r\n        val storageRef = storage.reference\r\n\r\n        if (filePath != Uri.EMPTY) {\r\n            val ref: StorageReference = storageRef.child(targetPath)\r\n            ref.putFile(filePath)\r\n        }\r\n    }\r\n\r\n\r\n    fun getFileIcon(fileName:String): Int {\r\n        return if (fileName.contains(\".\")) {\r\n\r\n            val extensionArray = Pattern.compile(\"[.]\").split(fileName)\r\n            val extension = extensionArray[extensionArray.size-1]\r\n\r\n            when (extension) {\r\n                \"png\", \"jpg\", \"jpeg\", \"jep\", \"jfif\", \"gif\" -> R.drawable.ic_picture\r\n                \"invisible\" -> -1\r\n                else -> R.drawable.ic_file\r\n            }\r\n\r\n        } else\r\n            -1\r\n    }\r\n\r\n\r\n    fun uniqueImageNameGen(): String {\r\n        val characters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!#$$%&/()=@[]{}\"\r\n\r\n        val sb = StringBuilder(15)\r\n\r\n        for(x in 0 until 15){\r\n            val random = (characters.indices).random()\r\n            sb.append(characters[random])\r\n        }\r\n\r\n        return sb.toString()\r\n    }\r\n\r\n\r\n    /*\r\n        This function gets the domain of email\r\n        split remove the @ and make the array like this -> [a20115][alunos.ipca.pt]\r\n     */\r\n    fun getEmailDomain(email: String) : String{\r\n        val strArray = Pattern.compile(\"@\").split(email)\r\n        val result= strArray[1]\r\n\r\n        return result.toString()\r\n\r\n    }\r\n\r\n    /*\r\n        ------------------------------------------------ Chat ------------------------------------------------\r\n     */\r\n\r\n    /*\r\n       This function returns the encrypted system message\r\n       @callBack = return the list\r\n    */\r\n    fun buildSystemMessage(key: String) : String {\r\n\r\n        // Build encryptation data of first message send by the system\r\n        var message = encryptMeta(\"This chat is being encripted with Singularity Encryption!\", key)\r\n\r\n        return message.toString()\r\n\r\n    }\r\n\r\n    // Que merda é esta :v\r\n    fun getUID(): String? {\r\n        val firebaseAuth = FirebaseAuth.getInstance()\r\n        return firebaseAuth.uid\r\n    }\r\n\r\n    fun calculateInSampleSize(options: BitmapFactory.Options, reqWidth: Int, reqHeight: Int): Int {\r\n        // Raw height and width of image\r\n        val (height: Int, width: Int) = options.run { outHeight to outWidth }\r\n        var inSampleSize = 1\r\n\r\n        if (height > reqHeight || width > reqWidth) {\r\n\r\n            val halfHeight: Int = height / 2\r\n            val halfWidth: Int = width / 2\r\n\r\n            // Calculate the largest inSampleSize value that is a power of 2 and keeps both\r\n            // height and width larger than the requested height and width.\r\n            while (halfHeight / inSampleSize >= reqHeight && halfWidth / inSampleSize >= reqWidth) {\r\n                inSampleSize *= 2\r\n            }\r\n        }\r\n\r\n        return inSampleSize\r\n    }\r\n\r\n}
-+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-+<+>UTF-8
-+===================================================================
-+diff --git a/app/src/main/java/com/singularity/ipcaplus/utils/Utilis.kt b/app/src/main/java/com/singularity/ipcaplus/utils/Utilis.kt
-+--- a/app/src/main/java/com/singularity/ipcaplus/utils/Utilis.kt	(revision d7d49fadf70fadd33042282dce690a6bd606ece4)
-++++ b/app/src/main/java/com/singularity/ipcaplus/utils/Utilis.kt	(date 1642079549049)
-+@@ -310,10 +310,10 @@
-+        This function returns the encrypted system message
-+        @callBack = return the list
-+     */
-+-    fun buildSystemMessage(key: String) : String {
-++    fun buildSystemMessage(key: String, iv : String) : String {
-+ 
-+         // Build encryptation data of first message send by the system
-+-        var message = encryptMeta("This chat is being encripted with Singularity Encryption!", key)
-++        var message = encryptMeta("This chat is being encripted with Singularity Encryption!", key, iv)
-+ 
-+         return message.toString()
-+ 
-+Index: app/src/main/java/com/singularity/ipcaplus/chat/ChatsFragment.kt
-+IDEA additional info:
-+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-+<+>package com.singularity.ipcaplus.chat\r\n\r\nimport android.content.Intent\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ImageView\r\nimport android.widget.TextView\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.recyclerview.widget.DefaultItemAnimator\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.utils.Backend\r\nimport com.singularity.ipcaplus.R\r\nimport com.singularity.ipcaplus.cryptography.decryptWithAESmeta\r\nimport com.singularity.ipcaplus.cryptography.getMetaOx\r\nimport com.singularity.ipcaplus.utils.Utilis\r\nimport com.singularity.ipcaplus.cryptography.saveKeygenOx\r\nimport com.singularity.ipcaplus.databinding.FragmentChatsBinding\r\nimport com.singularity.ipcaplus.models.Chat\r\n\r\n\r\nclass ChatsFragment : Fragment() {\r\n\r\n    // Variables\r\n    var chats = arrayListOf<Chat>()\r\n    var chatIds = arrayListOf<String>()\r\n\r\n    private var _binding: FragmentChatsBinding? = null\r\n    private var mAdapter: RecyclerView.Adapter<*>? = null\r\n    private var mLayoutManager: LinearLayoutManager? = null\r\n\r\n    private val binding get() = _binding!!\r\n\r\n    val db = Firebase.firestore\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n\r\n\r\n        _binding = FragmentChatsBinding.inflate(layoutInflater)\r\n        val root: View = binding.root\r\n\r\n        // Get Group Chats\r\n        db.collection(\"profile\").document(\"${Firebase.auth.currentUser!!.uid}\").collection(\"chat\")\r\n            .addSnapshotListener { documents, e ->\r\n                documents?.let {\r\n                    chats.clear()\r\n                    chatIds.clear()\r\n                    for (document in it) {\r\n                        val chat = Chat.fromHash(document)\r\n                        if (chat.type == \"chat\") {\r\n                            chats.add(chat)\r\n                            chatIds.add(document.id)\r\n                        }\r\n                    }\r\n                    mAdapter?.notifyDataSetChanged()\r\n                }\r\n            }\r\n\r\n        // RecyclerView Chat\r\n        mLayoutManager = LinearLayoutManager(activity, LinearLayoutManager.VERTICAL, false)\r\n        binding.recyclerViewGroups.layoutManager = mLayoutManager\r\n        mAdapter = ChatAdapter()\r\n        binding.recyclerViewGroups.itemAnimator = DefaultItemAnimator()\r\n        binding.recyclerViewGroups.adapter = mAdapter\r\n\r\n        return root\r\n    }\r\n\r\n    /*\r\n        Refresh Activity Content\r\n    */\r\n    override fun onResume() {\r\n        super.onResume()\r\n\r\n        // Get Group Chats\r\n        db.collection(\"profile\").document(\"${Firebase.auth.currentUser!!.uid}\").collection(\"chat\")\r\n            .addSnapshotListener { documents, e ->\r\n                documents?.let {\r\n                    chats.clear()\r\n                    chatIds.clear()\r\n                    for (document in it) {\r\n                        val chat = Chat.fromHash(document)\r\n                        if (chat.type == \"chat\" || chat.type == \"group\") {\r\n                            chats.add(chat)\r\n                            chatIds.add(document.id)\r\n                        }\r\n                    }\r\n                    println(\"CHAT \" + chats)\r\n                    mAdapter?.notifyDataSetChanged()\r\n                }\r\n            }\r\n\r\n    }\r\n\r\n\r\n    override fun onDestroyView() {\r\n        super.onDestroyView()\r\n        _binding = null\r\n    }\r\n\r\n\r\n    inner class ChatAdapter : RecyclerView.Adapter<ChatAdapter.ViewHolder>() {\r\n\r\n        inner class ViewHolder(val v: View) : RecyclerView.ViewHolder(v)\r\n\r\n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n                return ViewHolder(\r\n                    LayoutInflater.from(parent.context).inflate(R.layout.row_chat, parent, false)\r\n                )\r\n\r\n        }\r\n\r\n        @RequiresApi(Build.VERSION_CODES.M)\r\n        override fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n\r\n                holder.v.apply {\r\n\r\n                    // Variables\r\n                    val textViewMessage = findViewById<TextView>(R.id.textViewChatName)\r\n                    val imageViewChatGroup = findViewById<ImageView>(R.id.imageViewChatGroup)\r\n                    val lastMessageTime = findViewById<TextView>(R.id.lastMessageTime)\r\n                    val lastMessageText = findViewById<TextView>(R.id.textViewLastMessage)\r\n\r\n\r\n                    textViewMessage.text = chats[position].name\r\n\r\n                    // sync data recieved form direbase with encrypted shared preferences (key -> 1x)\r\n                    saveKeygenOx(context, chatIds[position], chats[position].ox.toString())\r\n                    // Set Last Chat Message\r\n                    Backend.getLastMessageByChatID(chatIds[position]) {\r\n                        val data = Utilis.getDate(it!!.time.seconds *1000, \"yyyy-MM-dd'T'HH:mm:ss.SSS\")\r\n                        lastMessageTime.text = Utilis.getHours(data) + \":\" + Utilis.getMinutes(data)\r\n                        val keygen = getMetaOx(context, chatIds[position])\r\n                        val message_decripted = decryptWithAESmeta(keygen.toString(), it.message)\r\n                        lastMessageText.text = message_decripted\r\n                    }\r\n\r\n                    Utilis.getFile(this.context, \"chats/${chatIds[position]}/icon.png\", \"png\") { bitmap ->\r\n                        imageViewChatGroup.setImageBitmap(bitmap)\r\n                    }\r\n\r\n                }\r\n                holder.v.setOnClickListener {\r\n                    val intent = Intent(activity, ChatActivity::class.java)\r\n                    intent.putExtra(\"chat_id\", chatIds[position])\r\n                    activity?.startActivity(intent)\r\n                }\r\n\r\n        }\r\n\r\n        override fun getItemViewType(position: Int) : Int {\r\n            if (chats[position].type == \"group\") {\r\n                return 1\r\n            } else {\r\n                return 0\r\n            }\r\n        }\r\n\r\n        override fun getItemCount(): Int {\r\n            return chats.size\r\n        }\r\n    }\r\n\r\n\r\n}
-+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-+<+>UTF-8
-+===================================================================
-+diff --git a/app/src/main/java/com/singularity/ipcaplus/chat/ChatsFragment.kt b/app/src/main/java/com/singularity/ipcaplus/chat/ChatsFragment.kt
-+--- a/app/src/main/java/com/singularity/ipcaplus/chat/ChatsFragment.kt	(revision d7d49fadf70fadd33042282dce690a6bd606ece4)
-++++ b/app/src/main/java/com/singularity/ipcaplus/chat/ChatsFragment.kt	(date 1642079549072)
-+@@ -24,6 +24,7 @@
-+ import com.singularity.ipcaplus.cryptography.saveKeygenOx
-+ import com.singularity.ipcaplus.databinding.FragmentChatsBinding
-+ import com.singularity.ipcaplus.models.Chat
-++import com.singularity.ipcaplus.utils.Backend.getIv
-+ 
-+ 
-+ class ChatsFragment : Fragment() {
-+@@ -138,13 +139,18 @@
-+                     saveKeygenOx(context, chatIds[position], chats[position].ox.toString())
-+                     // Set Last Chat Message
-+                     Backend.getLastMessageByChatID(chatIds[position]) {
-++
-+                         val data = Utilis.getDate(it!!.time.seconds *1000, "yyyy-MM-dd'T'HH:mm:ss.SSS")
-+                         lastMessageTime.text = Utilis.getHours(data) + ":" + Utilis.getMinutes(data)
-++
-+                         val keygen = getMetaOx(context, chatIds[position])
-+-                        val message_decripted = decryptWithAESmeta(keygen.toString(), it.message)
-+-                        lastMessageText.text = message_decripted
-+-                    }
-++                        getIv(chatIds[position]){iv ->
-++                            val message_decripted = decryptWithAESmeta(keygen.toString(), it.message, iv.toString())
-++                            lastMessageText.text = message_decripted
-++                        }
-+ 
-++                    }
-++
-+                     Utilis.getFile(this.context, "chats/${chatIds[position]}/icon.png", "png") { bitmap ->
-+                         imageViewChatGroup.setImageBitmap(bitmap)
-+                     }
-+Index: app/src/main/java/com/singularity/ipcaplus/chat/CreateChatActivity.kt
-+IDEA additional info:
-+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-+<+>package com.singularity.ipcaplus.chat\r\n\r\nimport android.content.ContentValues\r\nimport android.content.Intent\r\nimport android.net.Uri\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport android.os.Bundle\r\nimport android.util.Log\r\nimport android.view.Menu\r\nimport android.view.MenuInflater\r\nimport android.widget.ImageView\r\nimport com.google.firebase.Timestamp\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.R\r\nimport com.singularity.ipcaplus.cryptography.metaGenrateKey\r\nimport com.singularity.ipcaplus.databinding.ActivityCreateChatBinding\r\nimport com.singularity.ipcaplus.drawer.DrawerActivty\r\nimport com.singularity.ipcaplus.models.Chat\r\nimport com.singularity.ipcaplus.models.Message\r\nimport com.singularity.ipcaplus.utils.ActivityImageHelper\r\nimport com.singularity.ipcaplus.utils.Backend\r\nimport com.singularity.ipcaplus.utils.Utilis\r\nimport com.singularity.ipcaplus.utils.Utilis.buildSystemMessage\r\nimport com.theartofdev.edmodo.cropper.CropImage\r\nimport com.theartofdev.edmodo.cropper.CropImageView\r\n\r\nclass CreateChatActivity : ActivityImageHelper() {\r\n\r\n    // Variables\r\n    private lateinit var binding: ActivityCreateChatBinding\r\n    var uri = Uri.EMPTY\r\n\r\n    val db = Firebase.firestore\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_create_chat)\r\n\r\n        binding = ActivityCreateChatBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        // Variables\r\n        var chatName : String\r\n\r\n        var type = intent.getStringExtra(\"type\")!!\r\n        var memberIds = intent.getStringArrayListExtra(\"users\")!!\r\n\r\n        // Generate key for chats\r\n        val keygen = metaGenrateKey()\r\n\r\n        binding.imageViewChatPhoto.setOnClickListener {\r\n            checkPermission(android.Manifest.permission.READ_EXTERNAL_STORAGE, STORAGE_PERMISSION_CODE)\r\n        }\r\n\r\n\r\n            // Create Chat\r\n            binding.fabCreateChat.setOnClickListener {\r\n\r\n\r\n                chatName = binding.editTextChatName.text.toString()\r\n\r\n                // Chat data\r\n                val chat = Chat(\r\n                    chatName,\r\n                    type.toString(),\r\n                    keygen\r\n                )\r\n\r\n                // System message data\r\n                val message = Message(\r\n                    \"system\",\r\n                    buildSystemMessage(keygen),\r\n                    Timestamp.now(),\r\n                    \"\"\r\n\r\n                )\r\n\r\n                val user = HashMap<String, Any>()\r\n                val admin = hashMapOf<String?, Any>(\r\n                    \"admin\" to true\r\n                )\r\n\r\n                db.collection(\"chat\")\r\n                    .add(chat.toHash())\r\n                    .addOnSuccessListener { documentReference ->\r\n                        db.collection(\"chat\")\r\n                            .document(documentReference.id)\r\n                            .collection(\"message\")\r\n                            .add(message.toHash())\r\n                        for (member in memberIds) {\r\n                            db.collection(\"profile\")\r\n                                .document(member)\r\n                                .collection(\"chat\")\r\n                                .document(documentReference.id)\r\n                                .set(chat)\r\n                            db.collection(\"chat\")\r\n                                .document(documentReference.id)\r\n                                .collection(\"user\")\r\n                                .document(member)\r\n                                .set(user)\r\n                            if (member == Firebase.auth.currentUser!!.uid) {\r\n                                db.collection(\"chat\")\r\n                                    .document(documentReference.id)\r\n                                    .collection(\"user\")\r\n                                    .document(member)\r\n                                    .update(admin)\r\n                            }\r\n                            if (uri != Uri.EMPTY)\r\n                                Utilis.uploadFile(uri, \"chats/${documentReference.id}/icon.png\")\r\n\r\n                        }\r\n\r\n                    }\r\n                    .addOnFailureListener { e ->\r\n                        Log.w(ContentValues.TAG, \"Error adding document\", e)\r\n                    }\r\n\r\n                val intent = Intent(this, DrawerActivty::class.java)\r\n                startActivity(intent)\r\n\r\n            }\r\n\r\n    }\r\n    /*\r\n       This function happen after picking photo, and make changes in the activity\r\n    */\r\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\r\n        super.onActivityResult(requestCode, resultCode, data)\r\n\r\n        if(requestCode == IMAGE_REQUEST_CODE && resultCode == RESULT_OK){\r\n            CropImage.activity(data?.data)\r\n                .setGuidelines(CropImageView.Guidelines.ON)\r\n                .setAspectRatio(1,1)\r\n                .start(this)\r\n        }\r\n\r\n        if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {\r\n            val result = CropImage.getActivityResult(data)\r\n            if (resultCode == RESULT_OK) {\r\n                binding.imageViewChatPhoto.setImageURI(result.uri)\r\n                uri = result.uri\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n    /*\r\n       This function create the action bar above the activity\r\n    */\r\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\r\n        val inflater: MenuInflater = menuInflater\r\n        inflater.inflate(R.menu.menu_chat, menu)\r\n        supportActionBar?.setDisplayHomeAsUpEnabled(true)\r\n        supportActionBar?.setHomeAsUpIndicator(R.drawable.ic_arrow_back_24)\r\n\r\n\r\n        return true\r\n    }\r\n}
-+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-+<+>UTF-8
-+===================================================================
-+diff --git a/app/src/main/java/com/singularity/ipcaplus/chat/CreateChatActivity.kt b/app/src/main/java/com/singularity/ipcaplus/chat/CreateChatActivity.kt
-+--- a/app/src/main/java/com/singularity/ipcaplus/chat/CreateChatActivity.kt	(revision d7d49fadf70fadd33042282dce690a6bd606ece4)
-++++ b/app/src/main/java/com/singularity/ipcaplus/chat/CreateChatActivity.kt	(date 1642079549065)
-+@@ -9,11 +9,14 @@
-+ import android.view.Menu
-+ import android.view.MenuInflater
-+ import android.widget.ImageView
-++import android.widget.TextView
-++import androidx.appcompat.app.ActionBar
-+ import com.google.firebase.Timestamp
-+ import com.google.firebase.auth.ktx.auth
-+ import com.google.firebase.firestore.ktx.firestore
-+ import com.google.firebase.ktx.Firebase
-+ import com.singularity.ipcaplus.R
-++import com.singularity.ipcaplus.cryptography.generateRandomIV
-+ import com.singularity.ipcaplus.cryptography.metaGenrateKey
-+ import com.singularity.ipcaplus.databinding.ActivityCreateChatBinding
-+ import com.singularity.ipcaplus.drawer.DrawerActivty
-+@@ -39,6 +42,13 @@
-+ 
-+         binding = ActivityCreateChatBinding.inflate(layoutInflater)
-+         setContentView(binding.root)
-++        supportActionBar?.displayOptions = ActionBar.DISPLAY_SHOW_CUSTOM
-++        supportActionBar?.setCustomView(R.layout.custom_bar_layout)
-++        findViewById<TextView>(R.id.AppBarTittle).text = "Novo Grupo"
-++        // Back button
-++        findViewById<ImageView>(R.id.BackButtonImageView).setOnClickListener{
-++            finish()
-++        }
-+ 
-+         // Variables
-+         var chatName : String
-+@@ -59,18 +69,20 @@
-+ 
-+ 
-+                 chatName = binding.editTextChatName.text.toString()
-++                val ivGenerated = generateRandomIV()
-+ 
-+                 // Chat data
-+                 val chat = Chat(
-+                     chatName,
-+                     type.toString(),
-+-                    keygen
-++                    keygen,
-++                    ivGenerated
-+                 )
-+ 
-+                 // System message data
-+                 val message = Message(
-+                     "system",
-+-                    buildSystemMessage(keygen),
-++                    buildSystemMessage(keygen, ivGenerated),
-+                     Timestamp.now(),
-+                     ""
-+ 
-+@@ -144,17 +156,4 @@
-+             }
-+         }
-+     }
-+-
-+-    /*
-+-       This function create the action bar above the activity
-+-    */
-+-    override fun onCreateOptionsMenu(menu: Menu): Boolean {
-+-        val inflater: MenuInflater = menuInflater
-+-        inflater.inflate(R.menu.menu_chat, menu)
-+-        supportActionBar?.setDisplayHomeAsUpEnabled(true)
-+-        supportActionBar?.setHomeAsUpIndicator(R.drawable.ic_arrow_back_24)
-+-
-+-
-+-        return true
-+-    }
-+ }
-+\ No newline at end of file
-+Index: app/src/main/java/com/singularity/ipcaplus/models/Chat.kt
-+IDEA additional info:
-+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-+<+>package com.singularity.ipcaplus.models\r\n\r\nimport com.google.firebase.firestore.QueryDocumentSnapshot\r\n\r\nclass Chat {\r\n    var name : String = \"\"\r\n    var type : String = \"\"\r\n    var ox : String? = \"\"\r\n    var id : String? =  null\r\n\r\n    constructor(name : String, type : String, ox : String) {\r\n        this.name = name\r\n        this.type = type\r\n        this.ox = ox\r\n    }\r\n\r\n    fun toHash() :HashMap<String, Any> {\r\n        var hashMap = HashMap<String, Any>()\r\n        hashMap.put(\"name\", name)\r\n        hashMap.put(\"type\", type)\r\n        hashMap.put(\"ox\", ox!!)\r\n        return hashMap\r\n    }\r\n\r\n    companion object {\r\n        fun fromHash(hashMap: QueryDocumentSnapshot) : Chat {\r\n            val chat = Chat(\r\n                hashMap[\"name\"] as String,\r\n                hashMap[\"type\"] as String,\r\n                hashMap[\"ox\"] as String\r\n            )\r\n            return chat\r\n        }\r\n    }\r\n}
-+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-+<+>UTF-8
-+===================================================================
-+diff --git a/app/src/main/java/com/singularity/ipcaplus/models/Chat.kt b/app/src/main/java/com/singularity/ipcaplus/models/Chat.kt
-+--- a/app/src/main/java/com/singularity/ipcaplus/models/Chat.kt	(revision d7d49fadf70fadd33042282dce690a6bd606ece4)
-++++ b/app/src/main/java/com/singularity/ipcaplus/models/Chat.kt	(date 1642077007855)
-+@@ -7,11 +7,13 @@
-+     var type : String = ""
-+     var ox : String? = ""
-+     var id : String? =  null
-++    var iv : String? = ""
-+ 
-+-    constructor(name : String, type : String, ox : String) {
-++    constructor(name : String, type : String, ox : String, iv : String) {
-+         this.name = name
-+         this.type = type
-+         this.ox = ox
-++        this.iv = iv
-+     }
-+ 
-+     fun toHash() :HashMap<String, Any> {
-+@@ -19,6 +21,7 @@
-+         hashMap.put("name", name)
-+         hashMap.put("type", type)
-+         hashMap.put("ox", ox!!)
-++        hashMap.put("iv", iv!!)
-+         return hashMap
-+     }
-+ 
-+@@ -27,7 +30,9 @@
-+             val chat = Chat(
-+                 hashMap["name"] as String,
-+                 hashMap["type"] as String,
-+-                hashMap["ox"] as String
-++                hashMap["ox"] as String,
-++                hashMap["iv"] as String
-++
-+             )
-+             return chat
-+         }
-+Index: app/src/main/java/com/singularity/ipcaplus/AddPeopleActivity.kt
-+IDEA additional info:
-+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-+<+>package com.singularity.ipcaplus\r\n\r\nimport android.content.Intent\r\nimport android.os.Bundle\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ImageView\r\nimport android.widget.TextView\r\nimport androidx.appcompat.app.AppCompatActivity\r\nimport androidx.recyclerview.widget.DefaultItemAnimator\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.chat.CreateChatActivity\r\nimport com.singularity.ipcaplus.databinding.ActivityAddPeopleBinding\r\nimport com.singularity.ipcaplus.models.Chat\r\nimport com.singularity.ipcaplus.models.Profile\r\nimport com.singularity.ipcaplus.utils.Backend\r\nimport com.singularity.ipcaplus.utils.Utilis\r\n\r\nclass AddPeopleActivity: AppCompatActivity() {\r\n\r\n    var users = arrayListOf<Profile>()\r\n    var selectedUsers = arrayListOf<Profile>()\r\n\r\n    private lateinit var binding: ActivityAddPeopleBinding\r\n\r\n    private var userAdapter: RecyclerView.Adapter<*>? = null\r\n    private var userSelectedAdapter: RecyclerView.Adapter<*>? = null\r\n\r\n    private var userLayoutManager: LinearLayoutManager? = null\r\n    private var userSelectedLayoutManager: LinearLayoutManager? = null\r\n\r\n\r\n    val db = Firebase.firestore\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        setContentView(R.layout.activity_add_people)\r\n        binding = ActivityAddPeopleBinding.inflate(layoutInflater)\r\n        setContentView(binding.root)\r\n\r\n        binding.backBtn.setOnClickListener {\r\n            finish()\r\n        }\r\n\r\n        // Add people with a chat already created\r\n        if (intent.hasExtra(\"chat_id\")) {\r\n            val chat_id = intent.getStringExtra(\"chat_id\")\r\n            Backend.getAllUsersExceptChatUsers(chat_id!!) {\r\n                users.clear()\r\n                users.addAll(it)\r\n                userAdapter?.notifyDataSetChanged()\r\n            }\r\n\r\n            // Continue button\r\n            binding.fabCreateChat.setOnClickListener {\r\n\r\n                Backend.db.collection(\"chat\")\r\n                    .document(chat_id)\r\n                    .get()\r\n                    .addOnSuccessListener { document ->\r\n\r\n                        val chat = Chat(\r\n                            document[\"name\"] as String,\r\n                            document[\"type\"] as String,\r\n                            document[\"ox\"] as String\r\n                        )\r\n\r\n                        val selectedUsersIds = arrayListOf<String>()\r\n                        for(user in selectedUsers) {\r\n                            selectedUsersIds.add(user.id!!)\r\n                        }\r\n\r\n                        Backend.addUsersIntoChat(chat, chat_id, selectedUsersIds) {\r\n                            finish()\r\n                        }\r\n\r\n                    }\r\n\r\n            }\r\n        }\r\n        // Add people and create chat for the first time\r\n        else {\r\n            Backend.getAllUsersExceptCurrent {\r\n                users.clear()\r\n                users.addAll(it)\r\n                userAdapter?.notifyDataSetChanged()\r\n            }\r\n\r\n            // Continue button\r\n            binding.fabCreateChat.setOnClickListener {\r\n\r\n                val selectedUsersIds = arrayListOf<String>()\r\n                for(user in selectedUsers) {\r\n                    selectedUsersIds.add(user.id!!)\r\n                }\r\n\r\n                // Add current user to users list\r\n                Backend.getUserProfile(Firebase.auth.currentUser!!.uid) {\r\n                    selectedUsersIds.add(it.id!!)\r\n\r\n                    // Send users list to chat creation\r\n                    val intent = Intent(this, CreateChatActivity::class.java)\r\n                    intent.putExtra(\"users\", selectedUsersIds)\r\n                    intent.putExtra(\"type\", \"group\")\r\n                    startActivity(intent)\r\n                }\r\n            }\r\n        }\r\n\r\n        // Recycler View All Users\r\n        userLayoutManager = LinearLayoutManager(this, LinearLayoutManager.VERTICAL, false)\r\n        binding.recyclerViewUsers.layoutManager = userLayoutManager\r\n        userAdapter = AllUsersAdapter()\r\n        binding.recyclerViewUsers.itemAnimator = DefaultItemAnimator()\r\n        binding.recyclerViewUsers.adapter = userAdapter\r\n\r\n        // Recycler View Selected Users\r\n        userSelectedLayoutManager = LinearLayoutManager(this, LinearLayoutManager.HORIZONTAL, false)\r\n        binding.recyclerViewUsersSelected.layoutManager = userSelectedLayoutManager\r\n        userSelectedAdapter = SelectedUsersAdapter()\r\n        binding.recyclerViewUsersSelected.itemAnimator = DefaultItemAnimator()\r\n        binding.recyclerViewUsersSelected.adapter = userSelectedAdapter\r\n\r\n    }\r\n\r\n\r\n    inner class AllUsersAdapter : RecyclerView.Adapter<AllUsersAdapter.ViewHolder>() {\r\n\r\n        inner class ViewHolder(val v: View) : RecyclerView.ViewHolder(v)\r\n\r\n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n            return ViewHolder(\r\n                LayoutInflater.from(parent.context).inflate(R.layout.row_user, parent, false)\r\n            )\r\n        }\r\n\r\n        override fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n\r\n            holder.v.apply {\r\n                // Variables\r\n                val username = findViewById<TextView>(R.id.textViewProfileName)\r\n                val imageViewUser = findViewById<ImageView>(R.id.imageViewProfile)\r\n\r\n                // Set data\r\n                Utilis.getFile(context, \"profilePictures/${users[position].id}.png\", \"png\") { bitmap ->\r\n                    imageViewUser.setImageBitmap(bitmap)\r\n                }\r\n\r\n                username.text = Utilis.getFirstAndLastName(users[position].name)\r\n\r\n            }\r\n            holder.v.setOnClickListener {\r\n\r\n                selectedUsers.add(users[position])\r\n                users.remove(users[position])\r\n                userSelectedAdapter?.notifyDataSetChanged()\r\n                userAdapter?.notifyDataSetChanged()\r\n            }\r\n\r\n        }\r\n\r\n        override fun getItemCount(): Int {\r\n            return users.size\r\n        }\r\n    }\r\n\r\n    inner class SelectedUsersAdapter : RecyclerView.Adapter<SelectedUsersAdapter.ViewHolder>() {\r\n\r\n        inner class ViewHolder(val v: View) : RecyclerView.ViewHolder(v)\r\n\r\n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n            return ViewHolder(\r\n                LayoutInflater.from(parent.context).inflate(R.layout.row_add_pp, parent, false)\r\n            )\r\n        }\r\n\r\n        override fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n\r\n            holder.v.apply {\r\n                // Variables\r\n                val username = findViewById<TextView>(R.id.textViewProfileNameAdd)\r\n                val imageViewUser = findViewById<ImageView>(R.id.imageViewProfile)\r\n\r\n                // Set data\r\n                Utilis.getFile(context,\"profilePictures/${selectedUsers[position].id}.png\", \"png\") { bitmap ->\r\n                    imageViewUser.setImageBitmap(bitmap)\r\n                }\r\n\r\n                username.text = Utilis.getFirstAndLastName(selectedUsers[position].name)\r\n\r\n            }\r\n            holder.v.setOnClickListener {\r\n\r\n                users.add(selectedUsers[position])\r\n                selectedUsers.remove(selectedUsers[position])\r\n                userAdapter?.notifyDataSetChanged()\r\n                userSelectedAdapter?.notifyDataSetChanged()\r\n            }\r\n\r\n        }\r\n\r\n        override fun getItemCount(): Int {\r\n            return selectedUsers.size\r\n        }\r\n    }\r\n}
-+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-+<+>UTF-8
-+===================================================================
-+diff --git a/app/src/main/java/com/singularity/ipcaplus/AddPeopleActivity.kt b/app/src/main/java/com/singularity/ipcaplus/AddPeopleActivity.kt
-+--- a/app/src/main/java/com/singularity/ipcaplus/AddPeopleActivity.kt	(revision d7d49fadf70fadd33042282dce690a6bd606ece4)
-++++ b/app/src/main/java/com/singularity/ipcaplus/AddPeopleActivity.kt	(date 1642078572739)
-+@@ -67,7 +67,8 @@
-+                         val chat = Chat(
-+                             document["name"] as String,
-+                             document["type"] as String,
-+-                            document["ox"] as String
-++                            document["ox"] as String,
-++                            document["iv"] as String
-+                         )
-+ 
-+                         val selectedUsersIds = arrayListOf<String>()
-+Index: app/src/main/java/com/singularity/ipcaplus/cryptography/metaData.kt
-+IDEA additional info:
-+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-+<+>package com.singularity.ipcaplus.cryptography\r\n\r\nimport android.content.Context\r\nimport android.os.Build\r\nimport android.util.Log\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.security.crypto.EncryptedSharedPreferences\r\nimport androidx.security.crypto.MasterKeys\r\nimport com.google.gson.Gson\r\nimport com.google.gson.GsonBuilder\r\nimport org.bouncycastle.jce.provider.BouncyCastleProvider\r\nimport org.bouncycastle.util.encoders.Base64\r\nimport java.io.UnsupportedEncodingException\r\nimport java.security.InvalidKeyException\r\nimport java.security.NoSuchAlgorithmException\r\nimport java.security.SecureRandom\r\nimport java.security.Security\r\nimport java.util.Objects.hash\r\nimport javax.crypto.*\r\nimport javax.crypto.spec.IvParameterSpec\r\nimport javax.crypto.spec.SecretKeySpec\r\n\r\n\r\n\r\n\r\n\r\nfun encryptMeta(strToEncrypt: String, secret_key: String): String? {\r\n    Security.addProvider(BouncyCastleProvider())\r\n    hash(strToEncrypt)\r\n    var keyBytes: ByteArray\r\n    //val initVector = generateRandomIV()\r\n    val initVector = \"7c5afb00aaecb1a1\"\r\n    val iv = IvParameterSpec(initVector.toByteArray(charset(\"UTF-8\")))\r\n    println(\"AVEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE $initVector\")\r\n\r\n\r\n    try {\r\n        keyBytes = secret_key.toByteArray(charset(\"UTF8\"))\r\n        val skey = SecretKeySpec(keyBytes, \"AES\")\r\n        val input = strToEncrypt.toByteArray(charset(\"UTF8\"))\r\n\r\n        synchronized(Cipher::class.java) {\r\n            val cipher = Cipher.getInstance(\"AES/CBC/PKCS7Padding\")\r\n            cipher.init(Cipher.ENCRYPT_MODE, skey, iv)\r\n\r\n            val cipherText = ByteArray(cipher.getOutputSize(input.size))\r\n            var ctLength = cipher.update(\r\n                input, 0, input.size,\r\n                cipherText, 0\r\n            )\r\n            ctLength += cipher.doFinal(cipherText, ctLength)\r\n            return String(\r\n                Base64.encode(cipherText)\r\n            )\r\n        }\r\n    } catch (uee: UnsupportedEncodingException) {\r\n        uee.printStackTrace()\r\n    } catch (ibse: IllegalBlockSizeException) {\r\n        ibse.printStackTrace()\r\n    } catch (bpe: BadPaddingException) {\r\n        bpe.printStackTrace()\r\n    } catch (ike: InvalidKeyException) {\r\n        ike.printStackTrace()\r\n    } catch (nspe: NoSuchPaddingException) {\r\n        nspe.printStackTrace()\r\n    } catch (nsae: NoSuchAlgorithmException) {\r\n        nsae.printStackTrace()\r\n    } catch (e: ShortBufferException) {\r\n        e.printStackTrace()\r\n    }\r\n\r\n    return null\r\n}\r\n\r\nfun decryptWithAESmeta(key: String, strToDecrypt: String?): String? {\r\n    Security.addProvider(BouncyCastleProvider())\r\n    var keyBytes: ByteArray\r\n    val initVector = \"7c5afb00aaecb1a1\"\r\n\r\n    try {\r\n        val iv = IvParameterSpec(initVector.toByteArray(charset(\"UTF-8\")))\r\n        keyBytes = key.toByteArray(charset(\"UTF8\"))\r\n        val skey = SecretKeySpec(keyBytes, \"AES\")\r\n        val input = org.bouncycastle.util.encoders.Base64\r\n            .decode(strToDecrypt?.trim { it <= ' ' }?.toByteArray(charset(\"UTF8\")))\r\n\r\n        synchronized(Cipher::class.java) {\r\n            val cipher = Cipher.getInstance(\"AES/CBC/PKCS7Padding\")\r\n            cipher.init(Cipher.DECRYPT_MODE, skey, iv)\r\n\r\n            val plainText = ByteArray(cipher.getOutputSize(input.size))\r\n            var ptLength = cipher.update(input, 0, input.size, plainText, 0)\r\n            ptLength += cipher.doFinal(plainText, ptLength)\r\n            val decryptedString = String(plainText)\r\n            return decryptedString.trim { it <= ' ' }\r\n        }\r\n    } catch (uee: UnsupportedEncodingException) {\r\n        uee.printStackTrace()\r\n    } catch (ibse: IllegalBlockSizeException) {\r\n        ibse.printStackTrace()\r\n    } catch (bpe: BadPaddingException) {\r\n        bpe.printStackTrace()\r\n    } catch (ike: InvalidKeyException) {\r\n        ike.printStackTrace()\r\n    } catch (nspe: NoSuchPaddingException) {\r\n        nspe.printStackTrace()\r\n    } catch (nsae: NoSuchAlgorithmException) {\r\n        nsae.printStackTrace()\r\n    } catch (e: ShortBufferException) {\r\n        e.printStackTrace()\r\n    }\r\n\r\n    return null\r\n}\r\n\r\nfun metaGenrateKey(): String {\r\n    //val secretKey: String = \"662ede816988e58fb6d057d9d85605e0\"\r\n    val keygen = (\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\r\n            + \"0123456789\"\r\n            + \"abcdefghijklmnopqrstuvxyz\")\r\n\r\n    val n = 32\r\n\r\n    // create StringBuffer size of keygen\r\n    val secretKey = StringBuilder(n)\r\n    for (i in 0 until n) {\r\n\r\n        // generate a random number between\r\n        // 0 to keygen variable length\r\n        val index = (keygen.length\r\n                * Math.random()).toInt()\r\n\r\n        // add Character one by one in end of secretKey\r\n        secretKey.append(keygen[index])\r\n\r\n    }\r\n    println(secretKey)\r\n    return secretKey.toString()\r\n}\r\n\r\nfun metaBlock(message: String){\r\n    //val secretKey: String = \"662ede816988e58fb6d057d9d85605e0\"\r\n    val keygen = metaGenrateKey()\r\n\r\n    var meta = encryptMeta(message, keygen)\r\n    println(meta)\r\n\r\n    val message_decripted = decryptWithAESmeta(keygen, meta)\r\n    println(message_decripted)\r\n}\r\n\r\n@RequiresApi(Build.VERSION_CODES.M)\r\nfun saveKeygenOx(context : Context, chatUid : String, keygen: String){\r\n\r\n    val keyGenParameterSpec = MasterKeys.AES256_GCM_SPEC\r\n    val masterKeyAlias = MasterKeys.getOrCreate(keyGenParameterSpec)\r\n    val sharedPreferences = EncryptedSharedPreferences.create(\r\n        \"meta_shared_preferences\",\r\n        masterKeyAlias,\r\n        context,\r\n        EncryptedSharedPreferences.PrefKeyEncryptionScheme.AES256_SIV,\r\n        EncryptedSharedPreferences.PrefValueEncryptionScheme.AES256_GCM\r\n    )\r\n\r\n    // storing a value\r\n    sharedPreferences\r\n        .edit()\r\n        .putString(chatUid, keygen)\r\n        .apply()\r\n}\r\n\r\n@RequiresApi(Build.VERSION_CODES.M)\r\nfun getMetaOx(context: Context, chatUid: String): String? {\r\n\r\n    val keyGenParameterSpec = MasterKeys.AES256_GCM_SPEC\r\n    val masterKeyAlias = MasterKeys.getOrCreate(keyGenParameterSpec)\r\n    val sharedPreferences = EncryptedSharedPreferences.create(\r\n        \"meta_shared_preferences\",\r\n        masterKeyAlias,\r\n        context,\r\n        EncryptedSharedPreferences.PrefKeyEncryptionScheme.AES256_SIV,\r\n        EncryptedSharedPreferences.PrefValueEncryptionScheme.AES256_GCM\r\n    )\r\n\r\n    // reading a value\r\n    println(sharedPreferences.getString(chatUid, \"\"))\r\n    return sharedPreferences.getString(chatUid, \"\") // -> \"some_data\"\r\n}\r\n\r\nfun generateRandomIV(): String {\r\n    val ranGen = SecureRandom()\r\n    val aesKey = ByteArray(16)\r\n    ranGen.nextBytes(aesKey)\r\n    val result = StringBuffer()\r\n    for (b in aesKey) {\r\n        result.append(String.format(\"%02x\", b))\r\n    }\r\n    return if (16 > result.toString().length) {\r\n        result.toString()\r\n    } else {\r\n        result.toString().substring(0, 16)\r\n    }\r\n}
-+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-+<+>UTF-8
-+===================================================================
-+diff --git a/app/src/main/java/com/singularity/ipcaplus/cryptography/metaData.kt b/app/src/main/java/com/singularity/ipcaplus/cryptography/metaData.kt
-+--- a/app/src/main/java/com/singularity/ipcaplus/cryptography/metaData.kt	(revision d7d49fadf70fadd33042282dce690a6bd606ece4)
-++++ b/app/src/main/java/com/singularity/ipcaplus/cryptography/metaData.kt	(date 1642078199573)
-+@@ -24,12 +24,12 @@
-+ 
-+ 
-+ 
-+-fun encryptMeta(strToEncrypt: String, secret_key: String): String? {
-++fun encryptMeta(strToEncrypt: String, secret_key: String, initVector : String): String? {
-+     Security.addProvider(BouncyCastleProvider())
-+     hash(strToEncrypt)
-+     var keyBytes: ByteArray
-+     //val initVector = generateRandomIV()
-+-    val initVector = "7c5afb00aaecb1a1"
-++    //val initVector = "7c5afb00aaecb1a1"
-+     val iv = IvParameterSpec(initVector.toByteArray(charset("UTF-8")))
-+     println("AVEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE $initVector")
-+ 
-+@@ -72,10 +72,10 @@
-+     return null
-+ }
-+ 
-+-fun decryptWithAESmeta(key: String, strToDecrypt: String?): String? {
-++fun decryptWithAESmeta(key: String, strToDecrypt: String?, initVector : String): String? {
-+     Security.addProvider(BouncyCastleProvider())
-+     var keyBytes: ByteArray
-+-    val initVector = "7c5afb00aaecb1a1"
-++    //val initVector = "7c5afb00aaecb1a1"
-+ 
-+     try {
-+         val iv = IvParameterSpec(initVector.toByteArray(charset("UTF-8")))
-+@@ -137,7 +137,7 @@
-+     println(secretKey)
-+     return secretKey.toString()
-+ }
-+-
-++/*
-+ fun metaBlock(message: String){
-+     //val secretKey: String = "662ede816988e58fb6d057d9d85605e0"
-+     val keygen = metaGenrateKey()
-+@@ -147,7 +147,7 @@
-+ 
-+     val message_decripted = decryptWithAESmeta(keygen, meta)
-+     println(message_decripted)
-+-}
-++}*/
-+ 
-+ @RequiresApi(Build.VERSION_CODES.M)
-+ fun saveKeygenOx(context : Context, chatUid : String, keygen: String){
-+Index: app/src/main/java/com/singularity/ipcaplus/utils/Backend.kt
-+IDEA additional info:
-+Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-+<+>package com.singularity.ipcaplus.utils\r\n\r\nimport android.net.Uri\r\nimport com.google.firebase.Timestamp\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.Query\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.google.firebase.storage.FirebaseStorage\r\nimport com.google.firebase.storage.ktx.storage\r\nimport com.singularity.ipcaplus.R\r\nimport com.singularity.ipcaplus.models.*\r\nimport org.json.JSONArray\r\nimport java.io.File\r\n\r\nobject Backend {\r\n\r\n    val db = Firebase.firestore\r\n\r\n    /*\r\n       ------------------------------------------------ Events ------------------------------------------------\r\n    */\r\n\r\n    /*\r\n       This function returns all events during the month in the firebase to an list\r\n       @month = selected month\r\n       @callBack = return the list\r\n    */\r\n    fun getAllMonthEvents(month: String, callBack: (List<EventCalendar>)->Unit) {\r\n\r\n        val events = arrayListOf<EventCalendar>()\r\n\r\n        // Get all user chat ids\r\n        val chatIds = arrayListOf<String>()\r\n        getAllUserChatIds {\r\n            chatIds.addAll(it)\r\n\r\n            // Search in all chats\r\n            for (id in chatIds) {\r\n                db.collection(\"chat\")\r\n                    .document(id)\r\n                    .collection(\"event\")\r\n                    .addSnapshotListener { documents, _ ->\r\n\r\n                        documents?.let {\r\n\r\n                            for (document in documents) {\r\n                                val event = EventCalendar.fromHash(document)\r\n                                event.id = document.id\r\n\r\n                                val date = Utilis.getDate(event.datetime.seconds * 1000, \"yyyy-MM-dd'T'HH:mm:ss.SSS\")\r\n                                if (month == Utilis.getMonthById(Utilis.getMonth(date).toInt())) {\r\n                                    events.add(event)\r\n                                }\r\n                            }\r\n                            callBack(events)\r\n                        }\r\n                    }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private fun getAllUserChatIds(callBack: (List<String>)->Unit) {\r\n\r\n        val chatIds = arrayListOf<String>()\r\n\r\n        // Get Group Chats Ids\r\n        db.collection(\"profile\").document(Firebase.auth.currentUser!!.uid).collection(\"chat\")\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n                    for (document in it) {\r\n                        chatIds.add(document.id)\r\n                    }\r\n\r\n                    callBack(chatIds)\r\n                }\r\n            }\r\n    }\r\n\r\n\r\n    /*\r\n       This function returns all events during the month in the firebase to an list\r\n       @month = selected month\r\n       @callBack = return the list\r\n    */\r\n    fun getAllChatMonthEvents(month: String, chat_id: String, callBack: (List<EventCalendar>)->Unit) {\r\n\r\n        val events = arrayListOf<EventCalendar>()\r\n\r\n        db.collection(\"chat\")\r\n            .document(chat_id)\r\n            .collection(\"event\")\r\n            .addSnapshotListener { documents, _ ->\r\n\r\n                documents?.let {\r\n\r\n                    for (document in documents) {\r\n                        val event = EventCalendar.fromHash(document)\r\n                        event.id = document.id\r\n\r\n                        val date = Utilis.getDate(\r\n                            event.datetime.seconds * 1000,\r\n                            \"yyyy-MM-dd'T'HH:mm:ss.SSS\"\r\n                        )\r\n                        if (month == Utilis.getMonthById(Utilis.getMonth(date).toInt())) {\r\n                            events.add(event)\r\n                        }\r\n                    }\r\n\r\n                    callBack(events)\r\n                }\r\n\r\n            }\r\n    }\r\n\r\n\r\n    /*\r\n       This function returns all events during the day in the firebase to an list\r\n       @day = selected day\r\n       @callBack = return the list\r\n    */\r\n    fun getAllChatMonthDayEvents(month: String, day: Int, chat_id: String, callBack: (List<EventCalendar>)->Unit) {\r\n\r\n        val events = arrayListOf<EventCalendar>()\r\n\r\n        db.collection(\"chat\")\r\n            .document(chat_id)\r\n            .collection(\"event\")\r\n            .addSnapshotListener { documents, _ ->\r\n\r\n                documents?.let {\r\n\r\n                    for (document in documents) {\r\n                        val event = EventCalendar.fromHash(document)\r\n                        event.id = document.id\r\n\r\n                        val date = Utilis.getDate(\r\n                            event.datetime.seconds * 1000,\r\n                            \"yyyy-MM-dd'T'HH:mm:ss.SSS\"\r\n                        )\r\n                        if (day == Utilis.getDay(date).toInt() && month == Utilis.getMonthById(\r\n                                Utilis.getMonth(date).toInt()\r\n                            )\r\n                        ) {\r\n                            events.add(event)\r\n                        }\r\n                    }\r\n\r\n                    callBack(events)\r\n                }\r\n\r\n            }\r\n    }\r\n\r\n\r\n    /*\r\n       This function returns all events during the day in the firebase to an list\r\n       @day = selected day\r\n       @callBack = return the list\r\n    */\r\n    fun getAllMonthDayEvents(month: String, day: Int, callBack: (List<EventCalendar>)->Unit) {\r\n\r\n        val events = arrayListOf<EventCalendar>()\r\n\r\n        // Get all user chat ids\r\n        val chatIds = arrayListOf<String>()\r\n        getAllUserChatIds {\r\n            chatIds.addAll(it)\r\n\r\n            // Search in all chats\r\n            for (id in chatIds) {\r\n                db.collection(\"chat\")\r\n                    .document(id)\r\n                    .collection(\"event\")\r\n                    .addSnapshotListener { documents, _ ->\r\n\r\n                        documents?.let {\r\n\r\n                            for (document in documents) {\r\n                                val event = EventCalendar.fromHash(document)\r\n                                event.id = document.id\r\n\r\n                                val date = Utilis.getDate(event.datetime.seconds * 1000, \"yyyy-MM-dd'T'HH:mm:ss.SSS\")\r\n                                if (day == Utilis.getDay(date).toInt() && month == Utilis.getMonthById(\r\n                                        Utilis.getMonth(date).toInt())\r\n                                ) {\r\n                                    events.add(event)\r\n                                }\r\n                            }\r\n\r\n                            callBack(events)\r\n                        }\r\n\r\n                    }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    fun deleteEvent(chatID: String, eventID: String) {\r\n\r\n        db.collection(\"chat\")\r\n            .document(chatID)\r\n            .collection(\"event\")\r\n            .document(eventID)\r\n            .delete()\r\n\r\n    }\r\n\r\n\r\n    /*\r\n       ------------------------------------------------ Schedule ------------------------------------------------\r\n    */\r\n\r\n    /*\r\n       This function returns all events in the firebase to an list\r\n       @callBack = return the list\r\n    */\r\n    fun getDayCourseSubjects(day: String, courseId: String, callBack: (List<Subject>)->Unit) {\r\n\r\n        val subjects = arrayListOf<Subject>()\r\n        val subjectsWithBreaks = arrayListOf<Subject>()\r\n\r\n        db.collection(\"course\").document(courseId).collection(\"subject\")\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n\r\n                    // Add every subject to the list\r\n                    for (document in documents) {\r\n                        val subject = Subject.fromHash(document)\r\n                        if (day == subject.day) {\r\n                            subjects.add(subject)\r\n                        }\r\n                    }\r\n\r\n                    // Order the subjects by time\r\n                    for (i in 0 until subjects.size) {\r\n                        for (j in 0 until subjects.size - 1) {\r\n\r\n                            if (Utilis.convertHoursStringToInt(subjects[j].start_time) > Utilis.convertHoursStringToInt(\r\n                                    subjects[j + 1].start_time\r\n                                )\r\n                            ) {\r\n                                val temp = subjects[j]\r\n                                subjects[j] = subjects[j + 1]\r\n                                subjects[j + 1] = temp\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // Add Break Times Between Classes\r\n                    for (i in 0 until subjects.size) {\r\n                        if (i % 2 == 0) {\r\n                            subjectsWithBreaks.add(subjects[i])\r\n                        }\r\n                        else {\r\n                            val diff = Utilis.convertHoursStringToInt(subjects[i].start_time) - Utilis.convertHoursStringToInt(\r\n                                subjects[i - 1].end_time\r\n                            )\r\n                            subjectsWithBreaks.add(Subject(\"breaktime\", diff.toString()))\r\n                            subjectsWithBreaks.add(subjects[i])\r\n                        }\r\n                    }\r\n\r\n                    callBack(subjectsWithBreaks)\r\n                }\r\n\r\n            }\r\n\r\n    }\r\n\r\n\r\n    /*\r\n       This function returns the user course by callback\r\n       @id = user uid\r\n    */\r\n    fun getUserCourses(uid: String, callBack:(String)->Unit) {\r\n\r\n        db.collection(\"profile\")\r\n            .document(uid)\r\n            .collection(\"course\")\r\n            .addSnapshotListener { documents, _ ->\r\n\r\n                documents?.let {\r\n\r\n                    var courseId = \"\"\r\n                    for (document in documents)\r\n                        courseId = document.id\r\n\r\n                    callBack(courseId)\r\n                }\r\n            }\r\n    }\r\n\r\n\r\n    /*\r\n       This function returns the user course by callback\r\n       @id = user uid\r\n    */\r\n    fun getUserCoursesIds(uid: String, courseTag: String, callBack:(List<String>)->Unit) {\r\n\r\n        val courseIds = arrayListOf<String>()\r\n\r\n        db.collection(\"course\")\r\n            .whereEqualTo(\"tag\", courseTag)\r\n            .get()\r\n            .addOnSuccessListener { documents ->\r\n\r\n                documents?.let {\r\n\r\n                    for (document in documents)\r\n                        courseIds.add(document.id)\r\n\r\n                    callBack(courseIds)\r\n                }\r\n\r\n            }\r\n\r\n    }\r\n\r\n\r\n    fun setUserCourses(userID: String, courseID: String) {\r\n\r\n        val profile = HashMap<String, Any>()\r\n        db.collection(\"profile\")\r\n            .document(userID)\r\n            .collection(\"course\")\r\n            .document(courseID)\r\n            .set(profile)\r\n    }\r\n\r\n\r\n    /*\r\n       ------------------------------------------------ Contacts ------------------------------------------------\r\n    */\r\n\r\n    /*\r\n       This function returns all contacts in the firebase to an list\r\n       @callBack = return the list\r\n    */\r\n    fun getAllContacts(callBack: (List<Contact>)->Unit) {\r\n\r\n        val contacts = arrayListOf<Contact>()\r\n\r\n        db.collection(\"contacts\")\r\n            .addSnapshotListener { documents, _ ->\r\n\r\n                documents?.let {\r\n\r\n                    for (document in documents) {\r\n                        val contact = Contact.fromHash(document)\r\n                        contacts.add(contact)\r\n                    }\r\n\r\n                    callBack(contacts)\r\n                }\r\n\r\n            }\r\n\r\n    }\r\n\r\n\r\n    /*\r\n       ------------------------------------------------ Profile ------------------------------------------------\r\n    */\r\n\r\n    fun getUserProfile(userId: String, callBack:(Profile)->Unit) {\r\n\r\n        var profile = Profile()\r\n\r\n        db.collection(\"profile\")\r\n            .addSnapshotListener { documents, _ ->\r\n\r\n                documents?.let {\r\n\r\n                    for (document in documents) {\r\n\r\n                        if (document.id == userId) {\r\n                            profile = Profile.fromHash(document)\r\n                            profile.id = document.id\r\n                        }\r\n                    }\r\n\r\n                    callBack(profile)\r\n                }\r\n            }\r\n    }\r\n\r\n    fun getAllUsers (callBack:(List<Profile>)->Unit) {\r\n        val profiles = arrayListOf<Profile>()\r\n\r\n        db.collection(\"profile\")\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n\r\n                    for (document in documents) {\r\n                        val profile = Profile.fromHash(document)\r\n                        profile.id = document.id\r\n                        profiles.add(profile)\r\n                    }\r\n                }\r\n\r\n                callBack(profiles)\r\n            }\r\n    }\r\n\r\n    fun getAllUsersExceptCurrent (callBack:(List<Profile>)->Unit) {\r\n        val profiles = arrayListOf<Profile>()\r\n\r\n        db.collection(\"profile\")\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n\r\n                    for (document in documents) {\r\n                        val profile = Profile.fromHash(document)\r\n\r\n                        if (Firebase.auth.currentUser!!.uid != document.id) {\r\n                            profile.id = document.id\r\n                            profiles.add(profile)\r\n                        }\r\n                    }\r\n                }\r\n\r\n                callBack(profiles)\r\n            }\r\n    }\r\n\r\n\r\n    fun getAllUsersExceptChatUsers (chatID: String, callBack:(List<Profile>)->Unit) {\r\n\r\n        val currentUserIds = arrayListOf<String>()\r\n        val profiles = arrayListOf<Profile>()\r\n\r\n        // Get current chat users ids\r\n        getChatUsers(chatID) {\r\n            for (user in it)\r\n                currentUserIds.add(user.id!!)\r\n\r\n            db.collection(\"profile\")\r\n                .addSnapshotListener { documents, _ ->\r\n                    documents?.let {\r\n\r\n                        for (document in documents) {\r\n                            val profile = Profile.fromHash(document)\r\n\r\n                            // Verify if user is not in the chat\r\n                            var found = false\r\n                            for (id in currentUserIds) {\r\n                                if (id == document.id)\r\n                                    found = true\r\n                            }\r\n\r\n                            if (!found) {\r\n                                profile.id = document.id\r\n                                profiles.add(profile)\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    callBack(profiles)\r\n                }\r\n        }\r\n    }\r\n\r\n\r\n    fun changeUserChatAdminStatus(chatId: String, userId: String, status: Boolean) {\r\n\r\n        db.collection(\"chat\")\r\n            .document(chatId)\r\n            .collection(\"user\")\r\n            .document(userId)\r\n            .update(\"admin\", status)\r\n\r\n    }\r\n\r\n\r\n    /*\r\n       ------------------------------------------------ Chats ------------------------------------------------\r\n    */\r\n\r\n\r\n    fun getChatUsers(chatID: String, callBack: (List<Profile>)->Unit) {\r\n\r\n        val userIds = arrayListOf<String>()\r\n        val adminIds = arrayListOf<String>()\r\n        val users = arrayListOf<Profile>()\r\n\r\n        // Get the ids of the users in the chat\r\n        db.collection(\"chat\")\r\n            .document(chatID)\r\n            .collection(\"user\")\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n                    for (document in documents) {\r\n                        userIds.add(document.id)\r\n\r\n                        if (document[\"admin\"] != true)\r\n                            adminIds.add(document.id)\r\n\r\n                    }\r\n                }\r\n\r\n                // Find the data for each id\r\n                db.collection(\"profile\")\r\n                    .addSnapshotListener { documents2, _ ->\r\n                        documents2?.let {\r\n                            for (document in documents2) {\r\n                                for (id in userIds) {\r\n                                    if (document.id == id) {\r\n                                        val profile = Profile.fromHash(document)\r\n                                        profile.id = document.id\r\n                                        users.add(profile)\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        // Get Admins\r\n                        for (u in users) {\r\n                            for (a in adminIds) {\r\n                                if (u.id == a) {\r\n                                    u.isAdmin = true\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        callBack(users)\r\n                    }\r\n\r\n            }\r\n\r\n    }\r\n\r\n\r\n    fun getChatUsersUids(chatID: String, callBack: (List<String>) -> Unit){\r\n        var userIds = arrayListOf<String>()\r\n\r\n        // Get the ids of the users in the chat\r\n        db.collection(\"chat\")\r\n            .document(chatID)\r\n            .collection(\"user\")\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n                    for (document in documents) {\r\n                        userIds.add(document.id)\r\n                    }\r\n                }\r\n\r\n                callBack(userIds)\r\n            }\r\n    }\r\n\r\n\r\n    fun changeChatName(chatID: String, newName: String) {\r\n\r\n        db.collection(\"chat\")\r\n            .document(chatID)\r\n            .update(\"name\", newName)\r\n    }\r\n\r\n\r\n    /*\r\n       This function returns last chat message by chat id\r\n       @callBack = return the message\r\n    */\r\n    fun getLastMessageByChatID(chatID: String, callBack: (Message?)->Unit) {\r\n\r\n        var message : Message? = null\r\n\r\n        db.collection(\"chat\").document(\"${chatID}\").collection(\"message\")\r\n            .orderBy(\"time\", Query.Direction.DESCENDING).limit(1)\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n                    for (document in documents) {\r\n                        message = Message.fromHash(document)\r\n                        }\r\n                    }\r\n\r\n                    callBack(message)\r\n                }\r\n\r\n    }\r\n\r\n\r\n    fun getChatAdminIds(chatID: String, callBack: (List<String>)->Unit) {\r\n\r\n        val adminIds = arrayListOf<String>()\r\n\r\n        // Get Admins\r\n        db.collection(\"chat\")\r\n            .document(chatID)\r\n            .collection(\"user\")\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n                    for (document in documents) {\r\n\r\n                        if (document[\"admin\"] == true)\r\n                            adminIds.add(document.id)\r\n\r\n                    }\r\n\r\n                    callBack(adminIds)\r\n                }\r\n            }\r\n\r\n    }\r\n\r\n\r\n    fun removeUserFromChat(chatId: String, userId: String) {\r\n\r\n        // remover user from chat user list\r\n        db.collection(\"chat\")\r\n            .document(chatId)\r\n            .collection(\"user\")\r\n            .document(userId)\r\n            .delete()\r\n\r\n        // remove chat from user chat list\r\n        db.collection(\"profile\")\r\n            .document(userId)\r\n            .collection(\"chat\")\r\n            .document(chatId)\r\n            .delete()\r\n    }\r\n\r\n\r\n    fun addUsersIntoChat(chat: Chat, chatId: String, usersId: ArrayList<String>, callBack: ()->Unit) {\r\n\r\n        for (userId in usersId) {\r\n\r\n            // Create chat in user profile\r\n            db.collection(\"profile\")\r\n                .document(userId)\r\n                .collection(\"chat\")\r\n                .document(chatId)\r\n                .set(chat)\r\n                .addOnCompleteListener {\r\n\r\n                    val profile = HashMap<String, Any>()\r\n                    db.collection(\"chat\")\r\n                        .document(chatId)\r\n                        .collection(\"user\")\r\n                        .document(userId)\r\n                        .set(profile)\r\n                        .addOnCompleteListener {\r\n                            callBack()\r\n                        }\r\n\r\n                }\r\n\r\n        }\r\n    }\r\n\r\n\r\n    fun deleteChat(chatId: String, callback: ()->Unit) {\r\n\r\n        val userIds = arrayListOf<String>()\r\n\r\n        // get all chat members ids\r\n        db.collection(\"chat\")\r\n            .document(chatId)\r\n            .collection(\"user\")\r\n            .addSnapshotListener { documents, _ ->\r\n\r\n                documents?.let {\r\n                    for (document in documents) {\r\n                        userIds.add(document.id)\r\n                    }\r\n\r\n                    // <------------------------------------------------------- Missing here\r\n\r\n                    // delete chat\r\n                    /*\r\n                    db.collection(\"chat\")\r\n                        .document(chatId)\r\n                        .delete()\r\n*/\r\n\r\n                    // delete chat references in members\r\n                    for (i in 0 until userIds.size) {\r\n\r\n                        db.collection(\"profile\")\r\n                            .document(userIds[i])\r\n                            .collection(\"chat\")\r\n                            .document(chatId)\r\n                            .delete()\r\n                            .addOnCompleteListener {\r\n                                // If its the last callback refresh the activity\r\n                                if (i == userIds.size - 1)\r\n                                    callback()\r\n                            }\r\n\r\n                    }\r\n            }\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    fun getAllDirectChatIdsByUser(userId: String, callBack: (List<String?>) -> Unit){\r\n\r\n        var chatIds = arrayListOf<String?>()\r\n\r\n        // Get all profile chat ids\r\n        db.collection(\"profile\")\r\n            .document(userId)\r\n            .collection(\"chat\")\r\n            .whereEqualTo(\"type\", \"chat\")\r\n            .get()\r\n            .addOnSuccessListener { documents ->\r\n                for (document in documents) {\r\n                    chatIds.add(document.id)\r\n                }\r\n\r\n                println(\"DEntroooo\" + chatIds)\r\n                callBack(chatIds)\r\n            }\r\n\r\n    }\r\n\r\n    fun getDirectChatById(chatIds: List<String?>, userId: String, callBack: (String?)-> Unit) {\r\n\r\n        var chatId : String? = null\r\n\r\n        for (id in chatIds) {\r\n            db.collection(\"chat\")\r\n                .document(id!!)\r\n                .collection(\"user\")\r\n                .get()\r\n                .addOnSuccessListener { documents ->\r\n                    for(document in documents) {\r\n                        if(document.id == userId){\r\n                            chatId = id\r\n                        }\r\n                    }\r\n\r\n                    println(\"ACABOU2---------------------------------------\")\r\n                    callBack(chatId)\r\n                }\r\n        }\r\n\r\n    }\r\n\r\n\r\n    /*\r\n       ------------------------------------------------ Register Manipulation ------------------------------------------------\r\n    */\r\n\r\n    fun getIpcaData(email: String, callBack: (Profile?)->Unit) {\r\n\r\n        var profile : Profile? = null\r\n\r\n        db.collection(\"ipca_data\")\r\n            .whereEqualTo(\"email\", email)\r\n            .get()\r\n            .addOnSuccessListener { documents ->\r\n\r\n                for (document in documents) {\r\n                    profile = Profile.fromHash(document)\r\n                }\r\n\r\n                callBack(profile)\r\n\r\n            }\r\n\r\n    }\r\n\r\n\r\n    /*\r\n       ------------------------------------------------ Files ------------------------------------------------\r\n    */\r\n\r\n    fun getAllChatFolderFiles(path: String, callBack: (List<FirebaseFile>) -> Unit) {\r\n\r\n        val files = arrayListOf<FirebaseFile>()\r\n        val listRef = Firebase.storage.reference.child(path)\r\n\r\n        // Find all the prefixes and items.\r\n        listRef.listAll().addOnSuccessListener {\r\n\r\n            for (i in it.prefixes) {\r\n                files.add(FirebaseFile(i.name, R.drawable.ic_folder))\r\n            }\r\n\r\n            for (i in it.items) {\r\n                val icon = Utilis.getFileIcon(i.name)\r\n                if (icon != -1) {\r\n                    val file = FirebaseFile(i.name, icon)\r\n                    files.add(file)\r\n                }\r\n            }\r\n\r\n            callBack(files)\r\n        }\r\n\r\n    }\r\n\r\n    /*\r\n      ------------------------------------------------ Files ------------------------------------------------\r\n   */\r\n\r\n\r\n    fun deleteAllFilesInsideFolder(filePath: String, callback: ()->Unit) {\r\n\r\n        val storage = Firebase.storage\r\n        val listRef = storage.reference.child(filePath)\r\n\r\n        listRef.listAll()\r\n            .addOnSuccessListener {\r\n\r\n                it.items.forEach { item ->\r\n                    item.delete()\r\n                        .addOnCompleteListener {\r\n                            callback()\r\n                        }\r\n                }\r\n\r\n            }\r\n    }\r\n\r\n\r\n    fun getFileUrl(filePath: String, callback: (Uri)->Unit) {\r\n\r\n        val storageRef = FirebaseStorage.getInstance().reference.child(filePath)\r\n\r\n        storageRef.downloadUrl.addOnCompleteListener {\r\n            callback(it.result!!)\r\n        }\r\n\r\n    }\r\n\r\n\r\n    fun postTokenAddress(tokenAdress: String, uid: String){\r\n        println(tokenAdress)\r\n        println(uid)\r\n        var token = HashMap<String, String>()\r\n        db.collection(\"profile\")\r\n            .document(uid)\r\n            .collection(\"tokens\")\r\n            .document(tokenAdress)\r\n            .set(token)\r\n    }\r\n\r\n    fun getAllTokens(uid: String, callBack: (List<String>) -> Unit){\r\n        val tokens = arrayListOf<String>()\r\n\r\n        db.collection(\"profile\").document(uid).collection(\"tokens\")\r\n            .addSnapshotListener { documents, _ ->\r\n                documents?.let {\r\n                    for (document in documents) {\r\n                            tokens.add(document.id)\r\n                    }\r\n\r\n                    callBack(tokens)\r\n                }\r\n            }\r\n\r\n    }\r\n\r\n    fun createJsonArrayString(array: List<String>): JSONArray {\r\n        return JSONArray(array)\r\n    }\r\n}
-+Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-+<+>UTF-8
-+===================================================================
-+diff --git a/app/src/main/java/com/singularity/ipcaplus/utils/Backend.kt b/app/src/main/java/com/singularity/ipcaplus/utils/Backend.kt
-+--- a/app/src/main/java/com/singularity/ipcaplus/utils/Backend.kt	(revision d7d49fadf70fadd33042282dce690a6bd606ece4)
-++++ b/app/src/main/java/com/singularity/ipcaplus/utils/Backend.kt	(date 1642079549056)
-+@@ -866,4 +866,22 @@
-+     fun createJsonArrayString(array: List<String>): JSONArray {
-+         return JSONArray(array)
-+     }
-++
-++    fun getIv(chat_id: String, callBack: (String?)->Unit) {
-++
-++        var iv : String? = null
-++
-++        db.collection("chat")
-++            .get()
-++            .addOnSuccessListener { documents ->
-++                for(document in documents) {
-++                    if (document.id == chat_id) {
-++                        val chat = Chat.fromHash(document)
-++                        iv = chat.iv.toString()
-++                    }
-++                }
-++                callBack(iv)
-++            }
-++    }
-++
-+ }
-+\ No newline at end of file
-Index: .idea/shelf/Uncommitted_changes_before_Update_at_1_13_2022_1_20_PM__Default_Changelist_.xml
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_1_13_2022_1_20_PM__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_1_13_2022_1_20_PM__Default_Changelist_.xml
-new file mode 100644
---- /dev/null	(date 1642080056240)
-+++ b/.idea/shelf/Uncommitted_changes_before_Update_at_1_13_2022_1_20_PM__Default_Changelist_.xml	(date 1642080056240)
-@@ -0,0 +1,4 @@
-+<changelist name="Uncommitted_changes_before_Update_at_1_13_2022_1_20_PM_[Default_Changelist]" date="1642080053964" recycled="true" deleted="true">
-+  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_1_13_2022_1_20_PM_[Default_Changelist]/shelved.patch" />
-+  <option name="DESCRIPTION" value="Uncommitted changes before Update at 1/13/2022 1:20 PM [Default Changelist]" />
-+</changelist>
-\ No newline at end of file
-Index: app/src/main/java/com/singularity/ipcaplus/chat/ChatsFragment.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.singularity.ipcaplus.chat\r\n\r\nimport android.content.Intent\r\nimport android.os.Build\r\nimport android.os.Bundle\r\nimport androidx.fragment.app.Fragment\r\nimport android.view.LayoutInflater\r\nimport android.view.View\r\nimport android.view.ViewGroup\r\nimport android.widget.ImageView\r\nimport android.widget.TextView\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.recyclerview.widget.DefaultItemAnimator\r\nimport androidx.recyclerview.widget.LinearLayoutManager\r\nimport androidx.recyclerview.widget.RecyclerView\r\nimport com.google.firebase.auth.ktx.auth\r\nimport com.google.firebase.firestore.ktx.firestore\r\nimport com.google.firebase.ktx.Firebase\r\nimport com.singularity.ipcaplus.utils.Backend\r\nimport com.singularity.ipcaplus.R\r\nimport com.singularity.ipcaplus.cryptography.decryptWithAESmeta\r\nimport com.singularity.ipcaplus.cryptography.getMetaOx\r\nimport com.singularity.ipcaplus.utils.Utilis\r\nimport com.singularity.ipcaplus.cryptography.saveKeygenOx\r\nimport com.singularity.ipcaplus.databinding.FragmentChatsBinding\r\nimport com.singularity.ipcaplus.models.Chat\r\n\r\n\r\nclass ChatsFragment : Fragment() {\r\n\r\n    // Variables\r\n    var chats = arrayListOf<Chat>()\r\n    var chatIds = arrayListOf<String>()\r\n\r\n    private var _binding: FragmentChatsBinding? = null\r\n    private var mAdapter: RecyclerView.Adapter<*>? = null\r\n    private var mLayoutManager: LinearLayoutManager? = null\r\n\r\n    private val binding get() = _binding!!\r\n\r\n    val db = Firebase.firestore\r\n\r\n    override fun onCreateView(\r\n        inflater: LayoutInflater, container: ViewGroup?,\r\n        savedInstanceState: Bundle?\r\n    ): View? {\r\n\r\n\r\n        _binding = FragmentChatsBinding.inflate(layoutInflater)\r\n        val root: View = binding.root\r\n\r\n        // Get Group Chats\r\n        db.collection(\"profile\").document(\"${Firebase.auth.currentUser!!.uid}\").collection(\"chat\")\r\n            .addSnapshotListener { documents, e ->\r\n                documents?.let {\r\n                    chats.clear()\r\n                    chatIds.clear()\r\n                    for (document in it) {\r\n                        val chat = Chat.fromHash(document)\r\n                        if (chat.type == \"chat\") {\r\n                            chats.add(chat)\r\n                            chatIds.add(document.id)\r\n                        }\r\n                    }\r\n                    mAdapter?.notifyDataSetChanged()\r\n                }\r\n            }\r\n\r\n        // RecyclerView Chat\r\n        mLayoutManager = LinearLayoutManager(activity, LinearLayoutManager.VERTICAL, false)\r\n        binding.recyclerViewGroups.layoutManager = mLayoutManager\r\n        mAdapter = ChatAdapter()\r\n        binding.recyclerViewGroups.itemAnimator = DefaultItemAnimator()\r\n        binding.recyclerViewGroups.adapter = mAdapter\r\n\r\n        return root\r\n    }\r\n\r\n    /*\r\n        Refresh Activity Content\r\n    */\r\n    override fun onResume() {\r\n        super.onResume()\r\n\r\n        // Get Group Chats\r\n        db.collection(\"profile\").document(\"${Firebase.auth.currentUser!!.uid}\").collection(\"chat\")\r\n            .addSnapshotListener { documents, e ->\r\n                documents?.let {\r\n                    chats.clear()\r\n                    chatIds.clear()\r\n                    for (document in it) {\r\n                        val chat = Chat.fromHash(document)\r\n                        if (chat.type == \"chat\" || chat.type == \"group\") {\r\n                            chats.add(chat)\r\n                            chatIds.add(document.id)\r\n                        }\r\n                    }\r\n                    println(\"CHAT \" + chats)\r\n                    mAdapter?.notifyDataSetChanged()\r\n                }\r\n            }\r\n\r\n    }\r\n\r\n\r\n    override fun onDestroyView() {\r\n        super.onDestroyView()\r\n        _binding = null\r\n    }\r\n\r\n\r\n    inner class ChatAdapter : RecyclerView.Adapter<ChatAdapter.ViewHolder>() {\r\n\r\n        inner class ViewHolder(val v: View) : RecyclerView.ViewHolder(v)\r\n\r\n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\r\n                return ViewHolder(\r\n                    LayoutInflater.from(parent.context).inflate(R.layout.row_chat, parent, false)\r\n                )\r\n\r\n        }\r\n\r\n        @RequiresApi(Build.VERSION_CODES.M)\r\n        override fun onBindViewHolder(holder: ViewHolder, position: Int) {\r\n\r\n                holder.v.apply {\r\n\r\n                    // Variables\r\n                    val textViewMessage = findViewById<TextView>(R.id.textViewChatName)\r\n                    val imageViewChatGroup = findViewById<ImageView>(R.id.imageViewChatGroup)\r\n                    val lastMessageTime = findViewById<TextView>(R.id.lastMessageTime)\r\n                    val lastMessageText = findViewById<TextView>(R.id.textViewLastMessage)\r\n\r\n\r\n                    if (chats[position].type == \"chat\") {\r\n                        textViewMessage.text = Utilis.getFirstAndLastName(chats[position].name)\r\n                    } else {\r\n                        textViewMessage.text = chats[position].name\r\n                    }\r\n\r\n\r\n                    // sync data recieved form direbase with encrypted shared preferences (key -> 1x)\r\n                    saveKeygenOx(context, chatIds[position], chats[position].ox.toString())\r\n                    // Set Last Chat Message\r\n                    Backend.getLastMessageByChatID(chatIds[position]) {\r\n                        val data = Utilis.getDate(it!!.time.seconds *1000, \"yyyy-MM-dd'T'HH:mm:ss.SSS\")\r\n                        lastMessageTime.text = Utilis.getHours(data) + \":\" + Utilis.getMinutes(data)\r\n                        val keygen = getMetaOx(context, chatIds[position])\r\n                        val message_decripted = decryptWithAESmeta(keygen.toString(), it.message)\r\n                        lastMessageText.text = message_decripted\r\n                    }\r\n\r\n                    Utilis.getFile(this.context, \"chats/${chatIds[position]}/icon.png\", \"png\") { bitmap ->\r\n                        imageViewChatGroup.setImageBitmap(bitmap)\r\n                    }\r\n\r\n                }\r\n                holder.v.setOnClickListener {\r\n                    val intent = Intent(activity, ChatActivity::class.java)\r\n                    intent.putExtra(\"chat_id\", chatIds[position])\r\n                    activity?.startActivity(intent)\r\n                }\r\n\r\n        }\r\n\r\n        override fun getItemViewType(position: Int) : Int {\r\n            if (chats[position].type == \"group\") {\r\n                return 1\r\n            } else {\r\n                return 0\r\n            }\r\n        }\r\n\r\n        override fun getItemCount(): Int {\r\n            return chats.size\r\n        }\r\n    }\r\n\r\n\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/singularity/ipcaplus/chat/ChatsFragment.kt b/app/src/main/java/com/singularity/ipcaplus/chat/ChatsFragment.kt
---- a/app/src/main/java/com/singularity/ipcaplus/chat/ChatsFragment.kt	(revision 5fa09412663837672a36a41fd04f1700573c5f37)
-+++ b/app/src/main/java/com/singularity/ipcaplus/chat/ChatsFragment.kt	(date 1642080053865)
-@@ -24,6 +24,7 @@
- import com.singularity.ipcaplus.cryptography.saveKeygenOx
- import com.singularity.ipcaplus.databinding.FragmentChatsBinding
- import com.singularity.ipcaplus.models.Chat
-+import com.singularity.ipcaplus.utils.Backend.getIv
- 
- 
- class ChatsFragment : Fragment() {
-@@ -143,13 +144,18 @@
-                     saveKeygenOx(context, chatIds[position], chats[position].ox.toString())
-                     // Set Last Chat Message
-                     Backend.getLastMessageByChatID(chatIds[position]) {
-+
-                         val data = Utilis.getDate(it!!.time.seconds *1000, "yyyy-MM-dd'T'HH:mm:ss.SSS")
-                         lastMessageTime.text = Utilis.getHours(data) + ":" + Utilis.getMinutes(data)
-+
-                         val keygen = getMetaOx(context, chatIds[position])
--                        val message_decripted = decryptWithAESmeta(keygen.toString(), it.message)
--                        lastMessageText.text = message_decripted
--                    }
-+                        getIv(chatIds[position]){iv ->
-+                            val message_decripted = decryptWithAESmeta(keygen.toString(), it.message, iv.toString())
-+                            lastMessageText.text = message_decripted
-+                        }
- 
-+                    }
-+
-                     Utilis.getFile(this.context, "chats/${chatIds[position]}/icon.png", "png") { bitmap ->
-                         imageViewChatGroup.setImageBitmap(bitmap)
-                     }
-Index: app/src/main/java/com/singularity/ipcaplus/cryptography/metaData.kt
-IDEA additional info:
-Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
-<+>package com.singularity.ipcaplus.cryptography\r\n\r\nimport android.content.Context\r\nimport android.os.Build\r\nimport android.util.Log\r\nimport androidx.annotation.RequiresApi\r\nimport androidx.security.crypto.EncryptedSharedPreferences\r\nimport androidx.security.crypto.MasterKeys\r\nimport com.google.gson.Gson\r\nimport com.google.gson.GsonBuilder\r\nimport org.bouncycastle.jce.provider.BouncyCastleProvider\r\nimport org.bouncycastle.util.encoders.Base64\r\nimport java.io.UnsupportedEncodingException\r\nimport java.security.InvalidKeyException\r\nimport java.security.NoSuchAlgorithmException\r\nimport java.security.SecureRandom\r\nimport java.security.Security\r\nimport java.util.Objects.hash\r\nimport javax.crypto.*\r\nimport javax.crypto.spec.IvParameterSpec\r\nimport javax.crypto.spec.SecretKeySpec\r\n\r\n\r\n\r\n\r\n\r\nfun encryptMeta(strToEncrypt: String, secret_key: String): String? {\r\n    Security.addProvider(BouncyCastleProvider())\r\n    hash(strToEncrypt)\r\n    var keyBytes: ByteArray\r\n    //val initVector = generateRandomIV()\r\n    val initVector = \"7c5afb00aaecb1a1\"\r\n    val iv = IvParameterSpec(initVector.toByteArray(charset(\"UTF-8\")))\r\n    println(\"AVEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE $initVector\")\r\n\r\n\r\n    try {\r\n        keyBytes = secret_key.toByteArray(charset(\"UTF8\"))\r\n        val skey = SecretKeySpec(keyBytes, \"AES\")\r\n        val input = strToEncrypt.toByteArray(charset(\"UTF8\"))\r\n\r\n        synchronized(Cipher::class.java) {\r\n            val cipher = Cipher.getInstance(\"AES/CBC/PKCS7Padding\")\r\n            cipher.init(Cipher.ENCRYPT_MODE, skey, iv)\r\n\r\n            val cipherText = ByteArray(cipher.getOutputSize(input.size))\r\n            var ctLength = cipher.update(\r\n                input, 0, input.size,\r\n                cipherText, 0\r\n            )\r\n            ctLength += cipher.doFinal(cipherText, ctLength)\r\n            return String(\r\n                Base64.encode(cipherText)\r\n            )\r\n        }\r\n    } catch (uee: UnsupportedEncodingException) {\r\n        uee.printStackTrace()\r\n    } catch (ibse: IllegalBlockSizeException) {\r\n        ibse.printStackTrace()\r\n    } catch (bpe: BadPaddingException) {\r\n        bpe.printStackTrace()\r\n    } catch (ike: InvalidKeyException) {\r\n        ike.printStackTrace()\r\n    } catch (nspe: NoSuchPaddingException) {\r\n        nspe.printStackTrace()\r\n    } catch (nsae: NoSuchAlgorithmException) {\r\n        nsae.printStackTrace()\r\n    } catch (e: ShortBufferException) {\r\n        e.printStackTrace()\r\n    }\r\n\r\n    return null\r\n}\r\n\r\nfun decryptWithAESmeta(key: String, strToDecrypt: String?): String? {\r\n    Security.addProvider(BouncyCastleProvider())\r\n    var keyBytes: ByteArray\r\n    val initVector = \"7c5afb00aaecb1a1\"\r\n\r\n    try {\r\n        val iv = IvParameterSpec(initVector.toByteArray(charset(\"UTF-8\")))\r\n        keyBytes = key.toByteArray(charset(\"UTF8\"))\r\n        val skey = SecretKeySpec(keyBytes, \"AES\")\r\n        val input = org.bouncycastle.util.encoders.Base64\r\n            .decode(strToDecrypt?.trim { it <= ' ' }?.toByteArray(charset(\"UTF8\")))\r\n\r\n        synchronized(Cipher::class.java) {\r\n            val cipher = Cipher.getInstance(\"AES/CBC/PKCS7Padding\")\r\n            cipher.init(Cipher.DECRYPT_MODE, skey, iv)\r\n\r\n            val plainText = ByteArray(cipher.getOutputSize(input.size))\r\n            var ptLength = cipher.update(input, 0, input.size, plainText, 0)\r\n            ptLength += cipher.doFinal(plainText, ptLength)\r\n            val decryptedString = String(plainText)\r\n            return decryptedString.trim { it <= ' ' }\r\n        }\r\n    } catch (uee: UnsupportedEncodingException) {\r\n        uee.printStackTrace()\r\n    } catch (ibse: IllegalBlockSizeException) {\r\n        ibse.printStackTrace()\r\n    } catch (bpe: BadPaddingException) {\r\n        bpe.printStackTrace()\r\n    } catch (ike: InvalidKeyException) {\r\n        ike.printStackTrace()\r\n    } catch (nspe: NoSuchPaddingException) {\r\n        nspe.printStackTrace()\r\n    } catch (nsae: NoSuchAlgorithmException) {\r\n        nsae.printStackTrace()\r\n    } catch (e: ShortBufferException) {\r\n        e.printStackTrace()\r\n    }\r\n\r\n    return null\r\n}\r\n\r\nfun metaGenrateKey(): String {\r\n    //val secretKey: String = \"662ede816988e58fb6d057d9d85605e0\"\r\n    val keygen = (\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\r\n            + \"0123456789\"\r\n            + \"abcdefghijklmnopqrstuvxyz\")\r\n\r\n    val n = 32\r\n\r\n    // create StringBuffer size of keygen\r\n    val secretKey = StringBuilder(n)\r\n    for (i in 0 until n) {\r\n\r\n        // generate a random number between\r\n        // 0 to keygen variable length\r\n        val index = (keygen.length\r\n                * Math.random()).toInt()\r\n\r\n        // add Character one by one in end of secretKey\r\n        secretKey.append(keygen[index])\r\n\r\n    }\r\n    println(secretKey)\r\n    return secretKey.toString()\r\n}\r\n\r\nfun metaBlock(message: String){\r\n    //val secretKey: String = \"662ede816988e58fb6d057d9d85605e0\"\r\n    val keygen = metaGenrateKey()\r\n\r\n    var meta = encryptMeta(message, keygen)\r\n    println(meta)\r\n\r\n    val message_decripted = decryptWithAESmeta(keygen, meta)\r\n    println(message_decripted)\r\n}\r\n\r\n@RequiresApi(Build.VERSION_CODES.M)\r\nfun saveKeygenOx(context : Context, chatUid : String, keygen: String){\r\n\r\n    val keyGenParameterSpec = MasterKeys.AES256_GCM_SPEC\r\n    val masterKeyAlias = MasterKeys.getOrCreate(keyGenParameterSpec)\r\n    val sharedPreferences = EncryptedSharedPreferences.create(\r\n        \"meta_shared_preferences\",\r\n        masterKeyAlias,\r\n        context,\r\n        EncryptedSharedPreferences.PrefKeyEncryptionScheme.AES256_SIV,\r\n        EncryptedSharedPreferences.PrefValueEncryptionScheme.AES256_GCM\r\n    )\r\n\r\n    // storing a value\r\n    sharedPreferences\r\n        .edit()\r\n        .putString(chatUid, keygen)\r\n        .apply()\r\n}\r\n\r\n@RequiresApi(Build.VERSION_CODES.M)\r\nfun getMetaOx(context: Context, chatUid: String): String? {\r\n\r\n    val keyGenParameterSpec = MasterKeys.AES256_GCM_SPEC\r\n    val masterKeyAlias = MasterKeys.getOrCreate(keyGenParameterSpec)\r\n    val sharedPreferences = EncryptedSharedPreferences.create(\r\n        \"meta_shared_preferences\",\r\n        masterKeyAlias,\r\n        context,\r\n        EncryptedSharedPreferences.PrefKeyEncryptionScheme.AES256_SIV,\r\n        EncryptedSharedPreferences.PrefValueEncryptionScheme.AES256_GCM\r\n    )\r\n\r\n    // reading a value\r\n    println(sharedPreferences.getString(chatUid, \"\"))\r\n    return sharedPreferences.getString(chatUid, \"\") // -> \"some_data\"\r\n}\r\n\r\nfun generateRandomIV(): String {\r\n    val ranGen = SecureRandom()\r\n    val aesKey = ByteArray(16)\r\n    ranGen.nextBytes(aesKey)\r\n    val result = StringBuffer()\r\n    for (b in aesKey) {\r\n        result.append(String.format(\"%02x\", b))\r\n    }\r\n    return if (16 > result.toString().length) {\r\n        result.toString()\r\n    } else {\r\n        result.toString().substring(0, 16)\r\n    }\r\n}
-Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
-<+>UTF-8
-===================================================================
-diff --git a/app/src/main/java/com/singularity/ipcaplus/cryptography/metaData.kt b/app/src/main/java/com/singularity/ipcaplus/cryptography/metaData.kt
---- a/app/src/main/java/com/singularity/ipcaplus/cryptography/metaData.kt	(revision 5fa09412663837672a36a41fd04f1700573c5f37)
-+++ b/app/src/main/java/com/singularity/ipcaplus/cryptography/metaData.kt	(date 1642080053886)
-@@ -24,12 +24,12 @@
- 
- 
- 
--fun encryptMeta(strToEncrypt: String, secret_key: String): String? {
-+fun encryptMeta(strToEncrypt: String, secret_key: String, initVector : String): String? {
-     Security.addProvider(BouncyCastleProvider())
-     hash(strToEncrypt)
-     var keyBytes: ByteArray
-     //val initVector = generateRandomIV()
--    val initVector = "7c5afb00aaecb1a1"
-+    //val initVector = "7c5afb00aaecb1a1"
-     val iv = IvParameterSpec(initVector.toByteArray(charset("UTF-8")))
-     println("AVEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE $initVector")
- 
-@@ -72,10 +72,10 @@
-     return null
- }
- 
--fun decryptWithAESmeta(key: String, strToDecrypt: String?): String? {
-+fun decryptWithAESmeta(key: String, strToDecrypt: String?, initVector : String): String? {
-     Security.addProvider(BouncyCastleProvider())
-     var keyBytes: ByteArray
--    val initVector = "7c5afb00aaecb1a1"
-+    //val initVector = "7c5afb00aaecb1a1"
- 
-     try {
-         val iv = IvParameterSpec(initVector.toByteArray(charset("UTF-8")))
-@@ -137,7 +137,7 @@
-     println(secretKey)
-     return secretKey.toString()
- }
--
-+/*
- fun metaBlock(message: String){
-     //val secretKey: String = "662ede816988e58fb6d057d9d85605e0"
-     val keygen = metaGenrateKey()
-@@ -147,7 +147,7 @@
- 
-     val message_decripted = decryptWithAESmeta(keygen, meta)
-     println(message_decripted)
--}
-+}*/
- 
- @RequiresApi(Build.VERSION_CODES.M)
- fun saveKeygenOx(context : Context, chatUid : String, keygen: String){
Index: .idea/deploymentTargetDropDown.xml
===================================================================
diff --git a/.idea/deploymentTargetDropDown.xml b/.idea/deploymentTargetDropDown.xml
deleted file mode 100644
--- a/.idea/deploymentTargetDropDown.xml	(revision 29efb0e97c5348e589c6b41e71b726f921c3b5a0)
+++ /dev/null	(revision 29efb0e97c5348e589c6b41e71b726f921c3b5a0)
@@ -1,17 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="deploymentTargetDropDown">
-    <runningDeviceTargetSelectedWithDropDown>
-      <Target>
-        <type value="RUNNING_DEVICE_TARGET" />
-        <deviceKey>
-          <Key>
-            <type value="VIRTUAL_DEVICE_PATH" />
-            <value value="C:\Users\diogo\.android\avd\Pixel_5_API_27_2.avd" />
-          </Key>
-        </deviceKey>
-      </Target>
-    </runningDeviceTargetSelectedWithDropDown>
-    <timeTargetWasSelectedWithDropDown value="2022-01-20T12:36:13.562834900Z" />
-  </component>
-</project>
\ No newline at end of file
Index: .idea/shelf/Uncommitted_changes_before_Update_at_1_13_2022_1_20_PM__Default_Changelist_.xml
===================================================================
diff --git a/.idea/shelf/Uncommitted_changes_before_Update_at_1_13_2022_1_20_PM__Default_Changelist_.xml b/.idea/shelf/Uncommitted_changes_before_Update_at_1_13_2022_1_20_PM__Default_Changelist_.xml
deleted file mode 100644
--- a/.idea/shelf/Uncommitted_changes_before_Update_at_1_13_2022_1_20_PM__Default_Changelist_.xml	(revision 29efb0e97c5348e589c6b41e71b726f921c3b5a0)
+++ /dev/null	(revision 29efb0e97c5348e589c6b41e71b726f921c3b5a0)
@@ -1,4 +0,0 @@
-<changelist name="Uncommitted_changes_before_Update_at_1_13_2022_1_20_PM_[Default_Changelist]" date="1642080053964" recycled="true" deleted="true">
-  <option name="PATH" value="$PROJECT_DIR$/.idea/shelf/Uncommitted_changes_before_Update_at_1_13_2022_1_20_PM_[Default_Changelist]/shelved.patch" />
-  <option name="DESCRIPTION" value="Uncommitted changes before Update at 1/13/2022 1:20 PM [Default Changelist]" />
-</changelist>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project version=\"4\">\n  <component name=\"DesignSurface\">\n    <option name=\"filePathToZoomLevelMap\">\n      <map>\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/breaktime.xml\" value=\"0.3828125\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/breaktime_form.xml\" value=\"0.3828125\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/button_filtro.xml\" value=\"0.3828125\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/button_green.xml\" value=\"0.3828125\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/button_register.xml\" value=\"0.3828125\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/button_week_day.xml\" value=\"0.3828125\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/chat_photo.xml\" value=\"0.25364583333333335\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/circle.xml\" value=\"0.23802083333333332\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/custom_black_border.xml\" value=\"0.23802083333333332\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/custom_gray_background_outline.xml\" value=\"0.3828125\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/datetime_selected_item.xml\" value=\"0.3828125\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/event_shape.xml\" value=\"0.3828125\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/ic_add_folder.xml\" value=\"0.3828125\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/ic_add_userdrawer_icons.xml\" value=\"0.25364583333333335\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/ic_arrow_back_24.xml\" value=\"0.3828125\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/ic_baseline_arrow_back_ios_24.xml\" value=\"0.3828125\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/ic_baseline_arrow_forward_ios_24.xml\" value=\"0.3828125\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/ic_contact_icon.xml\" value=\"0.2520833333333333\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/ic_delete.xml\" value=\"0.3828125\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/ic_documentdrawer_icons.xml\" value=\"0.3828125\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/ic_file.xml\" value=\"0.3828125\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/ic_folderdrawer_icons.xml\" value=\"0.3828125\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/ic_foto_24.xml\" value=\"0.3828125\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/ic_homedrawer_icons.xml\" value=\"0.3828125\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/ic_lg_ipca.xml\" value=\"0.3828125\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/ic_logo_branco_ipca.xml\" value=\"0.3828125\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/ic_logout.xml\" value=\"0.3828125\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/ic_menu_camera.xml\" value=\"0.3828125\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/ic_menu_gallery.xml\" value=\"0.3828125\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/ic_menu_slideshow.xml\" value=\"0.3828125\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/ic_paper_24.xml\" value=\"0.3828125\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/ic_plus.xml\" value=\"0.3828125\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/ic_search_24.xml\" value=\"0.3828125\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/ic_swap_24.xml\" value=\"0.3828125\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/rounded_dialog.xml\" value=\"0.3828125\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/drawable/side_nav_bar.xml\" value=\"0.3828125\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/activity_add_event.xml\" value=\"0.33\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/activity_add_people.xml\" value=\"0.24375\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/activity_calendar.xml\" value=\"0.36277173913043476\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/activity_chat.xml\" value=\"0.2359375\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/activity_chat_files.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/activity_chat_members.xml\" value=\"0.2375\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/activity_chat_more.xml\" value=\"0.2375\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/activity_contacts.xml\" value=\"0.2359375\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/activity_drawer_activty.xml\" value=\"0.2359375\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/activity_login.xml\" value=\"0.33\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/activity_main.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/activity_news_web.xml\" value=\"0.24375\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/activity_profile.xml\" value=\"0.36277173913043476\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/activity_register.xml\" value=\"0.33\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/activity_schedule.xml\" value=\"0.3546195652173913\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/activity_search.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/activity_tab.xml\" value=\"0.2359375\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/activity_terms_and_condictions.xml\" value=\"0.21642145230185098\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/activity_welcome.xml\" value=\"0.33\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/app_bar_main.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/content_main.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/dialog_add_file.xml\" value=\"0.358695652173913\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/dialog_select_image.xml\" value=\"0.2375\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/dialog_select_name.xml\" value=\"0.2375\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/fragment_calendar.xml\" value=\"0.33\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/fragment_chats.xml\" value=\"0.2375\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/nav_header_main.xml\" value=\"0.358695652173913\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/row_add_pp.xml\" value=\"0.5\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/row_chat.xml\" value=\"0.2375\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/row_event.xml\" value=\"0.7456647398843931\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/row_file.xml\" value=\"0.5\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/row_message_file_self.xml\" value=\"0.32563405797101447\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/row_message_others.xml\" value=\"0.2375\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/row_message_others_file.xml\" value=\"0.2390625\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/row_message_self.xml\" value=\"0.3546195652173913\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/row_message_self_file.xml\" value=\"0.2390625\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/row_search.xml\" value=\"0.2375\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/row_subject.xml\" value=\"0.3546195652173913\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/row_user.xml\" value=\"0.2375\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/row_user_in_chat.xml\" value=\"0.33\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/sample_date_time_picker.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/menu/activity_drawer.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/menu/drawer.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/menu/menu_add.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/menu/menu_chat.xml\" value=\"0.20520833333333333\" />\n        <entry key=\"..\\:/AndroidStudioProjects/ipca_plus/app/src/main/res/mipmap-anydpi-v26/ic_launcher_round.xml\" value=\"0.25364583333333335\" />\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/drawable/chat_message_shape.xml\" value=\"0.29074074074074074\" />\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/drawable/chat_photo.xml\" value=\"0.2953703703703704\" />\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/drawable/circle.xml\" value=\"0.3101851851851852\" />\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/drawable/ic_camera.xml\" value=\"0.22135416666666666\" />\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/drawable/ic_upload.xml\" value=\"0.22135416666666666\" />\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/drawable/rounded_shape.xml\" value=\"0.3101851851851852\" />\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/drawable/user_message_photo.xml\" value=\"0.2953703703703704\" />\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/layout/activity_add_people.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/layout/activity_chat.xml\" value=\"0.25\" />\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/layout/activity_chat_more.xml\" value=\"0.2520833333333333\" />\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/layout/activity_create_chat.xml\" value=\"0.2520833333333333\" />\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/layout/activity_drawer_activty.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/layout/activity_login.xml\" value=\"0.2957427536231884\" />\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/layout/activity_main.xml\" value=\"0.2957427536231884\" />\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/layout/activity_register.xml\" value=\"0.28940217391304346\" />\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/layout/app_bar_main.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/layout/fragment_chats.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/layout/fragment_home.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/layout/row_chat.xml\" value=\"0.67\" />\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/layout/row_message.xml\" value=\"0.28940217391304346\" />\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/layout/row_message_others.xml\" value=\"0.2694746376811594\" />\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/layout/row_message_self.xml\" value=\"0.17831813576494426\" />\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/layout/row_message_system.xml\" value=\"0.26268115942028986\" />\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/layout/row_pesquisa.xml\" value=\"0.26268115942028986\" />\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/menu/activity_drawer.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"..\\:/ProjetosAndroid/ipca_plus/app/src/main/res/menu/drawer.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"..\\:/Users/Asus/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_search.xml\" value=\"0.25\" />\n        <entry key=\"..\\:/Users/Asus/Documents/GitHub/ipca_plus/app/src/main/res/menu/drawer.xml\" value=\"0.128125\" />\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/drawable/all_rounded_corners_dialog.xml\" value=\"0.22135416666666666\" />\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/drawable/button_week_day.xml\" value=\"1.0\" />\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/drawable/ic_menu_slideshow.xml\" value=\"0.22135416666666666\" />\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/drawable/pop_up_round_corners.xml\" value=\"0.22135416666666666\" />\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/drawable/round_corner_drawer.xml\" value=\"0.33\" />\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/drawable/rounded_dialog.xml\" value=\"0.22135416666666666\" />\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/drawable/rounded_shape.xml\" value=\"0.3828125\" />\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_add_event.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_calendar.xml\" value=\"0.29528985507246375\" />\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_capture_portait.xml\" value=\"0.35260416666666666\" />\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_chat.xml\" value=\"0.3982532751091703\" />\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_chat_members.xml\" value=\"0.24010416666666667\" />\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_chat_more.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_create_chat.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_drawer_activty.xml\" value=\"0.2\" />\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_login.xml\" value=\"0.29528985507246375\" />\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_profile.xml\" value=\"0.29528985507246375\" />\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_register.xml\" value=\"0.20520833333333333\" />\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_schedule.xml\" value=\"0.5\" />\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_share_with_friends.xml\" value=\"0.25\" />\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_splash_screen.xml\" value=\"0.20520833333333333\" />\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_verify_security_number.xml\" value=\"0.2375\" />\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_welcome.xml\" value=\"0.2375\" />\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/app_bar_main.xml\" value=\"0.28306159420289856\" />\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/appbar_custom_layout_chat.xml\" value=\"0.24010416666666667\" />\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/custom_bar_layout.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/dialog_add_file.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/dialog_notifications_manager.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/dialog_select_image.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/dialog_select_name.xml\" value=\"0.20520833333333333\" />\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/fragment_home.xml\" value=\"0.23229166666666667\" />\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/nav_header_main.xml\" value=\"0.28306159420289856\" />\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/row_chat.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/row_event.xml\" value=\"0.23229166666666667\" />\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/row_message_others.xml\" value=\"0.2375\" />\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/row_message_self.xml\" value=\"1.4901960784313726\" />\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/row_subject.xml\" value=\"0.67\" />\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/menu/activity_drawer.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"..\\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/menu/drawer.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"..\\:/Users/i/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/activity_chat.xml\" value=\"0.14010416666666667\" />\n        <entry key=\"..\\:/Users/i/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/activity_drawer_activty.xml\" value=\"0.13020833333333334\" />\n        <entry key=\"..\\:/Users/i/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/activity_tab.xml\" value=\"0.14010416666666667\" />\n        <entry key=\"..\\:/Users/i/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/app_bar_main.xml\" value=\"0.13020833333333334\" />\n        <entry key=\"..\\:/Users/i/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/content_main.xml\" value=\"0.13020833333333334\" />\n        <entry key=\"..\\:/Users/i/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/fragment_calendar.xml\" value=\"0.264\" />\n        <entry key=\"..\\:/Users/i/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/fragment_chats.xml\" value=\"0.14010416666666667\" />\n        <entry key=\"..\\:/Users/i/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/fragment_slideshow.xml\" value=\"0.14010416666666667\" />\n        <entry key=\"..\\:/Users/i/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/nav_header_main.xml\" value=\"0.13020833333333334\" />\n        <entry key=\"..\\:/Users/i/AndroidStudioProjects/ipca_plus/app/src/main/res/menu/activity_drawer.xml\" value=\"0.25416666666666665\" />\n        <entry key=\"..\\:/Users/i/AndroidStudioProjects/ipca_plus/app/src/main/res/menu/drawer.xml\" value=\"0.25416666666666665\" />\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/drawable/chat_photo.xml\" value=\"0.3769230769230769\" />\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/drawable/gradient_shadow.xml\" value=\"0.3769230769230769\" />\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/drawable/ic_video.xml\" value=\"0.3769230769230769\" />\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/drawable/shadow.xml\" value=\"0.3769230769230769\" />\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_add_event.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_calendar.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_chat.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_contacts.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_drawer_activty.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_profile.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_register.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_schedule.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_search.xml\" value=\"0.5\" />\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_tab.xml\" value=\"0.26766304347826086\" />\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/app_bar_main.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/content_main.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/nav_header_main.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/row_chat.xml\" value=\"0.33\" />\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/row_message_self.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/row_message_self_file.xml\" value=\"0.20520833333333333\" />\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/row_pesquisa.xml\" value=\"0.33\" />\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/row_search.xml\" value=\"0.5\" />\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/row_user.xml\" value=\"0.33\" />\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/row_user_in_chat.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/menu/activity_drawer.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"..\\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/menu/drawer.xml\" value=\"0.36666666666666664\" />\n        <entry key=\"app/src/main/res/drawable/button_register.xml\" value=\"0.3425925925925926\" />\n        <entry key=\"app/src/main/res/drawable/event_shape.xml\" value=\"0.31203703703703706\" />\n        <entry key=\"app/src/main/res/drawable/ic_baseline_add_24.xml\" value=\"0.3671875\" />\n        <entry key=\"app/src/main/res/drawable/ic_baseline_dehaze_24.xml\" value=\"0.3671875\" />\n        <entry key=\"app/src/main/res/drawable/ic_frame_4.xml\" value=\"0.3671875\" />\n        <entry key=\"app/src/main/res/drawable/ic_lg_ipca.xml\" value=\"0.36153846153846153\" />\n        <entry key=\"app/src/main/res/drawable/pop_up_round_corners.xml\" value=\"0.36153846153846153\" />\n        <entry key=\"app/src/main/res/drawable/round_corner_drawer.xml\" value=\"0.21354166666666666\" />\n        <entry key=\"app/src/main/res/drawable/rounded_shape.xml\" value=\"0.20208333333333334\" />\n        <entry key=\"app/src/main/res/layout/activity_chat.xml\" value=\"0.1265625\" />\n        <entry key=\"app/src/main/res/layout/activity_drawer.xml\" value=\"0.35104166666666664\" />\n        <entry key=\"app/src/main/res/layout/activity_drawer_activty.xml\" value=\"0.14402173913043478\" />\n        <entry key=\"app/src/main/res/layout/activity_login.xml\" value=\"0.19427083333333334\" />\n        <entry key=\"app/src/main/res/layout/activity_search.xml\" value=\"0.32563405797101447\" />\n        <entry key=\"app/src/main/res/layout/activity_tab.xml\" value=\"0.33\" />\n        <entry key=\"app/src/main/res/layout/activity_welcome.xml\" value=\"0.33\" />\n        <entry key=\"app/src/main/res/layout/app_bar_drawer.xml\" value=\"0.35104166666666664\" />\n        <entry key=\"app/src/main/res/layout/app_bar_main.xml\" value=\"0.1707193515704154\" />\n        <entry key=\"app/src/main/res/layout/content_drawer.xml\" value=\"0.35104166666666664\" />\n        <entry key=\"app/src/main/res/layout/content_main.xml\" value=\"0.32563405797101447\" />\n        <entry key=\"app/src/main/res/layout/fragment_gallery.xml\" value=\"0.35104166666666664\" />\n        <entry key=\"app/src/main/res/layout/fragment_home.xml\" value=\"0.35104166666666664\" />\n        <entry key=\"app/src/main/res/layout/fragment_official_chats.xml\" value=\"0.32563405797101447\" />\n        <entry key=\"app/src/main/res/layout/fragment_tab.xml\" value=\"0.3489583333333333\" />\n        <entry key=\"app/src/main/res/layout/nav_header_main.xml\" value=\"0.32563405797101447\" />\n        <entry key=\"app/src/main/res/layout/notification.xml\" value=\"0.5352697095435685\" />\n        <entry key=\"app/src/main/res/layout/row_chat.xml\" value=\"0.32563405797101447\" />\n        <entry key=\"app/src/main/res/layout/row_message_self.xml\" value=\"0.33\" />\n        <entry key=\"app/src/main/res/menu/activity_drawer.xml\" value=\"0.35104166666666664\" />\n        <entry key=\"app/src/main/res/menu/drawer.xml\" value=\"0.325\" />\n      </map>\n    </option>\n  </component>\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" default=\"true\" project-jdk-name=\"11\" project-jdk-type=\"JavaSDK\">\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\n  </component>\n  <component name=\"ProjectType\">\n    <option name=\"id\" value=\"Android\" />\n  </component>\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision 29efb0e97c5348e589c6b41e71b726f921c3b5a0)
+++ b/.idea/misc.xml	(date 1642692029081)
@@ -70,11 +70,8 @@
         <entry key="..\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/row_chat.xml" value="0.2375" />
         <entry key="..\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/row_event.xml" value="0.7456647398843931" />
         <entry key="..\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/row_file.xml" value="0.5" />
-        <entry key="..\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/row_message_file_self.xml" value="0.32563405797101447" />
         <entry key="..\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/row_message_others.xml" value="0.2375" />
-        <entry key="..\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/row_message_others_file.xml" value="0.2390625" />
         <entry key="..\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/row_message_self.xml" value="0.3546195652173913" />
-        <entry key="..\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/row_message_self_file.xml" value="0.2390625" />
         <entry key="..\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/row_search.xml" value="0.2375" />
         <entry key="..\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/row_subject.xml" value="0.3546195652173913" />
         <entry key="..\:/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/row_user.xml" value="0.2375" />
@@ -113,43 +110,15 @@
         <entry key="..\:/ProjetosAndroid/ipca_plus/app/src/main/res/menu/drawer.xml" value="0.36666666666666664" />
         <entry key="..\:/Users/Asus/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_search.xml" value="0.25" />
         <entry key="..\:/Users/Asus/Documents/GitHub/ipca_plus/app/src/main/res/menu/drawer.xml" value="0.128125" />
-        <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/drawable/all_rounded_corners_dialog.xml" value="0.22135416666666666" />
-        <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/drawable/button_week_day.xml" value="1.0" />
         <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/drawable/ic_menu_slideshow.xml" value="0.22135416666666666" />
-        <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/drawable/pop_up_round_corners.xml" value="0.22135416666666666" />
         <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/drawable/round_corner_drawer.xml" value="0.33" />
-        <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/drawable/rounded_dialog.xml" value="0.22135416666666666" />
         <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/drawable/rounded_shape.xml" value="0.3828125" />
-        <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_add_event.xml" value="0.36666666666666664" />
-        <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_calendar.xml" value="0.29528985507246375" />
-        <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_capture_portait.xml" value="0.35260416666666666" />
-        <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_chat.xml" value="0.3982532751091703" />
-        <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_chat_members.xml" value="0.24010416666666667" />
-        <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_chat_more.xml" value="0.36666666666666664" />
-        <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_create_chat.xml" value="0.36666666666666664" />
-        <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_drawer_activty.xml" value="0.2" />
-        <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_login.xml" value="0.29528985507246375" />
-        <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_profile.xml" value="0.29528985507246375" />
-        <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_register.xml" value="0.20520833333333333" />
-        <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_schedule.xml" value="0.5" />
-        <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_share_with_friends.xml" value="0.25" />
+        <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_drawer_activty.xml" value="0.28306159420289856" />
         <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_splash_screen.xml" value="0.20520833333333333" />
-        <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_verify_security_number.xml" value="0.2375" />
-        <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/activity_welcome.xml" value="0.2375" />
         <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/app_bar_main.xml" value="0.28306159420289856" />
-        <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/appbar_custom_layout_chat.xml" value="0.24010416666666667" />
-        <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/custom_bar_layout.xml" value="0.36666666666666664" />
         <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/dialog_add_file.xml" value="0.36666666666666664" />
-        <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/dialog_notifications_manager.xml" value="0.36666666666666664" />
         <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/dialog_select_image.xml" value="0.36666666666666664" />
-        <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/dialog_select_name.xml" value="0.20520833333333333" />
-        <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/fragment_home.xml" value="0.23229166666666667" />
         <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/nav_header_main.xml" value="0.28306159420289856" />
-        <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/row_chat.xml" value="0.36666666666666664" />
-        <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/row_event.xml" value="0.23229166666666667" />
-        <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/row_message_others.xml" value="0.2375" />
-        <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/row_message_self.xml" value="1.4901960784313726" />
-        <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/layout/row_subject.xml" value="0.67" />
         <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/menu/activity_drawer.xml" value="0.36666666666666664" />
         <entry key="..\:/Users/diogo/Documents/GitHub/ipca_plus/app/src/main/res/menu/drawer.xml" value="0.36666666666666664" />
         <entry key="..\:/Users/i/AndroidStudioProjects/ipca_plus/app/src/main/res/layout/activity_chat.xml" value="0.14010416666666667" />
@@ -182,9 +151,7 @@
         <entry key="..\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/nav_header_main.xml" value="0.36666666666666664" />
         <entry key="..\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/row_chat.xml" value="0.33" />
         <entry key="..\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/row_message_self.xml" value="0.36666666666666664" />
-        <entry key="..\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/row_message_self_file.xml" value="0.20520833333333333" />
         <entry key="..\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/row_pesquisa.xml" value="0.33" />
-        <entry key="..\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/row_search.xml" value="0.5" />
         <entry key="..\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/row_user.xml" value="0.33" />
         <entry key="..\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/layout/row_user_in_chat.xml" value="0.36666666666666664" />
         <entry key="..\:/Users/nunoi/Documents/GitHub/ipca_plus/app/src/main/res/menu/activity_drawer.xml" value="0.36666666666666664" />
@@ -199,9 +166,11 @@
         <entry key="app/src/main/res/drawable/round_corner_drawer.xml" value="0.21354166666666666" />
         <entry key="app/src/main/res/drawable/rounded_shape.xml" value="0.20208333333333334" />
         <entry key="app/src/main/res/layout/activity_chat.xml" value="0.1265625" />
+        <entry key="app/src/main/res/layout/activity_chat_more.xml" value="0.19739583333333333" />
         <entry key="app/src/main/res/layout/activity_drawer.xml" value="0.35104166666666664" />
-        <entry key="app/src/main/res/layout/activity_drawer_activty.xml" value="0.14402173913043478" />
+        <entry key="app/src/main/res/layout/activity_drawer_activty.xml" value="0.33" />
         <entry key="app/src/main/res/layout/activity_login.xml" value="0.19427083333333334" />
+        <entry key="app/src/main/res/layout/activity_profile.xml" value="0.35104166666666664" />
         <entry key="app/src/main/res/layout/activity_search.xml" value="0.32563405797101447" />
         <entry key="app/src/main/res/layout/activity_tab.xml" value="0.33" />
         <entry key="app/src/main/res/layout/activity_welcome.xml" value="0.33" />
@@ -209,6 +178,7 @@
         <entry key="app/src/main/res/layout/app_bar_main.xml" value="0.1707193515704154" />
         <entry key="app/src/main/res/layout/content_drawer.xml" value="0.35104166666666664" />
         <entry key="app/src/main/res/layout/content_main.xml" value="0.32563405797101447" />
+        <entry key="app/src/main/res/layout/dialog_notifications_manager.xml" value="0.19739583333333333" />
         <entry key="app/src/main/res/layout/fragment_gallery.xml" value="0.35104166666666664" />
         <entry key="app/src/main/res/layout/fragment_home.xml" value="0.35104166666666664" />
         <entry key="app/src/main/res/layout/fragment_official_chats.xml" value="0.32563405797101447" />
@@ -217,6 +187,7 @@
         <entry key="app/src/main/res/layout/notification.xml" value="0.5352697095435685" />
         <entry key="app/src/main/res/layout/row_chat.xml" value="0.32563405797101447" />
         <entry key="app/src/main/res/layout/row_message_self.xml" value="0.33" />
+        <entry key="app/src/main/res/layout/row_message_self_file.xml" value="0.33" />
         <entry key="app/src/main/res/menu/activity_drawer.xml" value="0.35104166666666664" />
         <entry key="app/src/main/res/menu/drawer.xml" value="0.325" />
       </map>
Index: app/src/main/java/com/singularity/ipcaplus/chat/ChatActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.singularity.ipcaplus.chat\n\nimport android.annotation.SuppressLint\nimport android.app.ActionBar\nimport android.app.Activity\nimport android.content.ClipData\nimport android.content.ClipboardManager\nimport android.content.ContentValues.TAG\nimport android.content.Context\nimport android.content.Intent\nimport android.database.Cursor\nimport android.graphics.Bitmap\nimport android.net.Uri\nimport android.os.Build\nimport android.os.Bundle\nimport android.os.Environment\nimport android.provider.MediaStore\nimport android.provider.OpenableColumns\nimport android.util.Log\nimport android.view.*\nimport android.widget.*\nimport androidx.annotation.RequiresApi\nimport androidx.appcompat.app.AlertDialog\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.core.app.ActivityCompat\nimport androidx.core.net.toUri\nimport androidx.core.view.isVisible\nimport androidx.recyclerview.widget.DefaultItemAnimator\nimport androidx.recyclerview.widget.LinearLayoutManager\nimport androidx.recyclerview.widget.RecyclerView\nimport com.google.android.material.bottomsheet.BottomSheetDialog\nimport com.google.firebase.Timestamp\nimport com.google.firebase.auth.FirebaseAuth\nimport com.google.firebase.auth.ktx.auth\nimport com.google.firebase.firestore.Query\nimport com.google.firebase.firestore.ktx.firestore\nimport com.google.firebase.ktx.Firebase\nimport com.google.firebase.storage.FirebaseStorage\nimport com.google.firebase.storage.ktx.storage\nimport com.google.zxing.integration.android.IntentIntegrator\nimport com.google.zxing.integration.android.IntentIntegrator.REQUEST_CODE\nimport com.singularity.ipcaplus.AddButtonActivity\nimport com.singularity.ipcaplus.drawer.CalendarActivity\nimport com.singularity.ipcaplus.R\nimport com.singularity.ipcaplus.utils.Utilis\nimport com.singularity.ipcaplus.cryptography.decryptWithAESmeta\nimport com.singularity.ipcaplus.cryptography.encryptMeta\nimport com.singularity.ipcaplus.cryptography.getMetaOx\nimport com.singularity.ipcaplus.databinding.ActivityChatBinding\nimport com.singularity.ipcaplus.drawer.DrawerActivty\nimport com.singularity.ipcaplus.drawer.ProfileActivity\nimport com.singularity.ipcaplus.models.Chat\nimport com.singularity.ipcaplus.models.Message\nimport com.singularity.ipcaplus.models.Profile\nimport com.singularity.ipcaplus.utils.ActivityImageHelper\nimport com.singularity.ipcaplus.utils.Backend\nimport com.singularity.ipcaplus.utils.Backend.createJsonArrayString\nimport com.singularity.ipcaplus.utils.Backend.getChatUsers\nimport com.singularity.ipcaplus.utils.Backend.getIv\nimport com.singularity.ipcaplus.utils.Backend.getNotificationKey\nimport com.singularity.ipcaplus.utils.UserLoggedIn\nimport com.singularity.ipcaplus.utils.Utilis.getFirstAndLastName\nimport com.singularity.ipcaplus.utils.Utilis.sendNotificationToGroup\nimport com.theartofdev.edmodo.cropper.CropImage\nimport com.theartofdev.edmodo.cropper.CropImageView\nimport kotlinx.coroutines.*\nimport org.json.JSONArray\nimport org.json.JSONObject\nimport java.io.*\nimport java.net.URL\nimport java.time.LocalDateTime\nimport java.time.format.DateTimeFormatter\nimport java.util.regex.Pattern\nimport javax.net.ssl.HttpsURLConnection\n\nclass ChatActivity : ActivityImageHelper() {\n\n    var messages = arrayListOf<Message>()\n    var currentUserIsAdmin = false\n    private lateinit var binding: ActivityChatBinding\n    private lateinit var chat_id: String\n    var tokens_adress = arrayListOf<String>()\n    var chat_user_uids = arrayListOf<String>()\n    var chat_users = arrayListOf<Profile>()\n    private var mAdapter: RecyclerView.Adapter<*>? = null\n    private var mLayoutManager: LinearLayoutManager? = null\n\n    lateinit var keygen: String\n    var userName = \"\"\n\n    // receive img from gallery\n    private var imageUri: Uri? = null\n    //lateinit var storageRef: FirebaseStorage? = null\n\n    val db = Firebase.firestore\n\n    @SuppressLint(\"WrongConstant\")\n    @RequiresApi(Build.VERSION_CODES.O)\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_chat)\n\n        binding = ActivityChatBinding.inflate(layoutInflater)\n        setContentView(binding.root)\n\n        supportActionBar?.displayOptions = ActionBar.DISPLAY_SHOW_CUSTOM\n        supportActionBar?.setCustomView(R.layout.appbar_custom_layout_chat)\n        findViewById<TextView>(R.id.AppBarTittle).text = \"Chat name\"\n        // Back button\n        findViewById<ImageView>(R.id.BackButtonImageView).setOnClickListener {\n            finish()\n        }\n\n        // Variables\n        chat_id = intent.getStringExtra(\"chat_id\").toString()\n        val current = LocalDateTime.now()\n\n        val formatter = DateTimeFormatter.BASIC_ISO_DATE\n        val formatted = current.format(formatter)\n\n        keygen = getMetaOx(this, chat_id).toString()\n\n        // Check if user is admin\n        Backend.getChatAdminIds(chat_id) {\n            val currentUser = Firebase.auth.currentUser!!.uid\n            for (admin in it) {\n                if (admin == currentUser)\n                    currentUserIsAdmin = true\n            }\n        }\n\n\n        val profilePicfromTop = findViewById<ImageView>(R.id.ProfileImageView)\n        Utilis.getFile(this, \"chats/$chat_id/icon.png\", \"png\") { bitmap ->\n            profilePicfromTop.setImageBitmap(bitmap)\n        }\n\n\n        // Send Message\n\n        binding.fabSend.setOnClickListener {\n\n            if (!binding.editTextMessage.text.isNullOrBlank()) {\n                // get data of ecripted shared preferences (\"chatuid\" -> \"key\")\n                // Build encryptation data of message send by the user\n                getIv(chat_id) {\n\n                    var meta = encryptMeta(binding.editTextMessage.text.toString(),\n                        keygen.toString(),\n                        it.toString())\n                    val savedText = binding.editTextMessage.text.toString()\n\n                    val message = Message(\n                        Firebase.auth.currentUser!!.uid,\n                        meta.toString(),\n                        Timestamp.now(),\n                        \"\"\n                    )\n\n                    Backend.getUserProfile(Firebase.auth.currentUser!!.uid) { user ->\n                        userName = Utilis.getFirstAndLastName(user.name)\n                    }\n\n                    db.collection(\"chat\").document(\"$chat_id\").collection(\"message\")\n                        .add(message.toHash())\n                        .addOnSuccessListener { documentReference ->\n\n                            GlobalScope.launch {\n                                withContext(Dispatchers.IO) {\n                                    getNotificationKey(chat_id) {\n\n                                        Backend.getGroupChatById(chat_id) { chat ->\n                                            GlobalScope.launch {\n                                                withContext(Dispatchers.IO) {\n                                                    sendNotificationToGroup(chat!!.name,\n                                                        \"$userName: $savedText\",\n                                                        it.toString())\n\n                                                }\n                                            }\n                                        }\n\n                                    }\n                                }\n                            }\n                            Log.d(TAG, \"DocumentSnapshot added with ID: ${documentReference.id}\")\n\n\n                        }\n                        .addOnFailureListener { e ->\n                            Log.w(TAG, \"Error adding document\", e)\n                        }\n\n                    binding.editTextMessage.text.clear()\n\n                }\n            }\n\n        }\n\n        // send img\n        binding.buttonTakePhoto.setOnClickListener() {\n            checkPermission(android.Manifest.permission.READ_EXTERNAL_STORAGE,\n                STORAGE_PERMISSION_CODE)\n        }\n\n\n        // send file\n        binding.buttonSendAnexo.setOnClickListener {\n            chooseFile()\n        }\n\n        // Show Messages\n        db.collection(\"chat\").document(\"$chat_id\").collection(\"message\")\n            .orderBy(\"time\", Query.Direction.DESCENDING)\n            .addSnapshotListener { documents, e ->\n\n                documents?.let {\n                    messages.clear()\n                    for (document in it) {\n                        val message = Message.fromHash(document)\n                        messages.add(message)\n\n                    }\n                    mAdapter?.notifyDataSetChanged()\n                }\n\n            }\n\n        // Recycler View Messages\n        mLayoutManager = LinearLayoutManager(this, LinearLayoutManager.VERTICAL, false)\n        binding.recycleViewChat.layoutManager = mLayoutManager\n        mAdapter = MessageAdapter()\n        binding.recycleViewChat.itemAnimator = DefaultItemAnimator()\n        binding.recycleViewChat.adapter = mAdapter\n\n        binding.recycleViewChat.setItemViewCacheSize(20)\n        binding.recycleViewChat.isDrawingCacheEnabled = true\n        binding.recycleViewChat.setDrawingCacheQuality(View.DRAWING_CACHE_QUALITY_HIGH);\n\n        mLayoutManager!!.reverseLayout = true\n\n    }\n\n\n    /*\n       This function create the action bar above the activity\n    */\n    override fun onCreateOptionsMenu(menu: Menu): Boolean {\n        val inflater: MenuInflater = menuInflater\n        inflater.inflate(R.menu.menu_chat, menu)\n\n        db.collection(\"profile\")\n            .document(Firebase.auth.currentUser!!.uid)\n            .collection(\"chat\")\n            .addSnapshotListener { documents, e ->\n                documents?.let {\n                    for (document in it) {\n                        if (document.id == chat_id) {\n                            val chat = Chat.fromHash(document)\n                            var name = chat.name\n                            if (chat.type == \"chat\") {\n                                name = Utilis.getFirstAndLastName(chat.name)\n                            }\n                            //supportActionBar?.title = chat.name\n                            findViewById<TextView>(R.id.AppBarTittle).text = name\n                        }\n                    }\n                }\n            }\n\n\n        return true\n    }\n\n\n    /*\n        This function define the events of the action bar buttons\n     */\n    override fun onOptionsItemSelected(item: MenuItem): Boolean {\n        super.onOptionsItemSelected(item)\n\n        when (item.itemId) {\n            R.id.calendario -> {\n                val intent = Intent(this, CalendarActivity::class.java)\n                intent.putExtra(\"chat_id\", chat_id)\n                intent.putExtra(\"is_admin\", currentUserIsAdmin)\n                startActivity(intent)\n                return true\n            }\n            R.id.chatMore -> {\n                val intent = Intent(this, ChatMoreActivity::class.java)\n                intent.putExtra(\"chat_id\", chat_id)\n                intent.putExtra(\"is_admin\", currentUserIsAdmin)\n                intent.putExtra(\"chat_name\",\n                    findViewById<TextView>(R.id.AppBarTittle).text.toString())\n                startActivity(intent)\n                return true\n            }\n        }\n\n        return false\n    }\n\n\n    /*\n        Open Select a file window\n    */\n    private fun chooseFile() {\n        val intent = Intent()\n        intent.action = Intent.ACTION_OPEN_DOCUMENT\n        intent.addCategory(Intent.CATEGORY_OPENABLE)\n        intent.type = \"*/*\"\n        val extraMimeTypes = arrayOf(\"application/msword\",\n            \"application/vnd.openxmlformats-officedocument.wordprocessingml.document\", // .doc & .docx\n            \"application/vnd.ms-powerpoint\",\n            \"application/vnd.openxmlformats-officedocument.presentationml.presentation\", // .ppt & .pptx\n            \"application/vnd.ms-excel\",\n            \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\", // .xls & .xlsx\n            \"text/plain\",\n            \"application/pdf\",\n            \"application/zip\",\n            \"image/gif\",\n            \"image/jpeg\",\n            \"image/jpg\",\n            \"image/png\",\n            \"image/svg+xml\",\n            \"image/webp\",\n            \"image/vnd.wap.wbmp\",\n            \"image/vnd.nok-wallpaper\",\n            \"text/xml\",\n            \"application/json\",\n            \"text/json\",\n            \"text/javascript\"\n        )\n        intent.putExtra(Intent.EXTRA_MIME_TYPES, extraMimeTypes)\n        //intent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE, true)\n        startActivityForResult(intent, 1)\n    }\n\n\n    /*\n        Request confirmation before download the file, then download and store the file in the download folder in the mobile device\n    */\n    fun downloadFileRequest(path: String, name: String) {\n\n        confirmationDialog(\"Transferir Ficheiro\",\n            \"Tens certeza que queres transferir este ficheiro?\") {\n\n            val fileRef = Firebase.storage.reference.child(\"$path/${name}\")\n            val strArray = Pattern.compile(\"[.]\").split(name)\n            val fileName = strArray[0]\n            val fileExtension = strArray[strArray.size - 1]\n\n            fileRef.downloadUrl.addOnSuccessListener {\n                Utilis.downloadFile(this, fileName, \".$fileExtension\",\n                    Environment.DIRECTORY_DOWNLOADS, it)\n            }\n        }\n    }\n\n\n    /*\n        Confirmation Dialog Display Yes / No Options\n    */\n    private fun confirmationDialog(title: String, description: String, callBack: () -> Unit) {\n        val alertDialog = AlertDialog.Builder(this)\n\n        alertDialog.setTitle(title)\n        alertDialog.setMessage(description)\n\n        alertDialog.setPositiveButton(\"Sim\") { _, _ ->\n            callBack()\n        }\n\n        alertDialog.setNegativeButton(\"Não\") { _, _ ->\n            alertDialog.show().dismiss()\n        }\n\n        alertDialog.show()\n    }\n\n\n    /*\n      This function happen after picking photo, and make changes in the activity\n   */\n    override fun onActivityResult(requestCode: Int, resultCode: Int, data: Intent?) {\n        super.onActivityResult(requestCode, resultCode, data)\n\n        if (requestCode == IMAGE_REQUEST_CODE && resultCode == RESULT_OK) {\n            CropImage.activity(data?.data)\n                .setGuidelines(CropImageView.Guidelines.ON)\n                .setAspectRatio(1, 1)\n                .start(this)\n        }\n\n        if (requestCode == CropImage.CROP_IMAGE_ACTIVITY_REQUEST_CODE) {\n            val result = CropImage.getActivityResult(data)\n            if (resultCode == RESULT_OK) {\n                //binding.imageViewProfile.setImageURI(result.uri)\n                imageUri = result.uri\n\n                val extensionArray = Pattern.compile(\"[.]\").split(result.uri!!.toString())\n                val extension = extensionArray[extensionArray.size - 1]\n\n                CoroutineScope(Dispatchers.IO).launch {\n                    val userId = FirebaseAuth.getInstance().currentUser!!.uid\n                    val filePath =\n                        \"chats/${chat_id}/messages/${Utilis.uniqueImageNameGen()}.${extension}\"\n                    val storageRef = FirebaseStorage.getInstance()\n                        .getReference(filePath)\n\n                    // compressing image\n                    val bitmap = MediaStore.Images.Media.getBitmap(contentResolver, imageUri)\n                    val byteArrayOutputStream = ByteArrayOutputStream()\n                    bitmap.compress(Bitmap.CompressFormat.JPEG, 6, byteArrayOutputStream)\n                    val reducedImage: ByteArray = byteArrayOutputStream.toByteArray()\n\n                    storageRef.putBytes(reducedImage)\n                        .addOnSuccessListener {\n                            storageRef.downloadUrl.addOnSuccessListener {\n\n                                //uploading image url\n                                Utilis.uploadFile(result.uri, filePath)\n\n\n                                getIv(chat_id) { iv ->\n\n                                    var meta = encryptMeta(filePath,\n                                        keygen,\n                                        iv.toString())\n\n                                    val message = Message(\n                                        Firebase.auth.currentUser!!.uid,\n                                        meta.toString(),\n                                        Timestamp.now(),\n                                        \"img\"\n                                    )\n\n                                    db.collection(\"chat\").document(\"$chat_id\").collection(\"message\")\n                                        .add(message.toHash())\n                                        .addOnSuccessListener { documentReference ->\n\n                                            GlobalScope.launch {\n                                                withContext(Dispatchers.IO) {\n\n                                                    getNotificationKey(chat_id) {\n                                                        GlobalScope.launch {\n                                                            withContext(Dispatchers.IO) {\n                                                                sendNotificationToGroup(chat_id,\n                                                                    Utilis.getFirstAndLastName(\n                                                                        UserLoggedIn.name.toString()) + \" enviou uma imagem.\",\n                                                                    it.toString())\n                                                            }\n                                                        }\n                                                    }\n                                                }\n                                            }\n\n                                            Log.d(TAG,\n                                                \"DocumentSnapshot added with ID: ${documentReference.id}\")\n\n\n                                        }\n\n                                }\n                            }\n                        }\n                }\n            }\n        }\n\n        if (requestCode == 1 && resultCode == RESULT_OK) {\n            var path = \"\"\n            var fileName = \"\"\n\n            val clipData = data?.clipData\n            if (clipData == null) {\n\n                var cursor: Cursor? = null\n                try {\n                    contentResolver.query(data?.data!!, null, null, null, null).use {\n\n                        cursor = it\n\n                        if (cursor != null && cursor!!.moveToFirst()) {\n\n                            fileName = cursor!!.getString(cursor!!.getColumnIndex(\n                                OpenableColumns.DISPLAY_NAME).toInt())\n\n                        }\n\n                    }\n                } finally {\n                    cursor?.close()\n\n                }\n\n                path += data?.data.toString()\n            } else {\n                for (i in 0 until clipData.itemCount) {\n                    val item = clipData.getItemAt(i)\n                    val uri: Uri = item.uri\n                    path += uri.toString() + \"\\n\"\n                }\n            }\n\n            CoroutineScope(Dispatchers.IO).launch {\n\n                val filePath = \"chats/$chat_id/messages/$fileName\"\n                val storageRef = FirebaseStorage.getInstance().getReference(filePath)\n\n                //uploading image url\n                Utilis.uploadFile(path.toUri(), filePath)\n\n                getIv(chat_id) { iv ->\n\n                    var meta = encryptMeta(filePath,\n                        keygen,\n                        iv.toString())\n\n                    val message = Message(\n                        Firebase.auth.currentUser!!.uid,\n                        meta.toString(),\n                        Timestamp.now(),\n                        \"file\"\n                    )\n\n                    db.collection(\"chat\").document(\"$chat_id\").collection(\"message\")\n                        .add(message.toHash())\n                        .addOnSuccessListener { documentReference ->\n\n                            GlobalScope.launch {\n                                withContext(Dispatchers.IO) {\n\n                                    getNotificationKey(chat_id) {\n                                        GlobalScope.launch {\n                                            withContext(Dispatchers.IO) {\n                                                sendNotificationToGroup(chat_id,\n                                                    Utilis.getFirstAndLastName(\n                                                        UserLoggedIn.name.toString()) + \" enviou um ficheiro.\",\n                                                    it.toString())\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            Log.d(TAG,\n                                \"DocumentSnapshot added with ID: ${documentReference.id}\")\n\n                        }\n\n\n                }\n\n\n            }\n\n        }\n\n    }\n\n    // When the support action bar back button is pressed, the app will go back to the previous activity\n    override fun onSupportNavigateUp(): Boolean {\n        onBackPressed()\n        return true\n    }\n\n\n    inner class MessageAdapter : RecyclerView.Adapter<MessageAdapter.ViewHolder>() {\n\n        inner class ViewHolder(val v: View) : RecyclerView.ViewHolder(v)\n\n        var otherUser = false\n        var currentIndex = 0\n\n        override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {\n\n            if (viewType == 0) {\n                otherUser = false\n                return ViewHolder(\n                    LayoutInflater.from(parent.context)\n                        .inflate(R.layout.row_message_system, parent, false))\n\n\n            } else if (viewType <= 3) {\n                otherUser = false\n\n                if (viewType == 2) {\n                    return ViewHolder(\n                        LayoutInflater.from(parent.context)\n                            .inflate(R.layout.row_message_self_image, parent, false))\n                } else if (viewType == 3) {\n                    return ViewHolder(\n                        LayoutInflater.from(parent.context)\n                            .inflate(R.layout.row_message_self_file, parent, false))\n                } else {\n                    return ViewHolder(\n                        LayoutInflater.from(parent.context)\n                            .inflate(R.layout.row_message_self, parent, false))\n                }\n\n            } else {\n                otherUser = true\n                if (viewType == 5) {\n                    return ViewHolder(\n                        LayoutInflater.from(parent.context)\n                            .inflate(R.layout.row_message_others_image, parent, false))\n                } else if ((viewType == 6)) {\n                    return ViewHolder(\n                        LayoutInflater.from(parent.context)\n                            .inflate(R.layout.row_message_others_file, parent, false))\n                } else {\n                    return ViewHolder(\n                        LayoutInflater.from(parent.context)\n                            .inflate(R.layout.row_message_others, parent, false))\n                }\n\n            }\n\n\n        }\n\n        @RequiresApi(Build.VERSION_CODES.M)\n        override fun onBindViewHolder(holder: ViewHolder, position: Int) {\n\n            holder.v.apply {\n\n                val messageType = messages[position].files\n                currentIndex = position + 1\n\n\n                if (messageType == \"\") {\n\n                    val textViewMessage = findViewById<TextView?>(R.id.textViewMessage)\n                    val timeLastMessage = findViewById<TextView?>(R.id.timeLastMessage)\n                    val textViewUsername = findViewById<TextView?>(R.id.textViewUsername)\n\n\n                    timeLastMessage.visibility = View.INVISIBLE\n\n                    textViewMessage.setOnLongClickListener {\n                        copyTextToClipboard(textViewMessage)\n                        true\n                    }\n\n                    textViewMessage.setOnClickListener {\n                        timeLastMessage.visibility = View.VISIBLE\n                    }\n\n\n                    keygen = getMetaOx(context, chat_id).toString()\n                    getIv(chat_id) {\n                        val message_decripted = decryptWithAESmeta(keygen.toString(),\n                            messages[position].message,\n                            it.toString())\n\n                        textViewMessage?.text = message_decripted\n                        if (position == messages.size - 1) {\n                            val data = Utilis.getDate(\n                                messages[position].time.seconds * 1000,\n                                \"yyyy-MM-dd'T'HH:mm:ss.SSS\"\n                            )\n                            timeLastMessage.isVisible = true\n                            timeLastMessage.text =\n                                Utilis.getHours(data) + \":\" + Utilis.getMinutes(data)\n                        }\n\n                        if (otherUser) {\n                            val imageViewUser = findViewById<ImageView?>(R.id.imageViewUser)\n\n                            /*Backend.getUserProfile(messages[position].user) { user ->\n                                textViewUsername.text = getFirstAndLastName(user.name)\n                            }*/\n\n                            if (imageViewUser != null) {\n                                Utilis.getFile(context,\n                                    \"profilePictures/${messages[position].user}.png\",\n                                    \"png\") { bitmap ->\n                                    imageViewUser.setImageBitmap(bitmap)\n\n                                    imageViewUser.setOnLongClickListener {\n                                        //messages[position].user\n                                        openShortcut(bitmap,\n                                            messages[position].user)\n                                        true\n                                    }\n                                }\n                            }\n                        }\n                    }\n                } else if (messageType == \"img\") {\n\n                    val imageView = findViewById<ImageView?>(R.id.imageViewSend)\n                    val timeLastMessage = findViewById<TextView?>(R.id.timeLastMessage)\n\n                    getIv(chat_id) {\n                        val message_decripted = decryptWithAESmeta(keygen.toString(),\n                            messages[position].message,\n                            it.toString())\n\n\n                        if (position == messages.size - 1) {\n                            val data = Utilis.getDate(\n                                messages[position].time.seconds * 1000,\n                                \"yyyy-MM-dd'T'HH:mm:ss.SSS\"\n                            )\n                            timeLastMessage.isVisible = true\n                            timeLastMessage.text =\n                                Utilis.getHours(data) + \":\" + Utilis.getMinutes(data)\n                        }\n\n                        if (imageView != null) {\n                            val extensionArray =\n                                Pattern.compile(\"[.]\").split(message_decripted.toString())\n                            val extension = extensionArray[extensionArray.size - 1]\n                            Utilis.getFile(context,\n                                message_decripted.toString(),\n                                extension) { bitmap ->\n                                imageView.setImageBitmap(bitmap)\n                            }\n                        }\n\n                    }\n\n                } else if (messageType == \"file\") {\n\n                    getIv(chat_id) {\n\n\n                        val timeLastMessage = findViewById<TextView?>(R.id.timeLastMessage2)\n                        val downloadButton = findViewById<ImageView?>(R.id.imageViewSend2)\n\n                        val message_decripted = decryptWithAESmeta(keygen.toString(),\n                            messages[position].message,\n                            it.toString())\n\n                        val strArray = Pattern.compile(\"[/]\").split(message_decripted)\n                        val str = strArray[strArray.size - 1]\n                        if (timeLastMessage != null)\n                            timeLastMessage.text = str\n\n                        downloadButton?.setOnClickListener {\n\n                            val strArray = Pattern.compile(\"[/]\").split(message_decripted)\n                            val str = strArray[strArray.size - 1]\n\n                            downloadFileRequest(\"chats/$chat_id/messages/\", str)\n                        }\n\n                    }\n\n                }\n\n            }\n        }\n\n        override fun getItemViewType(position: Int): Int {\n\n            // Self Message\n            if (messages[position].user == Firebase.auth.currentUser!!.uid) {\n\n                if (messages[position].files == \"img\")\n                    return 2\n                else if (messages[position].files == \"file\")\n                    return 3\n                else\n                    return 1\n\n            }\n            // System Message Text\n            else if (messages[position].user == \"system\") {\n                return 0\n            }\n            // Other User Message\n            else {\n\n                if (messages[position].files == \"img\")\n                    return 5\n                else if (messages[position].files == \"file\")\n                    return 6\n                else\n                    return 4\n\n            }\n\n        }\n\n        override fun getItemCount(): Int {\n            return messages.size\n        }\n    }\n\n    private fun copyTextToClipboard(textCopy: TextView) {\n        val textToCopy = textCopy.text\n        val clipboardManager = getSystemService(Context.CLIPBOARD_SERVICE) as ClipboardManager\n        val clipData = ClipData.newPlainText(\"text\", textToCopy)\n        clipboardManager.setPrimaryClip(clipData)\n        Toast.makeText(this, \"Text copied to clipboard\", Toast.LENGTH_LONG).show()\n    }\n\n    private fun openShortcut(image: Bitmap, userId: String) {\n\n        // Variables\n        val dialog = BottomSheetDialog(this, R.style.AppBottomSheetDialogTheme)\n        val row = layoutInflater.inflate(R.layout.shortcut_manager_dialog, null)\n\n        row.findViewById<ImageView>(R.id.imageViewProfileShorcut).setImageBitmap(image)\n\n        Backend.getUserProfile(userId) {\n            row.findViewById<TextView>(R.id.UserNameTextView).text = getFirstAndLastName(it.name)\n        }\n\n\n        row.findViewById<LinearLayout>(R.id.seeProfile).setOnClickListener {\n            val intent = Intent(this, ProfileActivity::class.java)\n            intent.putExtra(\"userId\", userId)\n            startActivity(intent)\n        }\n\n        row.findViewById<LinearLayout>(R.id.SendMessage).setOnClickListener {\n            val intent = Intent(this, AddButtonActivity::class.java)\n            startActivity(intent)\n        }\n\n        dialog.setContentView(row)\n        dialog.show()\n\n    }\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/singularity/ipcaplus/chat/ChatActivity.kt b/app/src/main/java/com/singularity/ipcaplus/chat/ChatActivity.kt
--- a/app/src/main/java/com/singularity/ipcaplus/chat/ChatActivity.kt	(revision 29efb0e97c5348e589c6b41e71b726f921c3b5a0)
+++ b/app/src/main/java/com/singularity/ipcaplus/chat/ChatActivity.kt	(date 1642692376088)
@@ -235,8 +235,6 @@
         binding.recycleViewChat.adapter = mAdapter
 
         binding.recycleViewChat.setItemViewCacheSize(20)
-        binding.recycleViewChat.isDrawingCacheEnabled = true
-        binding.recycleViewChat.setDrawingCacheQuality(View.DRAWING_CACHE_QUALITY_HIGH);
 
         mLayoutManager!!.reverseLayout = true
 
@@ -667,13 +665,16 @@
                         }
 
                         if (otherUser) {
-                            val imageViewUser = findViewById<ImageView?>(R.id.imageViewUser)
+                            var imageViewUser = findViewById<ImageView?>(R.id.imageViewUser)
 
                             /*Backend.getUserProfile(messages[position].user) { user ->
                                 textViewUsername.text = getFirstAndLastName(user.name)
                             }*/
 
                             if (imageViewUser != null) {
+
+                                println("------------- " + messages[position].user)
+
                                 Utilis.getFile(context,
                                     "profilePictures/${messages[position].user}.png",
                                     "png") { bitmap ->
@@ -723,6 +724,7 @@
 
                     }
 
+                    
                 } else if (messageType == "file") {
 
                     getIv(chat_id) {
Index: app/src/main/res/layout/dialog_select_name.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<androidx.constraintlayout.widget.ConstraintLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\">\n\n    <TextView\n        android:id=\"@+id/textView\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginStart=\"20dp\"\n        android:layout_marginTop=\"20dp\"\n        android:layout_marginEnd=\"20dp\"\n        android:gravity=\"center\"\n        android:text=\"Editar nome do grupo\"\n        android:textColor=\"@color/black\"\n        android:textSize=\"18sp\"\n        android:textStyle=\"bold\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toTopOf=\"parent\" />\n\n    <EditText\n        android:id=\"@+id/editTextName\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginStart=\"20dp\"\n        android:layout_marginTop=\"10dp\"\n        android:layout_marginEnd=\"20dp\"\n        android:background=\"@drawable/custom_black_border\"\n        android:ems=\"10\"\n        android:hint=\"Altera o nome do grupo\"\n        android:inputType=\"textPersonName\"\n        android:minHeight=\"48dp\"\n        android:padding=\"10dp\"\n        android:textColor=\"#707070\"\n        android:textSize=\"12sp\"\n        android:textStyle=\"normal\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintHorizontal_bias=\"0.0\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/textView\" />\n\n\n    <Button\n        android:id=\"@+id/buttonSave\"\n        android:layout_width=\"0dp\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginStart=\"50dp\"\n        android:layout_marginTop=\"20dp\"\n        android:layout_marginEnd=\"50dp\"\n        android:layout_marginBottom=\"10dp\"\n        android:background=\"@drawable/button_register\"\n        android:backgroundTint=\"@color/green_200\"\n        android:paddingHorizontal=\"40dp\"\n        android:text=\"Guardar\"\n        android:textSize=\"12dp\"\n        android:translationZ=\"10dp\"\n        app:backgroundTint=\"@null\"\n        app:layout_constraintBottom_toBottomOf=\"parent\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/editTextName\" />\n\n    <TextView\n        android:id=\"@+id/textView5\"\n        android:layout_width=\"wrap_content\"\n        android:layout_height=\"wrap_content\"\n        android:layout_marginTop=\"10dp\"\n        android:layout_marginBottom=\"10dp\"\n        android:text=\"Aqui podes alterar o nome do teu grupo\"\n        app:layout_constraintBottom_toTopOf=\"@+id/buttonSave\"\n        app:layout_constraintEnd_toEndOf=\"parent\"\n        app:layout_constraintStart_toStartOf=\"parent\"\n        app:layout_constraintTop_toBottomOf=\"@+id/editTextName\" />\n\n</androidx.constraintlayout.widget.ConstraintLayout>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/res/layout/dialog_select_name.xml b/app/src/main/res/layout/dialog_select_name.xml
--- a/app/src/main/res/layout/dialog_select_name.xml	(revision 29efb0e97c5348e589c6b41e71b726f921c3b5a0)
+++ b/app/src/main/res/layout/dialog_select_name.xml	(date 1642693252254)
@@ -63,16 +63,4 @@
         app:layout_constraintStart_toStartOf="parent"
         app:layout_constraintTop_toBottomOf="@+id/editTextName" />
 
-    <TextView
-        android:id="@+id/textView5"
-        android:layout_width="wrap_content"
-        android:layout_height="wrap_content"
-        android:layout_marginTop="10dp"
-        android:layout_marginBottom="10dp"
-        android:text="Aqui podes alterar o nome do teu grupo"
-        app:layout_constraintBottom_toTopOf="@+id/buttonSave"
-        app:layout_constraintEnd_toEndOf="parent"
-        app:layout_constraintStart_toStartOf="parent"
-        app:layout_constraintTop_toBottomOf="@+id/editTextName" />
-
 </androidx.constraintlayout.widget.ConstraintLayout>
\ No newline at end of file
